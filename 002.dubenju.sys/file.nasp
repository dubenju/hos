[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_io_cli
	EXTERN	_io_sti
	EXTERN	_memman_alloc_4k
	EXTERN	_dbg_putstr0
	EXTERN	_tek_getsize
	EXTERN	_tek_decomp
	EXTERN	_memman_free_4k
	EXTERN	_strrchr
	EXTERN	_current_path
	EXTERN	_strncpy
	EXTERN	_strncat
	EXTERN	_strstr
	EXTERN	_memmove
	EXTERN	_strcpy
	EXTERN	_t
	EXTERN	_task_now
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_timer_settime
	EXTERN	_dbg_init
	EXTERN	_fifo32_status
	EXTERN	_fifo32_get
	EXTERN	_task_sleep
	EXTERN	_fdc
	EXTERN	_fifo32_put_io
	EXTERN	_sprintf
[FILE "file.c"]
[SECTION .text]
	GLOBAL	_file_readfat
_file_readfat:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EDI,DWORD [8+EBP]
	MOV	ESI,DWORD [12+EBP]
	XOR	EBX,EBX
L6:
	MOVZX	EAX,BYTE [1+ECX+ESI*1]
	MOVZX	EDX,BYTE [ECX+ESI*1]
	SAL	EAX,8
	OR	EDX,EAX
	AND	EDX,4095
	MOV	DWORD [EDI+EBX*4],EDX
	MOV	AL,BYTE [1+ECX+ESI*1]
	MOVZX	EDX,BYTE [2+ECX+ESI*1]
	SHR	AL,4
	ADD	ECX,3
	SAL	EDX,4
	MOVZX	EAX,AL
	OR	EAX,EDX
	MOV	DWORD [4+EDI+EBX*4],EAX
	ADD	EBX,2
	CMP	EBX,2879
	JLE	L6
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_file_loadfile
_file_loadfile:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	ECX,DWORD [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	MOV	EBX,DWORD [16+EBP]
L10:
	CMP	ECX,512
	JLE	L27
	XOR	EDX,EDX
L23:
	MOV	EAX,ESI
	MOV	EDI,DWORD [24+EBP]
	SAL	EAX,9
	ADD	EAX,EDX
	MOV	AL,BYTE [EAX+EDI*1]
	MOV	BYTE [EDX+EBX*1],AL
	INC	EDX
	CMP	EDX,511
	JLE	L23
	MOV	EAX,DWORD [20+EBP]
	SUB	ECX,512
	ADD	EBX,512
	MOV	ESI,DWORD [EAX+ESI*4]
	JMP	L10
L27:
	XOR	EDX,EDX
	CMP	EDX,ECX
	JGE	L9
L18:
	MOV	EAX,ESI
	MOV	EDI,DWORD [24+EBP]
	SAL	EAX,9
	ADD	EAX,EDX
	MOV	AL,BYTE [EAX+EDI*1]
	MOV	BYTE [EDX+EBX*1],AL
	INC	EDX
	CMP	EDX,ECX
	JL	L18
L9:
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_file_searchfat
_file_searchfat:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	XOR	EBX,EBX
	MOV	ESI,DWORD [8+EBP]
L35:
	CMP	DWORD [ESI+EBX*4],0
	JE	L38
L31:
	INC	EBX
	CMP	EBX,2848
	JLE	L35
	MOV	EAX,4095
L28:
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L38:
	CALL	_io_cli
	CMP	DWORD [ESI+EBX*4],0
	JE	L39
	CALL	_io_sti
	JMP	L31
L39:
	MOV	DWORD [ESI+EBX*4],4095
	CALL	_io_sti
	MOV	EAX,EBX
	JMP	L28
	GLOBAL	_file_search
_file_search:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,20
	MOV	EBX,DWORD [8+EBP]
L45:
	MOV	BYTE [-28+EBP+ECX*1],32
	INC	ECX
	CMP	ECX,10
	JLE	L45
	XOR	ECX,ECX
	XOR	EDI,EDI
	CMP	BYTE [EBX],0
	JE	L72
L54:
	XOR	EAX,EAX
	CMP	ECX,10
	JG	L40
	MOV	DL,BYTE [EDI+EBX*1]
	CMP	DL,46
	JE	L76
L51:
	LEA	EAX,DWORD [-97+EDX]
	MOV	BYTE [-28+EBP+ECX*1],DL
	CMP	AL,25
	JA	L53
	LEA	EAX,DWORD [-32+EDX]
	MOV	BYTE [-28+EBP+ECX*1],AL
L53:
	INC	ECX
L48:
	INC	EDI
	CMP	BYTE [EDI+EBX*1],0
	JNE	L54
L72:
	XOR	EDI,EDI
	CMP	EDI,DWORD [16+EBP]
	JGE	L56
	MOV	ESI,DWORD [12+EBP]
	MOV	DWORD [-32+EBP],0
L68:
	MOV	EAX,DWORD [12+EBP]
	CMP	BYTE [EAX],0
	JE	L56
	TEST	BYTE [11+ESI],24
	JNE	L66
	MOV	EBX,EAX
	XOR	ECX,ECX
	ADD	EBX,DWORD [-32+EBP]
L67:
	MOVZX	EDX,BYTE [EBX]
	MOVSX	EAX,BYTE [-28+EBP+ECX*1]
	CMP	EDX,EAX
	JNE	L66
	INC	ECX
	INC	EBX
	MOV	EAX,ESI
	CMP	ECX,10
	JLE	L67
L40:
	ADD	ESP,20
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L66:
	INC	EDI
	ADD	ESI,32
	ADD	DWORD [-32+EBP],32
	CMP	EDI,DWORD [16+EBP]
	JL	L68
L56:
	XOR	EAX,EAX
	JMP	L40
L76:
	CMP	ECX,8
	JG	L51
	MOV	ECX,8
	JMP	L48
	GLOBAL	_file_search2
_file_search2:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EAX,DWORD [-524+EBP]
	SUB	ESP,1024
	PUSH	512
	PUSH	DWORD [8+EBP]
	PUSH	EAX
	CALL	_file_path
	ADD	ESP,12
	CMP	BYTE [-524+EBP],0
	JE	L90
	XOR	EAX,EAX
L84:
	CMP	BYTE [-524+EBP+EAX*1],47
	JE	L103
L81:
	INC	EAX
	MOV	BL,BYTE [-524+EBP+EAX*1]
	TEST	BL,BL
	JNE	L84
	PUSH	DWORD [16+EBP]
	LEA	ESI,DWORD [-523+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	ESI
	MOV	EDI,ESI
	CALL	_file_search
	ADD	ESP,12
	CLD
	OR	ECX,-1
	MOV	EDX,EAX
	MOV	AL,BL
	REPNE
	SCASB
	NOT	ECX
	LEA	ECX,DWORD [-1+ESI+ECX*1]
	LEA	ESI,DWORD [1+ECX]
	CMP	BYTE [1+ECX],0
	JE	L101
L97:
	TEST	EDX,EDX
	JE	L90
	MOV	AL,BYTE [11+EDX]
	AND	EAX,16
	TEST	AL,AL
	JE	L90
	MOVZX	EDI,WORD [26+EDX]
	CMP	EDI,4086
	JLE	L96
L92:
	CLD
	MOV	EDI,ESI
	OR	ECX,-1
	XOR	EAX,EAX
	REPNE
	SCASB
	NOT	ECX
	LEA	ECX,DWORD [-1+ESI+ECX*1]
	LEA	ESI,DWORD [1+ECX]
	CMP	BYTE [1+ECX],0
	JNE	L97
L101:
	MOV	EAX,EDX
L77:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L96:
	PUSH	1064448
	LEA	EBX,DWORD [-1036+EBP]
	PUSH	DWORD [20+EBP]
	PUSH	EBX
	PUSH	512
	PUSH	EDI
	CALL	_file_loadfile
	PUSH	16
	PUSH	EBX
	PUSH	ESI
	CALL	_file_search
	ADD	ESP,32
	MOV	EDX,EAX
	TEST	EAX,EAX
	JNE	L92
	MOV	EAX,DWORD [20+EBP]
	MOV	EDI,DWORD [EAX+EDI*4]
	CMP	EDI,4086
	JLE	L96
	JMP	L92
L90:
	XOR	EAX,EAX
	JMP	L77
L103:
	MOV	BYTE [-524+EBP+EAX*1],0
	JMP	L81
[SECTION .data]
LC0:
	DB	0x95,0xB6,0x8E,0x9A,"load font.",0x0A,0x00
LC1:
	DB	"tek font.",0x0A,0x00
[SECTION .text]
	GLOBAL	_file_loadfile2
_file_loadfile2:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EBX
	MOV	EAX,DWORD [12+EBP]
	MOV	EAX,DWORD [EAX]
	PUSH	EAX
	MOV	DWORD [-16+EBP],EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	1064448
	PUSH	DWORD [16+EBP]
	PUSH	EAX
	MOV	EDI,EAX
	PUSH	DWORD [-16+EBP]
	PUSH	DWORD [8+EBP]
	CALL	_file_loadfile
	PUSH	0
	PUSH	LC0
	CALL	_dbg_putstr0
	ADD	ESP,36
	CMP	DWORD [-16+EBP],16
	JG	L107
L105:
	LEA	ESP,DWORD [-12+EBP]
	MOV	EAX,EDI
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L107:
	PUSH	EDI
	CALL	_tek_getsize
	POP	ECX
	MOV	ESI,EAX
	TEST	EAX,EAX
	JLE	L105
	PUSH	EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	ESI
	MOV	EBX,EAX
	PUSH	EAX
	PUSH	EDI
	CALL	_tek_decomp
	PUSH	DWORD [-16+EBP]
	PUSH	EDI
	MOV	EDI,EBX
	PUSH	3932160
	CALL	_memman_free_4k
	ADD	ESP,32
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [EAX],ESI
	PUSH	0
	PUSH	LC1
	CALL	_dbg_putstr0
	POP	EAX
	POP	EDX
	JMP	L105
	GLOBAL	_file_clearfat
_file_clearfat:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EDI,DWORD [8+EBP]
	MOV	EBX,DWORD [12+EBP]
	MOV	ESI,DWORD [EDI+EBX*4]
	CMP	ESI,4086
	JLE	L113
L115:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L113:
	MOV	DWORD [EDI+EBX*4],0
	PUSH	EBX
	PUSH	EDI
	CALL	_file_compfat
	PUSH	2
	PUSH	EBX
	MOV	EBX,ESI
	CALL	_file_savesec
	ADD	ESP,16
	MOV	ESI,DWORD [EDI+ESI*4]
	CMP	ESI,4086
	JLE	L113
	JMP	L115
	GLOBAL	_file_savefile
_file_savefile:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	PUSH	EAX
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [-16+EBP],0
	MOV	EBX,DWORD [20+EAX]
	MOV	EDX,DWORD [EAX]
	MOV	DWORD [-20+EBP],EDX
	CMP	EBX,4086
	JG	L118
	CMP	DWORD [12+EBP],0
	JNE	L117
L118:
	XOR	EAX,EAX
L116:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L117:
	TEST	EBX,EBX
	JE	L120
	PUSH	DWORD [16+EBP]
	CALL	_file_searchfat
	MOV	ESI,EAX
	MOV	EAX,DWORD [16+EBP]
	MOV	DWORD [EAX+EBX*4],ESI
	PUSH	EBX
	PUSH	EAX
	CALL	_file_compfat
	PUSH	2
	PUSH	EBX
	CALL	_file_savesec
	ADD	ESP,20
L119:
	CMP	ESI,4095
	JE	L123
L127:
	MOV	EBX,ESI
	CMP	DWORD [12+EBP],512
	JLE	L129
	MOV	EDI,ESI
	MOV	ECX,128
	SAL	EDI,9
	MOV	ESI,DWORD [-20+EBP]
	CLD
	ADD	EDI,DWORD [20+EBP]
	REP
	MOVSD
	PUSH	3
	PUSH	EBX
	CALL	_file_savesec
	PUSH	DWORD [16+EBP]
	SUB	DWORD [12+EBP],512
	ADD	DWORD [-20+EBP],512
	ADD	DWORD [-16+EBP],512
	CALL	_file_searchfat
	MOV	EDX,DWORD [16+EBP]
	MOV	ESI,EAX
	MOV	DWORD [EDX+EBX*4],EAX
	PUSH	EBX
	PUSH	EDX
	CALL	_file_compfat
	PUSH	2
	PUSH	EBX
	CALL	_file_savesec
	ADD	ESP,28
	CMP	ESI,4095
	JNE	L127
L123:
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [20+EAX],EBX
	PUSH	DWORD [24+EAX]
	CALL	_file_time
	MOV	EBX,DWORD [-16+EBP]
	MOV	EDX,DWORD [8+EBP]
	MOV	ECX,DWORD [24+EDX]
	MOV	EAX,DWORD [28+ECX]
	MOV	EDX,EAX
	AND	EDX,511
	SUB	EBX,EDX
	ADD	EAX,EBX
	MOV	DWORD [28+ECX],EAX
	PUSH	1
	PUSH	ECX
	CALL	_file_savesec
	MOV	EAX,DWORD [-16+EBP]
	JMP	L116
L129:
	MOV	EDI,EBX
	MOV	ESI,DWORD [-20+EBP]
	SAL	EDI,9
	MOV	ECX,DWORD [12+EBP]
	ADD	EDI,DWORD [20+EBP]
	CLD
	REP
	MOVSB
	PUSH	3
	PUSH	EBX
	CALL	_file_savesec
	POP	ESI
	MOV	EDX,DWORD [12+EBP]
	POP	EDI
	ADD	DWORD [-16+EBP],EDX
	JMP	L123
L120:
	PUSH	DWORD [16+EBP]
	CALL	_file_searchfat
	MOV	EDX,DWORD [8+EBP]
	MOV	ESI,EAX
	MOV	EAX,DWORD [24+EDX]
	MOV	WORD [26+EAX],SI
	PUSH	0
	PUSH	DWORD [16+EBP]
	CALL	_file_compfat
	PUSH	2
	PUSH	0
	CALL	_file_savesec
	MOV	EAX,DWORD [8+EBP]
	PUSH	1
	PUSH	DWORD [24+EAX]
	CALL	_file_savesec
	ADD	ESP,28
	JMP	L119
	GLOBAL	_file_skipfile
_file_skipfile:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [12+EBP]
	MOV	ESI,DWORD [16+EBP]
	TEST	DWORD [24+EBP],15
	MOV	ECX,DWORD [24+EAX]
	MOV	DWORD [-16+EBP],0
	MOVZX	EAX,WORD [26+ECX]
	MOV	DWORD [-20+EBP],0
	JE	L142
	LEA	EBX,DWORD [-512+EDX]
	CMP	DWORD [-16+EBP],EBX
	JGE	L133
L137:
	MOV	DWORD [-16+EBP],EAX
	MOV	EAX,DWORD [ESI+EAX*4]
	CMP	EAX,4086
	JG	L133
	ADD	DWORD [-20+EBP],512
	CMP	DWORD [-20+EBP],EBX
	JL	L137
L133:
	MOV	EBX,EDX
	SUB	EBX,DWORD [-20+EBP]
	CMP	EBX,511
	JG	L138
	SAL	EAX,9
	MOV	ECX,DWORD [8+EBP]
	MOV	ESI,EAX
	ADD	ESI,DWORD [20+EBP]
	MOV	EDI,DWORD [ECX]
	CLD
	MOV	ECX,EBX
	REP
	MOVSB
L139:
	MOV	EDX,512
	MOV	EAX,EBX
	MOV	ECX,EDX
	MOV	EDI,DWORD [8+EBP]
	CDQ
	IDIV	ECX
	MOV	ESI,DWORD [-20+EBP]
	MOV	EAX,DWORD [-16+EBP]
	ADD	ESI,EBX
	MOV	DWORD [20+EDI],EAX
	MOV	DWORD [8+EDI],ESI
	MOV	DWORD [16+EDI],EDX
	MOV	EAX,ESI
L130:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L138:
	CMP	EBX,512
	JLE	L139
	MOV	EAX,DWORD [-20+EBP]
	MOV	EBX,512
	ADD	EAX,512
	MOV	DWORD [28+ECX],EAX
	PUSH	1
	PUSH	ECX
	CALL	_file_savesec
	POP	EAX
	POP	EDX
	JMP	L139
L142:
	PUSH	EAX
	PUSH	ESI
	CALL	_file_clearfat
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [24+EDX]
	MOV	WORD [26+EAX],4095
	MOV	DWORD [28+EAX],0
	PUSH	1
	PUSH	EAX
	CALL	_file_savesec
	XOR	EAX,EAX
	JMP	L130
	GLOBAL	_file_insert
_file_insert:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	ESI,DWORD [-524+EBP]
	SUB	ESP,1036
	MOV	DWORD [-1040+EBP],0
	PUSH	512
	PUSH	DWORD [8+EBP]
	PUSH	ESI
	CALL	_file_path
	ADD	ESP,12
	CMP	BYTE [-524+EBP],0
	JNE	L174
L158:
	XOR	EAX,EAX
L143:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L174:
	PUSH	47
	PUSH	ESI
	CALL	_strrchr
	POP	ECX
	POP	EDX
	CMP	EAX,ESI
	MOV	DWORD [-1044+EBP],EAX
	JE	L172
	MOV	EAX,DWORD [-1044+EBP]
	MOV	BYTE [EAX],0
	PUSH	DWORD [20+EBP]
	PUSH	DWORD [16+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	ESI
	CALL	_file_search2
	ADD	ESP,16
	MOV	EBX,EAX
	TEST	EAX,EAX
	JE	L158
	MOV	AL,BYTE [11+EAX]
	AND	EAX,16
	TEST	AL,AL
	JE	L158
	CMP	WORD [26+EBX],0
	JNE	L146
L172:
	MOV	DWORD [-1040+EBP],1
L146:
	CMP	DWORD [-1040+EBP],1
	JE	L175
	MOVZX	ECX,WORD [26+EBX]
	XOR	EBX,EBX
L167:
	TEST	EBX,15
	JNE	L163
	CMP	ECX,4086
	JG	L160
	PUSH	1064448
	LEA	EAX,DWORD [-1036+EBP]
	PUSH	DWORD [20+EBP]
	PUSH	EAX
	MOV	EDI,ECX
	PUSH	512
	PUSH	ECX
	CALL	_file_loadfile
	ADD	ESP,20
	MOV	ESI,DWORD [20+EBP]
	MOV	ECX,DWORD [ESI+EDI*4]
L163:
	MOV	EDX,16
	MOV	EAX,EBX
	MOV	ESI,EDX
	CDQ
	IDIV	ESI
	SAL	EDX,5
	MOV	AL,BYTE [-1036+EBP+EDX*1]
	TEST	AL,AL
	JE	L166
	CMP	AL,-27
	JE	L166
	INC	EBX
	CMP	EBX,4095
	JLE	L167
L160:
	LEA	EAX,DWORD [-1+EBX]
	CMP	EAX,4094
	JA	L158
	PUSH	DWORD [20+EBP]
	MOV	EAX,DWORD [-1044+EBP]
	PUSH	EDI
	INC	EAX
	PUSH	EAX
	CALL	_file_extdir
	ADD	ESP,12
	MOV	EBX,EAX
	XOR	EAX,EAX
	TEST	EBX,EBX
	JNE	L158
	JMP	L143
L166:
	SAL	EDI,9
	LEA	EBX,DWORD [1064448+EDX+EDI*1]
L173:
	MOV	EAX,DWORD [-1044+EBP]
	PUSH	EBX
	INC	EAX
	PUSH	EAX
	CALL	_file_entry
	MOV	EAX,EBX
	JMP	L143
L175:
	XOR	EBX,EBX
	CMP	EBX,DWORD [16+EBP]
	JGE	L158
	XOR	EDX,EDX
L157:
	MOV	ECX,DWORD [12+EBP]
	MOV	AL,BYTE [ECX+EDX*1]
	TEST	AL,AL
	JE	L156
	CMP	AL,-27
	JE	L156
	INC	EBX
	ADD	EDX,32
	CMP	EBX,DWORD [16+EBP]
	JL	L157
	JMP	L158
L156:
	MOV	EBX,DWORD [12+EBP]
	ADD	EBX,EDX
	JMP	L173
	GLOBAL	_file_move
_file_move:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EAX,DWORD [8+EBP]
	MOV	EBX,DWORD [12+EBP]
	TEST	EAX,EAX
	JE	L177
	PUSH	EBX
	PUSH	EAX
	CALL	_file_name
	POP	ECX
	POP	EAX
L178:
	MOV	DWORD [8+EBP],EBX
	MOV	EBX,DWORD [-4+EBP]
	MOV	DWORD [12+EBP],1
	LEAVE
	JMP	_file_savesec
L177:
	MOV	BYTE [EBX],-27
	JMP	L178
[SECTION .data]
LC2:
	DB	"//",0x00
LC3:
	DB	"/.",0x00
LC4:
	DB	"/..",0x00
[SECTION .text]
	GLOBAL	_file_path
_file_path:
	PUSH	EBP
	XOR	EAX,EAX
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-524+EBP]
	SUB	ESP,516
	CLD
	MOV	EDI,DWORD [8+EBP]
	MOV	ECX,DWORD [16+EBP]
	MOV	ESI,DWORD [12+EBP]
	REP
	STOSB
	LEA	EDI,DWORD [-524+EBP]
	MOV	EAX,ECX
	MOV	ECX,128
	REP
	STOSD
	CMP	BYTE [ESI],47
	JE	L211
	PUSH	255
	PUSH	_current_path
	PUSH	EBX
	CALL	_strncpy
	PUSH	255
	PUSH	ESI
	PUSH	EBX
	CALL	_strncat
	ADD	ESP,24
L181:
	LEA	EBX,DWORD [-524+EBP]
L182:
	PUSH	LC2
	PUSH	EBX
	CALL	_strstr
	POP	ECX
	MOV	EBX,EAX
	POP	ESI
	TEST	EAX,EAX
	JE	L183
	OR	ESI,-1
	XOR	EDX,EDX
	CLD
	MOV	EDI,EAX
	MOV	ECX,ESI
	MOV	AL,DL
	REPNE
	SCASB
	NOT	ECX
	DEC	ECX
	CMP	ECX,1
	JBE	L183
	LEA	EAX,DWORD [1+EBX]
	MOV	ECX,ESI
	CLD
	MOV	DWORD [-528+EBP],EAX
	MOV	EDI,EAX
	MOV	AL,DL
	REPNE
	SCASB
	NOT	ECX
	PUSH	ECX
	PUSH	DWORD [-528+EBP]
	PUSH	EBX
	CALL	_memmove
	ADD	ESP,12
	JMP	L182
L183:
	LEA	EBX,DWORD [-524+EBP]
L188:
	PUSH	LC3
	PUSH	EBX
	CALL	_strstr
	MOV	EBX,EAX
	POP	EAX
	POP	EDX
	TEST	EBX,EBX
	JE	L189
	OR	ESI,-1
	XOR	EDX,EDX
	CLD
	MOV	EDI,EBX
	MOV	ECX,ESI
	MOV	AL,DL
	REPNE
	SCASB
	NOT	ECX
	DEC	ECX
	CMP	ECX,1
	JBE	L189
	MOV	AL,BYTE [2+EBX]
	TEST	AL,AL
	JE	L212
	CMP	AL,47
	JE	L213
	ADD	EBX,2
	JMP	L188
L213:
	LEA	ECX,DWORD [3+EBX]
	MOV	AL,DL
	CLD
	MOV	DWORD [-528+EBP],ECX
	MOV	EDI,ECX
	MOV	ECX,ESI
	REPNE
	SCASB
	NOT	ECX
	PUSH	ECX
	LEA	EAX,DWORD [1+EBX]
	PUSH	DWORD [-528+EBP]
	PUSH	EAX
	CALL	_memmove
	ADD	ESP,12
	JMP	L188
L212:
	MOV	BYTE [1+EBX],0
	JMP	L188
L189:
	LEA	ESI,DWORD [-524+EBP]
L198:
	PUSH	LC4
	PUSH	ESI
	CALL	_strstr
	MOV	EBX,EAX
	POP	EAX
	POP	EDX
	TEST	EBX,EBX
	JE	L199
	CLD
	OR	ECX,-1
	XOR	EAX,EAX
	MOV	EDI,EBX
	REPNE
	SCASB
	NOT	ECX
	DEC	ECX
	CMP	ECX,2
	JBE	L199
	MOV	AL,BYTE [3+EBX]
	TEST	AL,AL
	JE	L204
	CMP	AL,47
	JE	L204
	LEA	ESI,DWORD [3+EBX]
	JMP	L198
L204:
	MOV	BYTE [EBX],0
	LEA	EAX,DWORD [-524+EBP]
	PUSH	47
	PUSH	EAX
	CALL	_strrchr
	POP	ECX
	MOV	ESI,EAX
	POP	EDI
	TEST	EAX,EAX
	JE	L179
	MOV	AL,BYTE [3+EBX]
	TEST	AL,AL
	JE	L214
	CMP	AL,47
	JNE	L198
	LEA	EDX,DWORD [4+EBX]
	MOV	BYTE [EBX],47
	CLD
	MOV	EDI,EDX
	XOR	EAX,EAX
	OR	ECX,-1
	REPNE
	SCASB
	NOT	ECX
	PUSH	ECX
	LEA	EAX,DWORD [1+ESI]
	PUSH	EDX
	PUSH	EAX
	CALL	_memmove
	ADD	ESP,12
	JMP	L198
L214:
	MOV	BYTE [1+ESI],0
	JMP	L198
L179:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L199:
	MOV	EAX,DWORD [16+EBP]
	SUB	EAX,2
	PUSH	EAX
	LEA	EAX,DWORD [-524+EBP]
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	CALL	_strncpy
	JMP	L179
L211:
	PUSH	255
	PUSH	ESI
	PUSH	EBX
	CALL	_strncpy
	ADD	ESP,12
	JMP	L181
	GLOBAL	_file_extdir
_file_extdir:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	EDI,DWORD [16+EBP]
	PUSH	EDI
	MOV	ESI,DWORD [12+EBP]
	CALL	_file_searchfat
	MOV	EBX,EAX
	POP	EAX
	CMP	EBX,4095
	JE	L216
	MOV	DWORD [EDI+ESI*4],EBX
	PUSH	ESI
	PUSH	EDI
	CALL	_file_compfat
	PUSH	2
	PUSH	ESI
	CALL	_file_savesec
	MOV	EAX,EBX
	SAL	EAX,9
	LEA	ESI,DWORD [1064448+EAX]
	PUSH	ESI
	PUSH	DWORD [8+EBP]
	CALL	_file_entry
	PUSH	3
	PUSH	EBX
	CALL	_file_savesec
	ADD	ESP,32
	PUSH	EBX
	PUSH	EDI
	CALL	_file_compfat
	PUSH	2
	PUSH	EBX
	CALL	_file_savesec
	MOV	EAX,ESI
L215:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L216:
	XOR	EAX,EAX
	JMP	L215
	GLOBAL	_file_entry
_file_entry:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [12+EBP]
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_file_name
	MOV	BYTE [11+EBX],32
	MOV	WORD [26+EBX],4095
	MOV	DWORD [28+EBX],0
	PUSH	EBX
	CALL	_file_time
	MOV	DWORD [8+EBP],EBX
	ADD	ESP,12
	MOV	EBX,DWORD [-4+EBP]
	MOV	DWORD [12+EBP],1
	LEAVE
	JMP	_file_savesec
	GLOBAL	_file_name
_file_name:
	PUSH	EBP
	MOV	ECX,13
	MOV	EBP,ESP
	XOR	EAX,EAX
	PUSH	EDI
	PUSH	ESI
	LEA	EDI,DWORD [-28+EBP]
	PUSH	EBX
	XOR	EBX,EBX
	CLD
	SUB	ESP,16
	MOV	ESI,DWORD [8+EBP]
	REP
	STOSB
L224:
	CMP	ECX,8
	JE	L221
	MOV	BYTE [-28+EBP+ECX*1],32
L221:
	INC	ECX
	CMP	ECX,11
	JLE	L224
	XOR	ECX,ECX
	CMP	EBX,11
	JG	L226
	CMP	BYTE [ESI],0
	JE	L226
L233:
	MOV	DL,BYTE [ECX+ESI*1]
	CMP	DL,46
	JE	L237
	LEA	EAX,DWORD [-97+EDX]
	MOV	BYTE [-28+EBP+EBX*1],DL
	CMP	AL,25
	JA	L232
	LEA	EAX,DWORD [-32+EDX]
	MOV	BYTE [-28+EBP+EBX*1],AL
L232:
	INC	EBX
L227:
	INC	ECX
	CMP	EBX,11
	JG	L226
	CMP	BYTE [ECX+ESI*1],0
	JNE	L233
L226:
	LEA	EAX,DWORD [-28+EBP]
	PUSH	EAX
	PUSH	DWORD [12+EBP]
	CALL	_strcpy
	LEA	EAX,DWORD [-19+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	ADD	EAX,8
	PUSH	EAX
	CALL	_strcpy
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L237:
	MOV	EBX,9
	JMP	L227
	GLOBAL	_file_time
_file_time:
	PUSH	EBP
	MOV	ECX,7
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,_t
	PUSH	EBX
	LEA	EDI,DWORD [-28+EBP]
	CLD
	SUB	ESP,32
	REP
	MOVSB
	MOV	EBX,DWORD [8+EBP]
L243:
	MOV	DL,BYTE [-28+EBP+ECX*1]
	MOV	AL,DL
	AND	EDX,15
	SAR	AL,4
	MOVSX	EAX,AL
	IMUL	EAX,EAX,10
	ADD	EDX,EAX
	MOV	WORD [-44+EBP+ECX*2],DX
	INC	ECX
	CMP	ECX,6
	JLE	L243
	MOVZX	EDX,WORD [-40+EBP]
	MOVZX	EAX,WORD [-42+EBP]
	SAL	EAX,5
	SAL	EDX,11
	ADD	EDX,EAX
	MOV	EAX,DWORD [-44+EBP]
	SHR	AX,1
	ADD	EDX,EAX
	MOV	WORD [22+EBX],DX
	MOVZX	EAX,WORD [-32+EBP]
	IMUL	EAX,EAX,100
	MOVZX	EDX,WORD [-34+EBP]
	LEA	EAX,DWORD [-1980+EDX+EAX*1]
	MOVZX	EDX,WORD [-36+EBP]
	SAL	EAX,9
	SAL	EDX,5
	ADD	EAX,EDX
	ADD	AX,WORD [-38+EBP]
	MOV	WORD [24+EBX],AX
	ADD	ESP,32
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_file_compfat
_file_compfat:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,2
	PUSH	EBX
	SUB	ESP,16
	MOV	EAX,DWORD [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	CDQ
	IDIV	EDI
	ADD	EAX,EAX
	MOV	DL,BYTE [ESI+EAX*4]
	MOV	BYTE [-28+EBP],DL
	MOV	ECX,DWORD [4+ESI+EAX*4]
	MOV	DL,BYTE [1+ESI+EAX*4]
	MOV	BL,CL
	AND	EDX,15
	SAL	EBX,4
	SHR	ECX,4
	OR	EDX,EBX
	MOV	BYTE [-27+EBP],DL
	MOV	BYTE [-26+EBP],CL
	CDQ
	IDIV	EDI
	IMUL	EAX,EAX,3
	MOV	EDX,DWORD [-28+EBP]
	MOV	WORD [1049088+EAX],DX
	MOV	DL,BYTE [-26+EBP]
	MOV	BYTE [1049090+EAX],DL
	MOV	EDX,DWORD [-28+EBP]
	MOV	WORD [1053696+EAX],DX
	MOV	DL,BYTE [-26+EBP]
	MOV	BYTE [1053698+EAX],DL
	ADD	ESP,16
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_file_savesec
_file_savesec:
	PUSH	EBP
	MOV	ECX,512
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,24
	MOV	EDX,DWORD [12+EBP]
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [-20+EBP],512
	MOV	DWORD [-16+EBP],5120
	CMP	EDX,1
	JE	L260
	CMP	EDX,2
	JE	L261
	ADD	EAX,31
L259:
	PUSH	EAX
	CALL	_file_updtbl
	POP	EAX
L247:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L261:
	MOV	ECX,EDX
	CDQ
	IDIV	ECX
	ADD	EAX,EAX
	MOV	DWORD [-28+EBP],EAX
	MOV	DWORD [-24+EBP],0
	MOV	DWORD [-32+EBP],0
L256:
	MOV	EAX,DWORD [-28+EBP]
	MOV	EDX,2
	MOV	EBX,EDX
	CDQ
	IDIV	EBX
	IMUL	ESI,EAX,3
	MOV	EAX,DWORD [-32+EBP]
	MOV	EBX,512
	MOV	ECX,DWORD [-20+EBP+EAX*1]
	ADD	ECX,ESI
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	PUSH	EAX
	MOV	EDI,EAX
	CALL	_file_updtbl
	MOV	EDX,DWORD [-32+EBP]
	ADD	ESI,DWORD [-20+EBP+EDX*1]
	MOV	EAX,ESI
	CDQ
	IDIV	EBX
	POP	EAX
	CMP	EDX,509
	JG	L262
L253:
	INC	DWORD [-24+EBP]
	ADD	DWORD [-32+EBP],4
	CMP	DWORD [-24+EBP],1
	JLE	L256
	JMP	L247
L262:
	LEA	EAX,DWORD [1+EDI]
	PUSH	EAX
	CALL	_file_updtbl
	POP	EAX
	JMP	L253
L260:
	SUB	EAX,1048576
	CDQ
	IDIV	ECX
	JMP	L259
	GLOBAL	_file_updtbl
_file_updtbl:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	PUSH	ECX
	MOV	ECX,36
	MOV	EAX,DWORD [8+EBP]
	CDQ
	IDIV	ECX
	MOV	EBX,EAX
	MOV	ECX,18
	MOV	EAX,EDX
	MOV	DWORD [-16+EBP],EDX
	CDQ
	IDIV	ECX
	MOV	ECX,EDX
	MOV	EDX,1
	LEA	EBX,DWORD [EAX+EBX*2]
	SAL	EDX,CL
	OR	DWORD [_w_req+EBX*4],EDX
	MOV	DWORD [-12+EBP],EBX
	OR	DWORD [_i_sta+EBX*4],EDX
	OR	DWORD [_w_req],1048576
	POP	EAX
	POP	EDX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_file_inittbl
_file_inittbl:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	EAX
	CMP	BYTE [4080],0
	JLE	L276
L274:
	XOR	EDX,EDX
L273:
	LEA	EAX,DWORD [EDX+ECX*2]
	INC	EDX
	CMP	EDX,1
	MOV	DWORD [_i_sta+EAX*4],262143
	JLE	L273
	INC	ECX
	MOVSX	EAX,BYTE [4080]
	CMP	ECX,EAX
	JL	L274
L276:
	CLD
	MOV	EDX,160
	XOR	EAX,EAX
	MOV	EDI,_r_req
	MOV	ECX,EDX
	REP
	STOSD
	MOV	EDI,_w_req
	MOV	ECX,EDX
	REP
	STOSD
	POP	EDI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_hrb_api_fopen
_hrb_api_fopen:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,DWORD [16+EBP]
	PUSH	EBX
	MOV	EDI,DWORD [20+EBP]
	MOV	DWORD [12+ESI],4096
	MOV	DWORD [8+ESI],0
	MOV	DWORD [16+ESI],0
	MOV	DWORD [20+ESI],0
	PUSH	4096
	PUSH	3932160
	CALL	_memman_alloc_4k
	MOV	DWORD [ESI],EAX
	PUSH	EDI
	PUSH	224
	PUSH	1058304
	PUSH	DWORD [8+EBP]
	CALL	_file_search2
	ADD	ESP,24
	MOV	EBX,EAX
	TEST	EAX,EAX
	JE	L280
	TEST	BYTE [11+EAX],24
	JE	L281
	XOR	EAX,EAX
L279:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L281:
	MOV	DWORD [24+ESI],EAX
	PUSH	DWORD [12+EBP]
	PUSH	1064448
	PUSH	EDI
	PUSH	DWORD [28+EAX]
	PUSH	ESI
	CALL	_file_skipfile
	ADD	ESP,20
L282:
	MOV	EAX,DWORD [28+EBX]
	MOV	DWORD [4+ESI],EAX
	MOV	EAX,ESI
	JMP	L279
L280:
	PUSH	EDI
	PUSH	224
	PUSH	1058304
	PUSH	DWORD [8+EBP]
	CALL	_file_insert
	ADD	ESP,16
	MOV	EBX,EAX
	XOR	EAX,EAX
	TEST	EBX,EBX
	JE	L279
	MOV	DWORD [24+ESI],EBX
	JMP	L282
	GLOBAL	_hrb_api_fclose
_hrb_api_fclose:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [16+EBX]
	TEST	EAX,EAX
	JNE	L286
L285:
	PUSH	DWORD [12+EBX]
	PUSH	DWORD [EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	MOV	DWORD [EBX],0
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L286:
	PUSH	1064448
	PUSH	DWORD [12+EBP]
	PUSH	EAX
	PUSH	EBX
	CALL	_file_savefile
	ADD	ESP,16
	JMP	L285
	GLOBAL	_hrb_api_fwrite
_hrb_api_fwrite:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	PUSH	EAX
	MOV	ESI,DWORD [8+EBP]
	MOV	EBX,DWORD [12+EBP]
	MOV	DWORD [-20+EBP],0
L293:
	MOV	EAX,DWORD [16+EBP]
	MOV	EDX,DWORD [16+EAX]
	LEA	EAX,DWORD [EBX+EDX*1]
	CMP	EAX,4095
	JLE	L295
	MOV	DWORD [-16+EBP],4096
	MOV	ECX,DWORD [16+EBP]
	SUB	DWORD [-16+EBP],EDX
	MOV	EDI,DWORD [ECX]
	CLD
	ADD	EDI,EDX
	MOV	ECX,DWORD [-16+EBP]
	REP
	MOVSB
	PUSH	1064448
	PUSH	DWORD [20+EBP]
	PUSH	4096
	PUSH	DWORD [16+EBP]
	CALL	_file_savefile
	ADD	ESP,16
	MOV	EDX,DWORD [16+EBP]
	MOV	ECX,DWORD [-16+EBP]
	SUB	EBX,DWORD [-16+EBP]
	ADD	DWORD [8+EDX],ECX
	MOV	ECX,DWORD [16+EBP]
	MOV	EDX,EAX
	SUB	EDX,DWORD [16+ECX]
	MOV	DWORD [16+ECX],0
	ADD	DWORD [-20+EBP],EDX
	CMP	EAX,4096
	JE	L293
L289:
	MOV	EAX,DWORD [-20+EBP]
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L295:
	MOV	ECX,DWORD [16+EBP]
	CLD
	MOV	EDI,DWORD [ECX]
	MOV	ECX,EBX
	ADD	EDI,EDX
	REP
	MOVSB
	MOV	EAX,DWORD [16+EBP]
	ADD	DWORD [-20+EBP],EBX
	ADD	DWORD [8+EAX],EBX
	ADD	DWORD [16+EAX],EBX
	JMP	L289
	GLOBAL	_hrb_api_remove
_hrb_api_remove:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [12+EBP]
	PUSH	ESI
	PUSH	224
	PUSH	1058304
	PUSH	DWORD [8+EBP]
	CALL	_file_search2
	ADD	ESP,16
	MOV	EBX,EAX
	TEST	EAX,EAX
	JE	L298
	TEST	BYTE [11+EAX],24
	JE	L297
L298:
	OR	EAX,-1
L296:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L297:
	MOVZX	EAX,WORD [26+EAX]
	PUSH	EAX
	PUSH	ESI
	CALL	_file_clearfat
	PUSH	EBX
	PUSH	0
	CALL	_file_move
	XOR	EAX,EAX
	JMP	L296
[SECTION .data]
LC5:
	DB	"iot",0x00
[SECTION .text]
	GLOBAL	_inout_task
_inout_task:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	MOV	DWORD [-16+EBP],0
	CALL	_task_now
	PUSH	LC5
	MOV	EDI,EAX
	CALL	_timer_alloc
	MOV	ESI,EAX
	PUSH	1
	LEA	EAX,DWORD [16+EDI]
	PUSH	EAX
	PUSH	ESI
	CALL	_timer_init
	PUSH	1000
	PUSH	ESI
	CALL	_timer_settime
	PUSH	DWORD [8+EBP]
	CALL	_dbg_init
	ADD	ESP,28
L300:
	LEA	EBX,DWORD [16+EDI]
	CALL	_io_cli
	PUSH	EBX
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L313
	PUSH	EBX
	CALL	_fifo32_get
	MOV	EBX,EAX
	CALL	_io_sti
	POP	ECX
	DEC	EBX
	JNE	L300
	CMP	DWORD [-16+EBP],8
	JLE	L306
	PUSH	1
	CALL	_inout_control
	MOV	DWORD [-16+EBP],0
L312:
	MOV	DWORD [ESP],100
	PUSH	ESI
	CALL	_timer_settime
	POP	EAX
	POP	EDX
	JMP	L300
L306:
	PUSH	0
	CALL	_inout_control
	INC	DWORD [-16+EBP]
	JMP	L312
L313:
	PUSH	EDI
	CALL	_task_sleep
	CALL	_io_sti
	POP	EBX
	JMP	L300
[SECTION .data]
LC7:
	DB	0x0A,0x00
LC6:
	DB	"%04d ",0x00
[SECTION .text]
	GLOBAL	_inout_control
_inout_control:
	PUSH	EBP
	XOR	EAX,EAX
	MOV	EBP,ESP
	MOV	ECX,30
	PUSH	EDI
	PUSH	ESI
	LEA	EDI,DWORD [-44+EBP]
	CLD
	PUSH	EBX
	SUB	ESP,56
	REP
	STOSB
	TEST	BYTE [_r_req+2],16
	JNE	L362
L315:
	CMP	DWORD [8+EBP],0
	JE	L314
	TEST	BYTE [_w_req+2],16
	JNE	L363
L314:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L363:
	CALL	_io_cli
	XOR	DWORD [_w_req],1048576
	CALL	_io_sti
	MOV	DWORD [-48+EBP],0
	MOV	DWORD [-60+EBP],0
L351:
	XOR	ESI,ESI
	MOV	DWORD [-56+EBP],0
L350:
	MOV	EAX,DWORD [-48+EBP]
	LEA	EBX,DWORD [ESI+EAX*2]
	CMP	DWORD [_w_req+EBX*4],0
	JNE	L364
L341:
	INC	ESI
	ADD	DWORD [-56+EBP],18
	CMP	ESI,1
	JLE	L350
	INC	DWORD [-48+EBP]
	ADD	DWORD [-60+EBP],36
	CMP	DWORD [-48+EBP],79
	JLE	L351
	PUSH	7
	PUSH	LC7
	CALL	_dbg_putstr0
	POP	EBX
	POP	ESI
	JMP	L314
L364:
	XOR	EDI,EDI
	CALL	_io_cli
	MOV	ECX,DWORD [_w_req+EBX*4]
	MOV	DWORD [-52+EBP],ECX
	MOV	DWORD [_w_req+EBX*4],0
	CALL	_io_sti
L349:
	MOV	EAX,DWORD [-52+EBP]
	MOV	ECX,EDI
	SAR	EAX,CL
	AND	EAX,1
	JNE	L365
L346:
	INC	EDI
	CMP	EDI,17
	JLE	L349
	JMP	L341
L365:
	MOV	EBX,DWORD [-60+EBP]
	ADD	EBX,DWORD [-56+EBP]
	ADD	EBX,EDI
	MOV	EAX,EBX
	OR	EAX,8192
	PUSH	EAX
	MOV	EAX,DWORD [_fdc]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put_io
	PUSH	EBX
	PUSH	LC6
	LEA	EBX,DWORD [-44+EBP]
	PUSH	EBX
	CALL	_sprintf
	PUSH	7
	PUSH	EBX
	CALL	_dbg_putstr0
	ADD	ESP,28
	JMP	L346
L362:
	CALL	_io_cli
	XOR	DWORD [_r_req],1048576
	CALL	_io_sti
	MOV	DWORD [-48+EBP],0
	MOV	DWORD [-68+EBP],0
L332:
	XOR	ESI,ESI
	MOV	DWORD [-64+EBP],0
L331:
	MOV	EAX,DWORD [-48+EBP]
	LEA	EBX,DWORD [ESI+EAX*2]
	CMP	DWORD [_r_req+EBX*4],0
	JNE	L366
L322:
	INC	ESI
	ADD	DWORD [-64+EBP],18
	CMP	ESI,1
	JLE	L331
	INC	DWORD [-48+EBP]
	ADD	DWORD [-68+EBP],36
	CMP	DWORD [-48+EBP],79
	JLE	L332
	PUSH	7
	PUSH	LC7
	CALL	_dbg_putstr0
	POP	EDI
	POP	EAX
	JMP	L315
L366:
	XOR	EDI,EDI
	CALL	_io_cli
	MOV	ECX,DWORD [_r_req+EBX*4]
	MOV	DWORD [-52+EBP],ECX
	MOV	DWORD [_r_req+EBX*4],0
	CALL	_io_sti
L330:
	MOV	EAX,DWORD [-52+EBP]
	MOV	ECX,EDI
	SAR	EAX,CL
	AND	EAX,1
	JNE	L367
L327:
	INC	EDI
	CMP	EDI,17
	JLE	L330
	JMP	L322
L367:
	MOV	EBX,DWORD [-68+EBP]
	ADD	EBX,DWORD [-64+EBP]
	ADD	EBX,EDI
	MOV	EAX,EBX
	OR	EAX,4096
	PUSH	EAX
	MOV	EAX,DWORD [_fdc]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put_io
	PUSH	EBX
	PUSH	LC6
	LEA	EBX,DWORD [-44+EBP]
	PUSH	EBX
	CALL	_sprintf
	PUSH	7
	PUSH	EBX
	CALL	_dbg_putstr0
	ADD	ESP,28
	JMP	L327
	GLOBAL	_i_sta
[SECTION .data]
	ALIGNB	16
_i_sta:
	RESB	640
	GLOBAL	_r_req
[SECTION .data]
	ALIGNB	16
_r_req:
	RESB	640
	GLOBAL	_w_req
[SECTION .data]
	ALIGNB	16
_w_req:
	RESB	640
