[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_init_gdtidt
	EXTERN	_change_wtitle8
	EXTERN	_io_cli
	EXTERN	_fifo32_put
	EXTERN	_io_sti
	EXTERN	_task_alloc
	EXTERN	_memman_alloc_4k
	EXTERN	_console_task
	EXTERN	_task_run
	EXTERN	_fifo32_init
	EXTERN	_sheet_alloc
	EXTERN	_sheet_setbuf
	EXTERN	_make_window8
	EXTERN	_make_textbox8
	EXTERN	_dbg_putstr0
	EXTERN	_task_sleep
	EXTERN	_memman_free_4k
	EXTERN	_sheet_free
	EXTERN	_sprintf
	EXTERN	_putfonts8_asc
	EXTERN	_taskmgr_task
	EXTERN	_task_free
	EXTERN	_make_menu8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_push_menu
	EXTERN	_sheet_refresh
	EXTERN	_pull_menu
	EXTERN	_change_mtitle8
	EXTERN	_strcmp
	EXTERN	_strcpy
[FILE "bootpack.c"]
[SECTION .data]
_keytable0.0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	94
	DB	8
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	64
	DB	91
	DB	10
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	58
	DB	0
	DB	0
	DB	93
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	92
	DB	0
	DB	0
_keytable1.1:
	DB	0
	DB	0
	DB	33
	DB	34
	DB	35
	DB	36
	DB	37
	DB	38
	DB	39
	DB	40
	DB	41
	DB	126
	DB	61
	DB	126
	DB	8
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	96
	DB	123
	DB	10
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	43
	DB	42
	DB	0
	DB	0
	DB	125
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	42
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	55
	DB	56
	DB	57
	DB	45
	DB	52
	DB	53
	DB	54
	DB	43
	DB	49
	DB	50
	DB	51
	DB	48
	DB	46
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	95
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	124
	DB	0
	DB	0
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	SUB	ESP,1488
	MOV	BYTE [_fat_flag],0
	CALL	_init_gdtidt
	LEAVE
	RET
	GLOBAL	_keywin_off
_keywin_off:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	PUSH	0
	PUSH	EBX
	CALL	_change_wtitle8
	TEST	BYTE [28+EBX],32
	POP	ECX
	POP	EAX
	JNE	L4
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L4:
	CALL	_io_cli
	PUSH	3
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	MOV	EBX,DWORD [-4+EBP]
	POP	EAX
	POP	EDX
	LEAVE
	JMP	_io_sti
	GLOBAL	_keywin_on
_keywin_on:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	PUSH	1
	PUSH	EBX
	CALL	_change_wtitle8
	TEST	BYTE [28+EBX],32
	POP	ECX
	POP	EAX
	JNE	L7
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L7:
	CALL	_io_cli
	PUSH	2
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	MOV	EBX,DWORD [-4+EBP]
	POP	EAX
	POP	EDX
	LEAVE
	JMP	_io_sti
	GLOBAL	_open_constask
_open_constask:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	CALL	_task_alloc
	PUSH	512
	PUSH	3932160
	MOV	EBX,EAX
	CALL	_memman_alloc_4k
	PUSH	65536
	PUSH	3932160
	MOV	ESI,EAX
	CALL	_memman_alloc_4k
	MOV	DWORD [190+EBX],1936617315
	MOV	DWORD [194+EBX],6646895
	MOV	DWORD [172+EBX],EAX
	MOV	EDX,DWORD [8+EBP]
	ADD	EAX,65524
	MOV	DWORD [100+EBX],EAX
	MOV	DWORD [76+EBX],_console_task
	MOV	DWORD [116+EBX],8
	MOV	DWORD [120+EBX],16
	MOV	DWORD [124+EBX],8
	MOV	DWORD [128+EBX],8
	MOV	DWORD [132+EBX],8
	MOV	DWORD [136+EBX],8
	MOV	DWORD [4+EAX],EDX
	MOV	EDX,DWORD [100+EBX]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [8+EDX],EAX
	PUSH	2
	PUSH	3
	PUSH	EBX
	CALL	_task_run
	LEA	EAX,DWORD [16+EBX]
	PUSH	EBX
	PUSH	ESI
	PUSH	128
	PUSH	EAX
	CALL	_fifo32_init
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
[SECTION .data]
LC0:
	DB	"console",0x00
LC1:
	DB	"open console",0x0A,0x00
[SECTION .text]
	GLOBAL	_open_console
_open_console:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_sheet_alloc
	PUSH	480000
	PUSH	3932160
	MOV	EBX,EAX
	CALL	_memman_alloc_4k
	PUSH	-1
	PUSH	400
	MOV	ESI,EAX
	PUSH	600
	PUSH	EAX
	PUSH	EBX
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	0
	PUSH	LC0
	PUSH	400
	PUSH	600
	PUSH	ESI
	CALL	_make_window8
	PUSH	0
	PUSH	363
	PUSH	584
	PUSH	28
	PUSH	8
	PUSH	EBX
	CALL	_make_textbox8
	ADD	ESP,44
	PUSH	DWORD [12+EBP]
	PUSH	EBX
	CALL	_open_constask
	OR	DWORD [28+EBX],32
	MOV	DWORD [36+EBX],EAX
	PUSH	1
	PUSH	LC1
	CALL	_dbg_putstr0
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
[SECTION .data]
LC2:
	DB	"close console",0x0A,0x00
[SECTION .text]
	GLOBAL	_close_constask
_close_constask:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_task_sleep
	PUSH	65536
	PUSH	DWORD [172+EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	512
	PUSH	DWORD [16+EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	MOV	DWORD [4+EBX],0
	PUSH	1
	PUSH	LC2
	CALL	_dbg_putstr0
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_close_console
_close_console:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	ESI,DWORD [36+EBX]
	PUSH	480000
	PUSH	DWORD [EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	EBX
	CALL	_sheet_free
	MOV	DWORD [8+EBP],ESI
	ADD	ESP,16
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_close_constask
[SECTION .data]
LC3:
	DB	"[%s]",0x00
[SECTION .text]
	GLOBAL	_debug_msg
_debug_msg:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-124+EBP]
	SUB	ESP,112
	MOV	ESI,DWORD [4068]
	PUSH	DWORD [12+EBP]
	PUSH	LC3
	LEA	EDI,DWORD [1044+ESI]
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	IMUL	EAX,DWORD [8+EBP],20
	PUSH	1
	ADD	EAX,6
	PUSH	0
	PUSH	EAX
	PUSH	56
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [1044+ESI]
	CALL	_putfonts8_asc
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
LC4:
	DB	"open taskmgr",0x0A,0x00
[SECTION .text]
	GLOBAL	_open_taskmgr
_open_taskmgr:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EAX,DWORD [4068]
	CMP	DWORD [_taskmgr],0
	JE	L14
	XOR	ESI,ESI
	LEA	EBX,DWORD [1044+EAX]
L20:
	MOV	EAX,DWORD [_taskmgr]
	CMP	DWORD [36+EBX],EAX
	JE	L22
L17:
	INC	ESI
	ADD	EBX,44
	CMP	ESI,255
	JLE	L20
L13:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L22:
	PUSH	EBX
	CALL	_keywin_on
	POP	EAX
	JMP	L17
L14:
	CALL	_task_alloc
	PUSH	512
	PUSH	3932160
	MOV	DWORD [_taskmgr],EAX
	CALL	_memman_alloc_4k
	PUSH	65536
	PUSH	3932160
	MOV	ESI,EAX
	MOV	EBX,DWORD [_taskmgr]
	CALL	_memman_alloc_4k
	ADD	EAX,65528
	MOV	DWORD [100+EBX],EAX
	MOV	EAX,DWORD [_taskmgr]
	MOV	DWORD [190+EAX],1802723700
	MOV	DWORD [194+EAX],7497581
	MOV	EDX,DWORD [_taskmgr]
	MOV	DWORD [76+EAX],_taskmgr_task
	MOV	ECX,DWORD [100+EDX]
	MOV	DWORD [116+EAX],8
	MOV	DWORD [120+EAX],16
	MOV	DWORD [124+EAX],8
	MOV	DWORD [128+EAX],8
	MOV	DWORD [132+EAX],8
	MOV	DWORD [136+EAX],8
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [208+EDX],0
	MOV	DWORD [4+ECX],EAX
	PUSH	2
	PUSH	2
	PUSH	EDX
	CALL	_task_run
	MOV	EAX,DWORD [_taskmgr]
	PUSH	DWORD [_taskmgr]
	PUSH	ESI
	ADD	EAX,16
	PUSH	128
	PUSH	EAX
	CALL	_fifo32_init
	ADD	ESP,44
	PUSH	1
	PUSH	LC4
	CALL	_dbg_putstr0
	JMP	L13
[SECTION .data]
LC5:
	DB	"close taskmgr",0x0A,0x00
[SECTION .text]
	GLOBAL	_close_taskmgr
_close_taskmgr:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	DWORD [_taskmgr]
	CALL	_task_sleep
	MOV	EAX,DWORD [_taskmgr]
	PUSH	512
	PUSH	DWORD [16+EAX]
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	DWORD [_taskmgr]
	CALL	_task_free
	PUSH	1
	PUSH	LC5
	MOV	DWORD [_taskmgr],0
	CALL	_dbg_putstr0
	LEAVE
	RET
[SECTION .data]
LC6:
	DB	"OS Menu",0x00
[SECTION .text]
	GLOBAL	_open_menu
_open_menu:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EAX,DWORD [4068]
	MOV	EBX,DWORD [8+EBP]
	MOV	DWORD [-16+EBP],EAX
	MOV	EDI,DWORD [12+EBP]
	MOV	EAX,DWORD [16+EBP]
	MOV	DWORD [-20+EBP],0
	ADD	EAX,52
L30:
	CMP	DWORD [EAX],0
	JE	L26
	INC	DWORD [-20+EBP]
	ADD	EAX,60
	CMP	DWORD [-20+EBP],255
	JLE	L30
L26:
	MOV	EDX,DWORD [16+EBP]
	INC	DWORD [-20+EBP]
	CMP	DWORD [EDX],0
	JE	L37
L31:
	IMUL	EAX,DWORD [-20+EBP],26
	MOV	EDX,DWORD [16+EBP]
	LEA	ESI,DWORD [2+EAX]
	CMP	DWORD [EDX],0
	JNE	L32
	LEA	ESI,DWORD [20+EAX]
L32:
	PUSH	DWORD [-16+EBP]
	CALL	_sheet_alloc
	OR	DWORD [28+EAX],256
	MOV	DWORD [4+EDI],EAX
	MOV	EAX,ESI
	IMUL	EAX,EAX,144
	ADD	EAX,EAX
	PUSH	EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	MOV	DWORD [8+EDI],EAX
	PUSH	-1
	PUSH	ESI
	PUSH	144
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [16+EBP]
	PUSH	LC6
	PUSH	ESI
	PUSH	144
	PUSH	DWORD [8+EDI]
	CALL	_make_menu8
	MOV	EDX,DWORD [16+EBP]
	ADD	ESP,24
	MOV	EAX,DWORD [EDX]
	TEST	EAX,EAX
	JNE	L33
	MOV	EDX,DWORD [-16+EBP]
	MOV	DWORD [-24+EBP],0
	MOV	EAX,DWORD [12+EDX]
	SUB	EAX,ESI
	SUB	EAX,28
L34:
	PUSH	EAX
	PUSH	DWORD [-24+EBP]
	PUSH	DWORD [4+EDI]
	CALL	_sheet_slide
	MOV	EAX,DWORD [-16+EBP]
	PUSH	DWORD [16+EAX]
	PUSH	DWORD [4+EDI]
	CALL	_sheet_updown
	MOV	EAX,DWORD [-20+EBP]
	MOV	EDX,DWORD [16+EBP]
	MOV	DWORD [16+EDI],EAX
	MOV	DWORD [12+EDI],0
	MOV	DWORD [EDI],EDX
	MOV	EAX,DWORD [EDX]
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L33:
	MOV	EDX,EAX
	LEA	EBX,DWORD [-20+EDI]
	IMUL	EDX,EDX,140
	MOV	DWORD [-24+EBP],EDX
	IMUL	EDX,DWORD [12+EBX],26
	DEC	EAX
	LEA	ECX,DWORD [2+EDX]
	JE	L38
L35:
	MOV	EAX,DWORD [4+EBX]
	MOV	EAX,DWORD [16+EAX]
	ADD	EAX,ECX
	SUB	EAX,ESI
	JMP	L34
L38:
	LEA	ECX,DWORD [20+EDX]
	JMP	L35
L37:
	PUSH	DWORD [8+EBX]
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	CALL	_push_menu
	MOV	EAX,DWORD [8+EBX]
	LEA	EDX,DWORD [-2+EAX]
	SUB	EAX,24
	PUSH	EDX
	PUSH	61
	PUSH	EAX
	PUSH	2
	PUSH	EBX
	CALL	_sheet_refresh
	ADD	ESP,32
	JMP	L31
	GLOBAL	_close_menu
_close_menu:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [12+EBP]
	PUSH	-1
	MOV	ESI,DWORD [8+EBP]
	PUSH	DWORD [4+EBX]
	CALL	_sheet_updown
	MOV	EAX,DWORD [4+EBX]
	MOV	EDX,DWORD [8+EAX]
	IMUL	EDX,DWORD [4+EAX]
	ADD	EDX,EDX
	PUSH	EDX
	PUSH	DWORD [8+EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	DWORD [4+EBX]
	CALL	_sheet_free
	ADD	ESP,24
	MOV	EAX,DWORD [EBX]
	CMP	DWORD [EAX],0
	JE	L41
L40:
	MOV	EAX,DWORD [EBX]
	MOV	EAX,DWORD [EAX]
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	DEC	EAX
	POP	ESI
	POP	EBP
	RET
L41:
	PUSH	DWORD [8+ESI]
	PUSH	DWORD [4+ESI]
	PUSH	DWORD [ESI]
	CALL	_pull_menu
	MOV	EAX,DWORD [8+ESI]
	LEA	EDX,DWORD [-2+EAX]
	SUB	EAX,24
	PUSH	EDX
	PUSH	61
	PUSH	EAX
	PUSH	2
	PUSH	ESI
	CALL	_sheet_refresh
	ADD	ESP,32
	JMP	L40
	GLOBAL	_select_menu
_select_menu:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,1
	PUSH	EBX
	PUSH	EAX
	MOV	ESI,DWORD [8+EBP]
	MOV	EBX,DWORD [16+EBP]
	MOV	EAX,DWORD [12+ESI]
	TEST	EAX,EAX
	JNE	L47
L43:
	MOV	EAX,DWORD [ESI]
	MOV	DWORD [-16+EBP],EAX
	CMP	DWORD [EAX],0
	JNE	L44
	MOV	EDI,19
L44:
	CMP	DWORD [12+EBP],1
	JLE	L45
	MOV	ECX,DWORD [4+ESI]
	MOV	EAX,DWORD [4+ECX]
	SUB	EAX,2
	CMP	DWORD [12+EBP],EAX
	JGE	L45
	CMP	EDI,EBX
	JGE	L45
	MOV	EAX,DWORD [8+ECX]
	SUB	EAX,2
	CMP	EBX,EAX
	JL	L48
L45:
	MOV	DWORD [12+ESI],0
L42:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L48:
	SUB	EBX,EDI
	MOV	EDX,26
	MOV	EAX,EBX
	MOV	EDI,EDX
	CDQ
	IDIV	EDI
	LEA	EAX,DWORD [1+EAX]
	MOV	DWORD [12+ESI],EAX
	PUSH	1
	PUSH	EAX
	MOV	EAX,DWORD [-16+EBP]
	PUSH	DWORD [EAX]
	PUSH	ECX
	CALL	_change_mtitle8
	ADD	ESP,16
	JMP	L42
L47:
	PUSH	0
	PUSH	EAX
	MOV	EAX,DWORD [ESI]
	PUSH	DWORD [EAX]
	PUSH	DWORD [4+ESI]
	CALL	_change_mtitle8
	ADD	ESP,16
	JMP	L43
[SECTION .data]
LC7:
	DB	"<submenu>",0x00
LC8:
	DB	"<console>",0x00
LC9:
	DB	"<taskmgr>",0x00
LC10:
	DB	"open taskmgr",0x00
[SECTION .text]
	GLOBAL	_exec_menu
_exec_menu:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	ECX
	PUSH	ECX
	MOV	ECX,DWORD [8+EBP]
	MOV	EAX,DWORD [4068]
	MOV	DWORD [-16+EBP],EAX
	MOV	EDX,DWORD [16+ECX]
	MOV	EAX,DWORD [12+ECX]
	SUB	EDX,EAX
	OR	ECX,-1
	TEST	EAX,EAX
	JE	L49
	MOV	ESI,DWORD [8+EBP]
	TEST	EDX,EDX
	MOV	ESI,DWORD [ESI]
	MOV	DWORD [-20+EBP],ESI
	JLE	L68
	MOV	EBX,EDX
L55:
	MOV	EAX,DWORD [-20+EBP]
	DEC	EBX
	MOV	EAX,DWORD [52+EAX]
	MOV	DWORD [-20+EBP],EAX
	JNE	L55
L68:
	MOV	EAX,DWORD [-20+EBP]
	MOV	EDI,LC7
	ADD	EAX,20
	MOV	ECX,10
	CLD
	MOV	ESI,EAX
	REPE
	CMPSB
	JE	L71
	MOV	EAX,DWORD [-20+EBP]
	MOV	EDI,LC8
	ADD	EAX,20
	MOV	ECX,10
	CLD
	MOV	ESI,EAX
	REPE
	CMPSB
	JE	L72
	MOV	EAX,DWORD [-20+EBP]
	MOV	EDI,LC9
	ADD	EAX,20
	MOV	ECX,10
	CLD
	MOV	ESI,EAX
	REPE
	CMPSB
	JNE	L60
	PUSH	LC10
	PUSH	1
	CALL	_debug_msg
	PUSH	DWORD [12+EBP]
	CALL	_open_taskmgr
	ADD	ESP,12
L57:
	OR	ECX,-1
L49:
	LEA	ESP,DWORD [-12+EBP]
	MOV	EAX,ECX
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L60:
	PUSH	DWORD [12+EBP]
	PUSH	0
	XOR	EBX,EBX
	CALL	_open_constask
	LEA	EDI,DWORD [16+EAX]
	POP	EAX
	MOV	EAX,DWORD [-20+EBP]
	POP	EDX
	CMP	BYTE [20+EAX],0
	JNE	L66
L70:
	CALL	_io_cli
	PUSH	266
	PUSH	EDI
	CALL	_fifo32_put
	CALL	_io_sti
	POP	EAX
	POP	EDX
	JMP	L57
L66:
	CALL	_io_cli
	MOV	EDX,DWORD [-20+EBP]
	MOVSX	EAX,BYTE [20+EBX+EDX*1]
	ADD	EAX,256
	INC	EBX
	PUSH	EAX
	PUSH	EDI
	CALL	_fifo32_put
	CALL	_io_sti
	POP	ECX
	MOV	ECX,DWORD [-20+EBP]
	POP	ESI
	CMP	BYTE [20+EBX+ECX*1],0
	JNE	L66
	JMP	L70
L72:
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [-16+EBP]
	CALL	_open_console
	PUSH	8
	PUSH	8
	MOV	EBX,EAX
	PUSH	EAX
	CALL	_sheet_slide
	MOV	EAX,DWORD [-16+EBP]
	PUSH	DWORD [16+EAX]
	PUSH	EBX
	CALL	_sheet_updown
	PUSH	EBX
	CALL	_keywin_on
	ADD	ESP,32
	JMP	L57
L71:
	MOV	EAX,DWORD [-20+EBP]
	PUSH	DWORD [56+EAX]
	MOV	EAX,DWORD [8+EBP]
	ADD	EAX,20
	PUSH	EAX
	PUSH	0
	CALL	_open_menu
	MOV	ECX,EAX
	JMP	L49
	GLOBAL	_set_menu
_set_menu:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	SUB	ESP,16
	MOV	EDI,DWORD [24+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	DWORD [-20+EBP],-1
	MOV	DWORD [-24+EBP],0
	MOV	DWORD [-28+EBP],0
	MOV	DWORD [-16+EBP],0
L90:
	TEST	EDI,EDI
	JE	L78
	PUSH	EDI
	LEA	EAX,DWORD [4+EBX]
	PUSH	EAX
	CALL	_strcmp
	POP	EDX
	POP	ECX
	TEST	EAX,EAX
	JNE	L80
	MOV	DWORD [-24+EBP],EBX
L80:
	CMP	BYTE [4+EBX],0
	JE	L92
	INC	DWORD [-16+EBP]
	ADD	EBX,60
	ADD	ESI,60
	CMP	DWORD [-16+EBP],255
	JLE	L90
L75:
	MOV	EAX,DWORD [-20+EBP]
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L92:
	TEST	EDI,EDI
	JE	L86
	CMP	DWORD [-24+EBP],0
	JE	L75
L86:
	CMP	DWORD [28+EBP],0
	JE	L84
	CMP	DWORD [-28+EBP],0
	JE	L75
L84:
	TEST	EDI,EDI
	JE	L87
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [-24+EBP]
	ADD	EAX,ESI
	MOV	DWORD [56+EDX],EAX
L88:
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [EBX],EAX
	LEA	EAX,DWORD [4+EBX]
	PUSH	DWORD [16+EBP]
	PUSH	EAX
	CALL	_strcpy
	LEA	EAX,DWORD [20+EBX]
	PUSH	DWORD [20+EBP]
	PUSH	EAX
	CALL	_strcpy
	ADD	ESP,16
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [-20+EBP],EAX
	JMP	L75
L87:
	CMP	DWORD [28+EBP],0
	JE	L88
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [-28+EBP]
	ADD	EAX,ESI
	MOV	DWORD [52+EDX],EAX
	JMP	L88
L78:
	CMP	DWORD [28+EBP],0
	JE	L80
	PUSH	DWORD [28+EBP]
	LEA	EAX,DWORD [4+EBX]
	PUSH	EAX
	CALL	_strcmp
	POP	EDX
	POP	ECX
	TEST	EAX,EAX
	JNE	L80
	MOV	DWORD [-28+EBP],EBX
	JMP	L80
[SECTION .data]
LC11:
	DB	"taskmgr",0x00
LC12:
	DB	"explorer.hrb",0x00
LC13:
	DB	"explorer",0x00
LC14:
	DB	"programs+",0x00
LC15:
	DB	"walk",0x00
[SECTION .text]
	GLOBAL	_init_menu
_init_menu:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	PUSH	16384
	MOV	ESI,DWORD [8+EBP]
	PUSH	3932160
	MOV	EBX,DWORD [12+EBP]
	CALL	_memman_alloc_4k
	MOV	ECX,255
	MOV	DWORD [EBX],EAX
	POP	EAX
	POP	EDX
	XOR	EDX,EDX
L98:
	MOV	EAX,DWORD [EBX]
	MOV	BYTE [4+EAX+EDX*1],0
	MOV	DWORD [EAX+EDX*1],0
	MOV	EAX,DWORD [EBX]
	MOV	BYTE [20+EAX+EDX*1],0
	MOV	EAX,DWORD [EBX]
	MOV	DWORD [52+EAX+EDX*1],0
	MOV	EAX,DWORD [EBX]
	MOV	DWORD [56+EAX+EDX*1],0
	ADD	EDX,60
	DEC	ECX
	JNS	L98
	XOR	EAX,EAX
	MOV	ECX,7
L103:
	MOV	DWORD [ESI+EAX*1],0
	MOV	DWORD [4+ESI+EAX*1],0
	MOV	DWORD [8+ESI+EAX*1],0
	MOV	DWORD [12+ESI+EAX*1],0
	MOV	DWORD [16+ESI+EAX*1],0
	ADD	EAX,20
	DEC	ECX
	JNS	L103
	PUSH	0
	PUSH	0
	PUSH	LC9
	PUSH	LC11
	PUSH	0
	PUSH	DWORD [EBX]
	CALL	_set_menu
	PUSH	LC11
	PUSH	0
	PUSH	LC8
	PUSH	LC0
	PUSH	0
	PUSH	DWORD [EBX]
	CALL	_set_menu
	ADD	ESP,48
	PUSH	LC0
	PUSH	0
	PUSH	LC12
	PUSH	LC13
	PUSH	0
	PUSH	DWORD [EBX]
	CALL	_set_menu
	PUSH	LC13
	PUSH	0
	PUSH	LC7
	PUSH	LC14
	PUSH	0
	PUSH	DWORD [EBX]
	CALL	_set_menu
	ADD	ESP,48
	PUSH	0
	PUSH	LC14
	PUSH	LC15
	PUSH	LC15
	PUSH	1
	PUSH	DWORD [EBX]
	CALL	_set_menu
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_reset_back
_reset_back:
	PUSH	EBP
	MOV	EBP,ESP
	POP	EBP
	RET
	GLOBAL	_reset_key_win
_reset_key_win:
	PUSH	EBP
	MOV	EBP,ESP
	POP	EBP
	RET
	GLOBAL	_u_fat
[SECTION .data]
	ALIGNB	4
_u_fat:
	RESB	4
	GLOBAL	_fat_flag
[SECTION .data]
_fat_flag:
	RESB	1
	GLOBAL	_current_path
[SECTION .data]
	ALIGNB	16
_current_path:
	RESB	256
	GLOBAL	_epath
[SECTION .data]
	ALIGNB	16
_epath:
	RESB	1024
	GLOBAL	_fdc
[SECTION .data]
	ALIGNB	4
_fdc:
	RESB	4
	GLOBAL	_inout
[SECTION .data]
	ALIGNB	4
_inout:
	RESB	4
	GLOBAL	_taskmgr
[SECTION .data]
	ALIGNB	4
_taskmgr:
	RESB	4
