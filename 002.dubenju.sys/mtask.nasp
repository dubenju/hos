[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_io_hlt
	EXTERN	_memman_alloc_4k
	EXTERN	_set_segmdesc
	EXTERN	_load_tr
	EXTERN	_timer_alloc
	EXTERN	_timer_settime
	EXTERN	_farjmp
	EXTERN	_io_cli
	EXTERN	_io_sti
[FILE "mtask.c"]
[SECTION .text]
	GLOBAL	_task_now
_task_now:
	MOV	EAX,DWORD [_taskctl]
	PUSH	EBP
	MOV	EBP,ESP
	POP	EBP
	MOV	EDX,DWORD [EAX]
	IMUL	EDX,EDX,408
	LEA	EAX,DWORD [5+EDX+EAX*1]
	MOV	EDX,DWORD [4+EAX]
	MOV	EAX,DWORD [8+EAX+EDX*4]
	RET
	GLOBAL	_task_add
_task_add:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	ECX,DWORD [8+EBP]
	MOV	EDX,DWORD [8+ECX]
	IMUL	EDX,EDX,408
	ADD	EDX,DWORD [_taskctl]
	MOV	EAX,DWORD [5+EDX]
	MOV	DWORD [13+EDX+EAX*4],ECX
	INC	EAX
	MOV	DWORD [5+EDX],EAX
	MOV	DWORD [4+ECX],2
	POP	EBP
	RET
	GLOBAL	_task_remove
_task_remove:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	EAX,DWORD [8+EBX]
	IMUL	EAX,EAX,408
	ADD	EAX,DWORD [_taskctl]
	LEA	EDX,DWORD [5+EAX]
	CMP	ECX,DWORD [5+EAX]
	JGE	L5
L9:
	CMP	DWORD [8+EDX+ECX*4],EBX
	JE	L5
	INC	ECX
	CMP	ECX,DWORD [EDX]
	JL	L9
L5:
	MOV	EAX,DWORD [4+EDX]
	DEC	DWORD [EDX]
	CMP	ECX,EAX
	JGE	L10
	DEC	EAX
	MOV	DWORD [4+EDX],EAX
L10:
	MOV	EAX,DWORD [EDX]
	CMP	DWORD [4+EDX],EAX
	JL	L11
	MOV	DWORD [4+EDX],0
L11:
	MOV	DWORD [4+EBX],1
	MOV	EBX,DWORD [EDX]
	CMP	ECX,EBX
	JGE	L19
L16:
	MOV	EAX,DWORD [12+EDX+ECX*4]
	MOV	DWORD [8+EDX+ECX*4],EAX
	INC	ECX
	CMP	ECX,EBX
	JL	L16
L19:
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_task_switchsub
_task_switchsub:
	PUSH	EBP
	XOR	ECX,ECX
	MOV	EBP,ESP
	MOV	EAX,DWORD [_taskctl]
	XOR	EDX,EDX
L26:
	CMP	DWORD [5+EAX+EDX*1],0
	JG	L22
	INC	ECX
	ADD	EDX,408
	CMP	ECX,9
	JLE	L26
L22:
	MOV	DWORD [EAX],ECX
	MOV	BYTE [4+EAX],0
	POP	EBP
	RET
	GLOBAL	_task_idle
_task_idle:
	PUSH	EBP
	MOV	EBP,ESP
L29:
	CALL	_io_hlt
	JMP	L29
[SECTION .data]
LC0:
	DB	"system",0x00
LC1:
	DB	"tsy",0x00
[SECTION .text]
	GLOBAL	_task_init
_task_init:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	EDI,EDI
	PUSH	EBX
	XOR	ESI,ESI
	PUSH	ECX
	MOV	EBX,999
	PUSH	214093
	PUSH	DWORD [8+EBP]
	CALL	_memman_alloc_4k
	MOV	DWORD [_taskctl],EAX
	POP	EAX
	POP	EDX
L37:
	MOV	EDX,EDI
	LEA	EAX,DWORD [24+ESI]
	ADD	EDX,DWORD [_taskctl]
	LEA	ECX,DWORD [4080+EDX]
	MOV	DWORD [5+ECX],EAX
	LEA	EAX,DWORD [8024+ESI]
	MOV	DWORD [4225+EDX],EAX
	LEA	EAX,DWORD [2555928+ESI]
	MOV	DWORD [9+ECX],0
	ADD	EDX,4129
	PUSH	137
	PUSH	EDX
	PUSH	103
	PUSH	EAX
	CALL	_set_segmdesc
	MOV	EAX,DWORD [_taskctl]
	ADD	EAX,EDI
	PUSH	130
	ADD	EAX,4233
	ADD	EDI,210
	PUSH	EAX
	LEA	EAX,DWORD [2563928+ESI]
	PUSH	15
	ADD	ESI,8
	PUSH	EAX
	CALL	_set_segmdesc
	ADD	ESP,32
	DEC	EBX
	JNS	L37
	MOV	EAX,DWORD [_taskctl]
	XOR	EDX,EDX
	MOV	EBX,9
L42:
	MOV	DWORD [5+EAX+EDX*1],0
	MOV	DWORD [9+EAX+EDX*1],0
	ADD	EDX,408
	DEC	EBX
	JNS	L42
	MOV	DWORD [214085+EAX],0
	MOV	DWORD [214089+EAX],0
	MOV	ESI,LC0
	CALL	_task_alloc
	MOV	EDI,EAX
	MOV	ECX,7
	CLD
	ADD	EDI,190
	MOV	DWORD [-16+EBP],EAX
	MOV	DWORD [4+EAX],2
	MOV	DWORD [12+EAX],2
	MOV	DWORD [8+EAX],0
	REP
	MOVSB
	MOV	DWORD [206+EAX],0
	PUSH	EAX
	CALL	_task_add
	CALL	_task_switchsub
	MOV	EDX,DWORD [-16+EBP]
	PUSH	DWORD [EDX]
	CALL	_load_tr
	PUSH	LC1
	CALL	_timer_alloc
	MOV	EDX,DWORD [-16+EBP]
	MOV	DWORD [_task_timer],EAX
	PUSH	DWORD [12+EDX]
	PUSH	EAX
	CALL	_timer_settime
	CALL	_task_alloc
	PUSH	65536
	PUSH	DWORD [8+EBP]
	MOV	EBX,EAX
	CALL	_memman_alloc_4k
	ADD	EAX,65536
	MOV	DWORD [100+EBX],EAX
	MOV	DWORD [76+EBX],_task_idle
	MOV	DWORD [116+EBX],8
	MOV	DWORD [120+EBX],16
	MOV	DWORD [124+EBX],8
	MOV	DWORD [128+EBX],8
	MOV	DWORD [132+EBX],8
	MOV	DWORD [136+EBX],8
	MOV	DWORD [190+EBX],1701602409
	MOV	BYTE [194+EBX],0
	MOV	DWORD [206+EBX],0
	PUSH	1
	PUSH	9
	PUSH	EBX
	CALL	_task_run
	MOV	EAX,DWORD [-16+EBP]
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
LC2:
	DB	0x00
[SECTION .text]
	GLOBAL	_task_alloc
_task_alloc:
	PUSH	EBP
	XOR	EAX,EAX
	MOV	EBP,ESP
	XOR	ECX,ECX
L54:
	MOV	EDX,ECX
	ADD	EDX,DWORD [_taskctl]
	CMP	DWORD [4089+EDX],0
	JE	L57
	INC	EAX
	ADD	ECX,210
	CMP	EAX,999
	JLE	L54
	XOR	EAX,EAX
L47:
	POP	EBP
	RET
L57:
	ADD	EDX,4085
	MOV	BYTE [188+EDX],0
	MOV	BYTE [189+EDX],0
	MOV	ECX,DWORD [_taskctl]
	MOV	DWORD [4+EDX],1
	MOV	DWORD [80+EDX],514
	MOV	DWORD [84+EDX],0
	MOV	DWORD [88+EDX],0
	MOV	DWORD [92+EDX],0
	MOV	DWORD [96+EDX],0
	MOV	DWORD [104+EDX],0
	MOV	DWORD [108+EDX],0
	MOV	DWORD [112+EDX],0
	MOV	DWORD [116+EDX],0
	MOV	DWORD [128+EDX],0
	MOV	DWORD [132+EDX],0
	MOV	DWORD [136+EDX],0
	MOV	DWORD [144+EDX],1073741824
	MOV	DWORD [52+EDX],0
	MOV	DWORD [184+EDX],LC2
	CMP	EAX,DWORD [214085+ECX]
	JL	L53
	INC	EAX
	MOV	DWORD [214085+ECX],EAX
L53:
	INC	DWORD [214089+ECX]
	MOV	EAX,EDX
	JMP	L47
	GLOBAL	_task_run
_task_run:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [12+EBP]
	MOV	EAX,DWORD [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	TEST	ESI,ESI
	JS	L63
L59:
	TEST	EAX,EAX
	JLE	L60
	MOV	DWORD [12+EBX],EAX
L60:
	CMP	DWORD [4+EBX],2
	JE	L64
L61:
	CMP	DWORD [4+EBX],2
	JE	L62
	MOV	DWORD [8+EBX],ESI
	PUSH	EBX
	CALL	_task_add
	POP	EBX
L62:
	MOV	EAX,DWORD [_taskctl]
	MOV	BYTE [4+EAX],1
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L64:
	CMP	DWORD [8+EBX],ESI
	JE	L61
	PUSH	EBX
	CALL	_task_remove
	POP	EAX
	JMP	L61
L63:
	MOV	ESI,DWORD [8+EBX]
	JMP	L59
	GLOBAL	_task_sleep
_task_sleep:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [8+EBP]
	CMP	DWORD [4+ESI],2
	JE	L68
L65:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L68:
	CALL	_task_now
	PUSH	ESI
	MOV	EBX,EAX
	CALL	_task_remove
	POP	ECX
	CMP	ESI,EBX
	JNE	L65
	CALL	_task_switchsub
	CALL	_task_now
	PUSH	DWORD [EAX]
	PUSH	0
	CALL	_farjmp
	POP	EAX
	POP	EDX
	JMP	L65
	GLOBAL	_task_switch
_task_switch:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [_taskctl]
	MOV	EDX,DWORD [EBX]
	IMUL	EDX,EDX,408
	LEA	EDX,DWORD [EDX+EBX*1]
	LEA	ECX,DWORD [5+EDX]
	MOV	EAX,DWORD [4+ECX]
	MOV	ESI,DWORD [8+ECX+EAX*4]
	INC	EAX
	MOV	DWORD [4+ECX],EAX
	CMP	EAX,DWORD [5+EDX]
	JE	L73
L70:
	CMP	BYTE [4+EBX],0
	JNE	L74
L71:
	MOV	EAX,DWORD [4+ECX]
	MOV	EBX,DWORD [8+ECX+EAX*4]
	PUSH	DWORD [12+EBX]
	PUSH	DWORD [_task_timer]
	CALL	_timer_settime
	CMP	EBX,ESI
	POP	EAX
	POP	EDX
	JE	L69
	PUSH	DWORD [EBX]
	PUSH	0
	CALL	_farjmp
	POP	EBX
	POP	ESI
L69:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L74:
	CALL	_task_switchsub
	MOV	EDX,DWORD [_taskctl]
	MOV	EAX,DWORD [EDX]
	IMUL	EAX,EAX,408
	LEA	ECX,DWORD [5+EAX+EDX*1]
	JMP	L71
L73:
	MOV	DWORD [4+ECX],0
	JMP	L70
	GLOBAL	_task_free
_task_free:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	CALL	_io_cli
	MOV	DWORD [4+EBX],0
	CALL	_io_sti
	MOV	ECX,DWORD [_taskctl]
	SUB	EBX,ECX
	LEA	EDX,DWORD [-4085+EBX]
	SAR	EDX,1
	IMUL	EDX,EDX,-654471207
	LEA	EAX,DWORD [1+EDX]
	CMP	EAX,DWORD [214085+ECX]
	JL	L76
	DEC	EDX
	JS	L78
	MOV	EAX,EDX
	IMUL	EAX,EAX,210
	LEA	EAX,DWORD [4089+ECX+EAX*1]
L82:
	CMP	DWORD [EAX],0
	JNE	L78
	SUB	EAX,210
	DEC	EDX
	JNS	L82
L78:
	MOV	EAX,DWORD [_taskctl]
	INC	EDX
	MOV	DWORD [214085+EAX],EDX
L76:
	MOV	EAX,DWORD [_taskctl]
	DEC	DWORD [214089+EAX]
	POP	EBX
	POP	EBP
	RET
	GLOBAL	_taskctl
[SECTION .data]
	ALIGNB	4
_taskctl:
	RESB	4
	GLOBAL	_task_timer
[SECTION .data]
	ALIGNB	4
_task_timer:
	RESB	4
