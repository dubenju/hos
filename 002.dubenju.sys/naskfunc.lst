     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; オブジェクトファイルを作るモード	
     5 00000000                                 [INSTRSET "i486p"]				; 486の命令まで使いたいという記述
     6 00000000                                 [BITS 32]						; 32ビットモード用の機械語を作らせる
     7 00000000                                 [FILE "naskfunc.nas"]			; ソースファイル名情報
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt, _io_loop
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    14 00000000                                 		GLOBAL	_load_cr0, _store_cr0
    15 00000000                                 		GLOBAL	_load_tr
    16 00000000                                 		GLOBAL	_asm_inthandler20, _asm_inthandler21, _asm_inthandler26
    17 00000000                                 		GLOBAL	_asm_inthandler2c, _asm_inthandler0c
    18 00000000                                 		GLOBAL	_asm_inthandler0d, _asm_end_app
    19 00000000                                 		GLOBAL	_memtest_sub
    20 00000000                                 		GLOBAL	_farjmp, _farcall
    21 00000000                                 		GLOBAL	_asm_hrb_api, _start_app
    22 00000000                                 		EXTERN	_inthandler20, _inthandler21, _inthandler26
    23 00000000                                 		EXTERN	_inthandler2c, _inthandler0d
    24 00000000                                 		EXTERN	_inthandler0c
    25 00000000                                 		EXTERN	_hrb_api, _write_mem8
    26 00000000                                 
    27                                          [SECTION .text]
    28 00000000                                 
    29 00000000                                 _io_hlt:	; void io_hlt(void);
    30 00000000 F4                              		HLT
    31 00000001 C3                              		RET
    32 00000002                                 
    33 00000002                                 _io_cli:	; void io_cli(void);
    34 00000002 FA                              		CLI
    35 00000003 C3                              		RET
    36 00000004                                 
    37 00000004                                 _io_sti:	; void io_sti(void);
    38 00000004 FB                              		STI
    39 00000005 C3                              		RET
    40 00000006                                 
    41 00000006                                 _io_stihlt:	; void io_stihlt(void);
    42 00000006 FB                              		STI
    43 00000007 F4                              		HLT
    44 00000008 C3                              		RET
    45 00000009                                 
    46 00000009                                 _io_loop:	; void io_loop(void);
    47 00000009 EB FE                           		JMP _io_loop
    48 0000000B C3                              		RET
    49 0000000C                                 _io_in8:	; int io_in8(int port);
    50 0000000C 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    51 00000010 B8 00000000                     		MOV		EAX,0
    52 00000015 EC                              		IN		AL,DX
    53 00000016 C3                              		RET
    54 00000017                                 
    55 00000017                                 _io_in16:	; int io_in16(int port);
    56 00000017 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    57 0000001B B8 00000000                     		MOV		EAX,0
    58 00000020 66 ED                           		IN		AX,DX
    59 00000022 C3                              		RET
    60 00000023                                 
    61 00000023                                 _io_in32:	; int io_in32(int port);
    62 00000023 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    63 00000027 ED                              		IN		EAX,DX
    64 00000028 C3                              		RET
    65 00000029                                 
    66 00000029                                 _io_out8:	; void io_out8(int port, int data);
    67 00000029 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    68 0000002D 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    69 00000031 EE                              		OUT		DX,AL
    70 00000032 C3                              		RET
    71 00000033                                 
    72 00000033                                 _io_out16:	; void io_out16(int port, int data);
    73 00000033 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    74 00000037 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    75 0000003B 66 EF                           		OUT		DX,AX
    76 0000003D C3                              		RET
    77 0000003E                                 
    78 0000003E                                 _io_out32:	; void io_out32(int port, int data);
    79 0000003E 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    80 00000042 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    81 00000046 EF                              		OUT		DX,EAX
    82 00000047 C3                              		RET
    83 00000048                                 
    84 00000048                                 _io_load_eflags:	; int io_load_eflags(void);
    85 00000048 9C                              		PUSHFD		; PUSH EFLAGS という意味
    86 00000049 58                              		POP		EAX
    87 0000004A C3                              		RET
    88 0000004B                                 
    89 0000004B                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    90 0000004B 8B 44 24 04                     		MOV		EAX,[ESP+4]
    91 0000004F 50                              		PUSH	EAX
    92 00000050 9D                              		POPFD		; POP EFLAGS という意味
    93 00000051 C3                              		RET
    94 00000052                                 
    95 00000052                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    96 00000052 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    97 00000057 66 89 44 24 06                  		MOV		[ESP+6],AX
    98 0000005C 0F 01 54 24 06                  		LGDT	[ESP+6]
    99 00000061 C3                              		RET
   100 00000062                                 
   101 00000062                                 _load_idtr:		; void load_idtr(int limit, int addr);
   102 00000062 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   103 00000067 66 89 44 24 06                  		MOV		[ESP+6],AX
   104 0000006C 0F 01 5C 24 06                  		LIDT	[ESP+6]
   105 00000071 C3                              		RET
   106 00000072                                 
   107 00000072                                 _load_cr0:		; int load_cr0(void);
   108 00000072 0F 20 C0                        		MOV		EAX,CR0
   109 00000075 C3                              		RET
   110 00000076                                 
   111 00000076                                 _store_cr0:		; void store_cr0(int cr0);
   112 00000076 8B 44 24 04                     		MOV		EAX,[ESP+4]
   113 0000007A 0F 22 C0                        		MOV		CR0,EAX
   114 0000007D C3                              		RET
   115 0000007E                                 
   116 0000007E                                 _load_tr:		; void load_tr(int tr);
   117 0000007E 0F 00 5C 24 04                  		LTR		[ESP+4]			; tr
   118 00000083 C3                              		RET
   119 00000084                                 
   120 00000084                                 _asm_inthandler20:
   121 00000084 06                              		PUSH	ES
   122 00000085 1E                              		PUSH	DS
   123 00000086 60                              		PUSHAD
   124 00000087 89 E0                           		MOV		EAX,ESP
   125 00000089 50                              		PUSH	EAX
   126 0000008A 66 8C D0                        		MOV		AX,SS
   127 0000008D 8E D8                           		MOV		DS,AX
   128 0000008F 8E C0                           		MOV		ES,AX
   129 00000091 E8 [00000000]                   		CALL	_inthandler20
   130 00000096 58                              		POP		EAX
   131 00000097 61                              		POPAD
   132 00000098 1F                              		POP		DS
   133 00000099 07                              		POP		ES
   134 0000009A CF                              		IRETD
   135 0000009B                                 
   136 0000009B                                 _asm_inthandler21:
   137 0000009B 06                              		PUSH	ES
   138 0000009C 1E                              		PUSH	DS
   139 0000009D 60                              		PUSHAD
   140 0000009E 89 E0                           		MOV		EAX,ESP
   141 000000A0 50                              		PUSH	EAX
   142 000000A1 66 8C D0                        		MOV		AX,SS
   143 000000A4 8E D8                           		MOV		DS,AX
   144 000000A6 8E C0                           		MOV		ES,AX
   145 000000A8 E8 [00000000]                   		CALL	_inthandler21
   146 000000AD 58                              		POP		EAX
   147 000000AE 61                              		POPAD
   148 000000AF 1F                              		POP		DS
   149 000000B0 07                              		POP		ES
   150 000000B1 CF                              		IRETD
   151 000000B2                                 
   152 000000B2                                 
   153 000000B2                                 _asm_inthandler26:   ; （これは_asm_inthandler20等とほとんど同じ）
   154 000000B2 06                              		PUSH	ES
   155 000000B3 1E                              		PUSH	DS
   156 000000B4 60                              		PUSHAD
   157 000000B5 89 E0                           		MOV		EAX,ESP
   158 000000B7 50                              		PUSH	EAX
   159 000000B8 66 8C D0                        		MOV		AX,SS
   160 000000BB 8E D8                           		MOV		DS,AX
   161 000000BD 8E C0                           		MOV		ES,AX
   162 000000BF E8 [00000000]                   		CALL	_inthandler26
   163 000000C4 58                              		POP		EAX
   164 000000C5 61                              		POPAD
   165 000000C6 1F                              		POP		DS
   166 000000C7 07                              		POP		ES
   167 000000C8 CF                              		IRETD
   168 000000C9                                 
   169 000000C9                                 _asm_inthandler2c:
   170 000000C9 06                              		PUSH	ES
   171 000000CA 1E                              		PUSH	DS
   172 000000CB 60                              		PUSHAD
   173 000000CC 89 E0                           		MOV		EAX,ESP
   174 000000CE 50                              		PUSH	EAX
   175 000000CF 66 8C D0                        		MOV		AX,SS
   176 000000D2 8E D8                           		MOV		DS,AX
   177 000000D4 8E C0                           		MOV		ES,AX
   178 000000D6 E8 [00000000]                   		CALL	_inthandler2c
   179 000000DB 58                              		POP		EAX
   180 000000DC 61                              		POPAD
   181 000000DD 1F                              		POP		DS
   182 000000DE 07                              		POP		ES
   183 000000DF CF                              		IRETD
   184 000000E0                                 
   185 000000E0                                 _asm_inthandler0c:
   186 000000E0 FB                              		STI
   187 000000E1 06                              		PUSH	ES
   188 000000E2 1E                              		PUSH	DS
   189 000000E3 60                              		PUSHAD
   190 000000E4 89 E0                           		MOV		EAX,ESP
   191 000000E6 50                              		PUSH	EAX
   192 000000E7 66 8C D0                        		MOV		AX,SS
   193 000000EA 8E D8                           		MOV		DS,AX
   194 000000EC 8E C0                           		MOV		ES,AX
   195 000000EE E8 [00000000]                   		CALL	_inthandler0c
   196 000000F3 83 F8 00                        		CMP		EAX,0
   197 000000F6 0F 85 00000091                  		JNE		_asm_end_app
   198 000000FC 58                              		POP		EAX
   199 000000FD 61                              		POPAD
   200 000000FE 1F                              		POP		DS
   201 000000FF 07                              		POP		ES
   202 00000100 83 C4 04                        		ADD		ESP,4			; INT 0x0c でも、これが必要
   203 00000103 CF                              		IRETD
   204 00000104                                 
   205 00000104                                 _asm_inthandler0d:
   206 00000104 FB                              		STI
   207 00000105 06                              		PUSH	ES
   208 00000106 1E                              		PUSH	DS
   209 00000107 60                              		PUSHAD
   210 00000108 89 E0                           		MOV		EAX,ESP
   211 0000010A 50                              		PUSH	EAX
   212 0000010B 66 8C D0                        		MOV		AX,SS
   213 0000010E 8E D8                           		MOV		DS,AX
   214 00000110 8E C0                           		MOV		ES,AX
   215 00000112 E8 [00000000]                   		CALL	_inthandler0d
   216 00000117 83 F8 00                        		CMP		EAX,0			; ここだけ違う
   217 0000011A 75 71                           		JNE		_asm_end_app	; ここだけ違う
   218 0000011C 58                              		POP		EAX
   219 0000011D 61                              		POPAD
   220 0000011E 1F                              		POP		DS
   221 0000011F 07                              		POP		ES
   222 00000120 83 C4 04                        		ADD		ESP,4			; INT 0x0d では、これが必要
   223 00000123 CF                              		IRETD
   224 00000124                                 
   225 00000124                                 _memtest_sub:	; unsigned int memtest_sub(unsigned int start, unsigned int end)
   226 00000124 57                              		PUSH	EDI						; （EBX, ESI, EDI も使いたいので）
   227 00000125 56                              		PUSH	ESI
   228 00000126 53                              		PUSH	EBX
   229 00000127 BE AA55AA55                     		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   230 0000012C BF 55AA55AA                     		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   231 00000131 8B 44 24 10                     		MOV		EAX,[ESP+12+4]			; i = start;
   232 00000135                                 mts_loop:
   233 00000135 89 C3                           		MOV		EBX,EAX
   234 00000137 81 C3 00000FFC                  		ADD		EBX,0xffc				; p = i + 0xffc;
   235 0000013D 8B 13                           		MOV		EDX,[EBX]				; old = *p;
   236 0000013F 89 33                           		MOV		[EBX],ESI				; *p = pat0;
   237 00000141 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   238 00000144 3B 3B                           		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   239 00000146 75 18                           		JNE		mts_fin
   240 00000148 83 33 FF                        		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   241 0000014B 3B 33                           		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   242 0000014D 75 11                           		JNE		mts_fin
   243 0000014F 89 13                           		MOV		[EBX],EDX				; *p = old;
   244 00000151 05 00001000                     		ADD		EAX,0x1000				; i += 0x1000;
   245 00000156 3B 44 24 14                     		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   246 0000015A 76 D9                           		JBE		mts_loop
   247 0000015C 5B                              		POP		EBX
   248 0000015D 5E                              		POP		ESI
   249 0000015E 5F                              		POP		EDI
   250 0000015F C3                              		RET
   251 00000160                                 mts_fin:
   252 00000160 89 13                           		MOV		[EBX],EDX				; *p = old;
   253 00000162 5B                              		POP		EBX
   254 00000163 5E                              		POP		ESI
   255 00000164 5F                              		POP		EDI
   256 00000165 C3                              		RET
   257 00000166                                 
   258 00000166                                 _farjmp:		; void farjmp(int eip, int cs);
   259 00000166 FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   260 0000016A C3                              		RET
   261 0000016B                                 
   262 0000016B                                 _farcall:		; void farcall(int eip, int cs);
   263 0000016B FF 5C 24 04                     		CALL	FAR	[ESP+4]				; eip, cs
   264 0000016F C3                              		RET
   265 00000170                                 
   266 00000170                                 _asm_hrb_api:
   267 00000170 FB                              		STI
   268 00000171 1E                              		PUSH	DS
   269 00000172 06                              		PUSH	ES
   270 00000173 60                              		PUSHAD		; 保存のためのPUSH
   271 00000174 60                              		PUSHAD		; hrb_apiにわたすためのPUSH
   272 00000175 66 8C D0                        		MOV		AX,SS
   273 00000178 8E D8                           		MOV		DS,AX		; OS用のセグメントをDSとESにも入れる
   274 0000017A 8E C0                           		MOV		ES,AX
   275 0000017C E8 [00000000]                   		CALL	_hrb_api
   276 00000181 83 F8 00                        		CMP		EAX,0		; EAXが0でなければアプリ終了処理
   277 00000184 75 07                           		JNE		_asm_end_app
   278 00000186 83 C4 20                        		ADD		ESP,32
   279 00000189 61                              		POPAD
   280 0000018A 07                              		POP		ES
   281 0000018B 1F                              		POP		DS
   282 0000018C CF                              		IRETD
   283 0000018D                                 _asm_end_app:
   284 0000018D                                 ;	EAXはtss.esp0の番地
   285 0000018D 8B 20                           		MOV		ESP,[EAX]
   286 0000018F C7 40 04 00000000               		MOV		DWORD [EAX+4],0
   287 00000196 61                              		POPAD
   288 00000197 C3                              		RET					; cmd_appへ帰る
   289 00000198                                 
   290 00000198                                 _start_app:		; void start_app(int eip, int cs, int esp, int ds, int *tss_esp0);
   291 00000198 60                              		PUSHAD		; 32ビットレジスタを全部保存しておく
   292 00000199 8B 44 24 24                     		MOV		EAX,[ESP+36]	; アプリ用のEIP
   293 0000019D 8B 4C 24 28                     		MOV		ECX,[ESP+40]	; アプリ用のCS
   294 000001A1 8B 54 24 2C                     		MOV		EDX,[ESP+44]	; アプリ用のESP
   295 000001A5 8B 5C 24 30                     		MOV		EBX,[ESP+48]	; アプリ用のDS/SS
   296 000001A9 8B 6C 24 34                     		MOV		EBP,[ESP+52]	; tss.esp0の番地
   297 000001AD 89 65 00                        		MOV		[EBP  ],ESP		; OS用のESPを保存
   298 000001B0 8C 55 04                        		MOV		[EBP+4],SS		; OS用のSSを保存
   299 000001B3 8E C3                           		MOV		ES,BX
   300 000001B5 8E DB                           		MOV		DS,BX
   301 000001B7 8E E3                           		MOV		FS,BX
   302 000001B9 8E EB                           		MOV		GS,BX
   303 000001BB                                 ;	以下はRETFでアプリに行かせるためのスタック調整
   304 000001BB 83 C9 03                        		OR		ECX,3			; アプリ用のセグメント番号に3をORする
   305 000001BE 83 CB 03                        		OR		EBX,3			; アプリ用のセグメント番号に3をORする
   306 000001C1 53                              		PUSH	EBX				; アプリのSS
   307 000001C2 52                              		PUSH	EDX				; アプリのESP
   308 000001C3 51                              		PUSH	ECX				; アプリのCS
   309 000001C4 50                              		PUSH	EAX				; アプリのEIP
   310 000001C5 CB                              		RETF
   311 000001C6                                 ;	アプリが終了してもここには来ない
   312 000001C6                                 _write_mem8:	; void write_mem8(int addr, int data);
   313 000001C6 8B 4C 24 04                     		MOV		ECX,[ESP+4]		; [ESP+4]にaddrが入っているのでそれをECXに読み込む
   314 000001CA 8A 44 24 08                     		MOV		AL,[ESP+8]		; [ESP+8]にdataが入っているのでそれをALに読み込む
   315 000001CE 88 01                           		MOV		[ECX],AL
   316 000001D0 C3                              		RET
