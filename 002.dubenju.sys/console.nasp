[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_task_now
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_timer_settime
	EXTERN	_u_fat
	EXTERN	_io_cli
	EXTERN	_fifo32_status
	EXTERN	_fifo32_get
	EXTERN	_io_sti
	EXTERN	_boxfill8
	EXTERN	_sheet_refresh
	EXTERN	_task_sleep
	EXTERN	_putfonts8_asc_sht
	EXTERN	_open_taskmgr
	EXTERN	_memman_total
	EXTERN	_sprintf
	EXTERN	_dbg_putstr0
	EXTERN	_timer_cancel
	EXTERN	_fifo32_put
	EXTERN	_taskctl
	EXTERN	_open_console
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_open_constask
	EXTERN	_rtc_get
	EXTERN	_test_sb16
	EXTERN	_CardID
	EXTERN	_IOAddr
	EXTERN	_ver2
	EXTERN	_ver1
	EXTERN	_SBIntr
	EXTERN	_DMA
	EXTERN	_HDMA
	EXTERN	_MIDI
	EXTERN	_Mixer
	EXTERN	_write_dsp
	EXTERN	_timerctl
	EXTERN	_file_path
	EXTERN	_current_path
	EXTERN	_file_search2
	EXTERN	_strcpy
	EXTERN	_strncpy
	EXTERN	_file_search
	EXTERN	_file_loadfile2
	EXTERN	_memman_free_4k
	EXTERN	_memman_alloc_4k
	EXTERN	_set_segmdesc
	EXTERN	_start_app
	EXTERN	_timer_cancelall
	EXTERN	_sheet_free
	EXTERN	_io_in8
	EXTERN	_io_out8
	EXTERN	_timer_free
	EXTERN	_table_16_65536
	EXTERN	_memman_free
	EXTERN	_memman_alloc
	EXTERN	_memman_init
	EXTERN	_putfonts8_asc
	EXTERN	_sheet_alloc
	EXTERN	_sheet_setbuf
	EXTERN	_make_window8
	EXTERN	_set_title
[FILE "console.c"]
[SECTION .data]
LC0:
	DB	"con",0x00
[SECTION .text]
	GLOBAL	_console_task
_console_task:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,520
	MOV	EBX,DWORD [8+EBP]
	CALL	_task_now
	MOV	EDI,EAX
	MOV	DWORD [-44+EBP],EBX
	MOV	EAX,DWORD [4072]
	TEST	EBX,EBX
	MOV	DWORD [-528+EBP],EAX
	LEA	EAX,DWORD [-44+EBP]
	MOV	DWORD [164+EDI],EAX
	LEA	EAX,DWORD [-524+EBP]
	MOV	DWORD [-40+EBP],8
	MOV	DWORD [-36+EBP],28
	MOV	DWORD [-32+EBP],-1
	MOV	DWORD [184+EDI],EAX
	JE	L2
	PUSH	LC0
	CALL	_timer_alloc
	LEA	EDX,DWORD [16+EDI]
	PUSH	1
	PUSH	EDX
	MOV	DWORD [-28+EBP],EAX
	PUSH	EAX
	CALL	_timer_init
	PUSH	50
	PUSH	DWORD [-28+EBP]
	CALL	_timer_settime
	ADD	ESP,24
L2:
	XOR	EAX,EAX
	MOV	ESI,7
L7:
	MOV	DWORD [-268+EBP+EAX*1],0
	ADD	EAX,28
	DEC	ESI
	JNS	L7
	LEA	EAX,DWORD [-268+EBP]
	MOV	ECX,DWORD [-528+EBP]
	MOV	DWORD [176+EDI],EAX
	MOV	EAX,DWORD [_u_fat]
	MOV	DWORD [180+EDI],EAX
	LEA	EAX,DWORD [-44+EBP]
	CMP	BYTE [4096+ECX],-1
	MOV	BYTE [189+EDI],0
	SETNE	BYTE [188+EDI]
	PUSH	1
	PUSH	62
	PUSH	EAX
	CALL	_cons_putchar
	ADD	ESP,12
L10:
	LEA	EBX,DWORD [16+EDI]
	CALL	_io_cli
	PUSH	EBX
	CALL	_fifo32_status
	POP	ESI
	TEST	EAX,EAX
	JE	L38
	PUSH	EBX
	CALL	_fifo32_get
	MOV	ESI,EAX
	CALL	_io_sti
	POP	ECX
	CMP	ESI,1
	JLE	L39
L15:
	CMP	ESI,2
	JE	L40
L20:
	CMP	ESI,3
	JE	L41
L21:
	CMP	ESI,4
	JE	L42
L23:
	LEA	EBX,DWORD [-256+ESI]
	MOV	DWORD [-532+EBP],EBX
	CMP	EBX,255
	JA	L24
	CMP	ESI,264
	JE	L43
	CMP	ESI,266
	JE	L44
	MOV	ECX,DWORD [-40+EBP]
	CMP	ECX,583
	JG	L24
	MOV	EAX,ECX
	MOV	EDX,8
	MOV	EBX,EDX
	PUSH	1
	CDQ
	IDIV	EBX
	MOV	ECX,EAX
	MOV	EAX,ESI
	MOV	BYTE [-526+EBP+ECX*1],AL
	LEA	EAX,DWORD [-44+EBP]
	PUSH	DWORD [-532+EBP]
	PUSH	EAX
L36:
	CALL	_cons_putchar
L37:
	ADD	ESP,12
L24:
	MOV	EBX,DWORD [-44+EBP]
	TEST	EBX,EBX
	JE	L10
	CMP	DWORD [-32+EBP],0
	JS	L33
	MOV	ECX,DWORD [-36+EBP]
	MOV	EDX,DWORD [-40+EBP]
	LEA	EAX,DWORD [15+ECX]
	PUSH	EAX
	LEA	EAX,DWORD [7+EDX]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	MOVZX	EAX,BYTE [-32+EBP]
	PUSH	EAX
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	CALL	_boxfill8
	ADD	ESP,28
L33:
	MOV	ECX,DWORD [-36+EBP]
	MOV	EDX,DWORD [-40+EBP]
	LEA	EAX,DWORD [16+ECX]
	PUSH	EAX
	LEA	EAX,DWORD [8+EDX]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	DWORD [-44+EBP]
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L10
L44:
	PUSH	0
	LEA	EBX,DWORD [-44+EBP]
	PUSH	32
	PUSH	EBX
	CALL	_cons_putchar
	PUSH	EBX
	MOV	EAX,DWORD [-40+EBP]
	MOV	EDX,8
	MOV	ECX,EDX
	CDQ
	IDIV	ECX
	MOV	BYTE [-526+EBP+EAX*1],0
	CALL	_cons_newline
	LEA	EAX,DWORD [-524+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [_u_fat]
	PUSH	EBX
	PUSH	EAX
	CALL	_cons_runcmd
	ADD	ESP,32
	CMP	DWORD [-44+EBP],0
	JNE	L29
	PUSH	DWORD [_u_fat]
	PUSH	EBX
	CALL	_cmd_exit
	POP	EAX
	POP	EDX
L29:
	PUSH	1
	PUSH	62
	PUSH	EBX
	JMP	L36
L43:
	CMP	DWORD [-40+EBP],16
	JLE	L24
	PUSH	0
	LEA	EAX,DWORD [-44+EBP]
	PUSH	32
	PUSH	EAX
	CALL	_cons_putchar
	SUB	DWORD [-40+EBP],8
	JMP	L37
L42:
	PUSH	DWORD [_u_fat]
	LEA	EAX,DWORD [-44+EBP]
	PUSH	EAX
	CALL	_cmd_exit
	POP	ECX
	POP	EBX
	JMP	L23
L41:
	MOV	EBX,DWORD [-44+EBP]
	TEST	EBX,EBX
	JE	L22
	MOV	ECX,DWORD [-36+EBP]
	MOV	EDX,DWORD [-40+EBP]
	LEA	EAX,DWORD [15+ECX]
	PUSH	EAX
	LEA	EAX,DWORD [7+EDX]
	PUSH	EAX
	PUSH	ECX
	PUSH	EDX
	PUSH	0
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	CALL	_boxfill8
	ADD	ESP,28
L22:
	MOV	DWORD [-32+EBP],-1
	JMP	L21
L40:
	MOV	DWORD [-32+EBP],7
	JMP	L20
L39:
	CMP	DWORD [-44+EBP],0
	JE	L15
	TEST	ESI,ESI
	JE	L16
	PUSH	0
	PUSH	EBX
	PUSH	DWORD [-28+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-32+EBP],0
	JS	L18
	MOV	DWORD [-32+EBP],7
L18:
	PUSH	50
	PUSH	DWORD [-28+EBP]
	CALL	_timer_settime
	POP	EAX
	POP	EDX
	JMP	L15
L16:
	PUSH	1
	PUSH	EBX
	PUSH	DWORD [-28+EBP]
	CALL	_timer_init
	ADD	ESP,12
	CMP	DWORD [-32+EBP],0
	JS	L18
	MOV	DWORD [-32+EBP],0
	JMP	L18
L38:
	PUSH	EDI
	CALL	_task_sleep
	CALL	_io_sti
	POP	EBX
	JMP	L10
[SECTION .data]
LC1:
	DB	" ",0x00
[SECTION .text]
	GLOBAL	_cons_putchar
_cons_putchar:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	MOV	DL,BYTE [16+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	BYTE [-7+EBP],DL
	MOV	BYTE [-6+EBP],AL
	CMP	AL,9
	MOV	BYTE [-5+EBP],0
	JE	L47
	CMP	AL,10
	JE	L61
	CMP	AL,13
	JE	L45
	MOV	EDX,DWORD [EBX]
	TEST	EDX,EDX
	JNE	L62
L58:
	CMP	BYTE [-7+EBP],0
	JE	L45
	MOV	EAX,DWORD [4+EBX]
	ADD	EAX,8
	MOV	DWORD [4+EBX],EAX
	CMP	EAX,592
	JE	L61
L45:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L61:
	PUSH	EBX
	CALL	_cons_newline
	POP	EAX
	JMP	L45
L62:
	PUSH	1
	LEA	EAX,DWORD [-6+EBP]
	PUSH	EAX
	PUSH	0
	PUSH	7
	PUSH	DWORD [8+EBX]
	PUSH	DWORD [4+EBX]
	PUSH	EDX
	CALL	_putfonts8_asc_sht
	ADD	ESP,28
	JMP	L58
L47:
	MOV	EAX,DWORD [EBX]
	TEST	EAX,EAX
	JNE	L63
L50:
	MOV	EAX,DWORD [4+EBX]
	ADD	EAX,8
	MOV	DWORD [4+EBX],EAX
	CMP	EAX,592
	JE	L64
L51:
	MOV	EAX,DWORD [4+EBX]
	SUB	EAX,8
	AND	EAX,31
	JNE	L47
	JMP	L45
L64:
	PUSH	EBX
	CALL	_cons_newline
	POP	EAX
	JMP	L51
L63:
	PUSH	1
	PUSH	LC1
	PUSH	0
	PUSH	7
	PUSH	DWORD [8+EBX]
	PUSH	DWORD [4+EBX]
	PUSH	EAX
	CALL	_putfonts8_asc_sht
	ADD	ESP,28
	JMP	L50
	GLOBAL	_cons_newline
_cons_newline:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,16
	MOV	EAX,DWORD [8+EBP]
	MOV	EAX,DWORD [EAX]
	MOV	DWORD [-16+EBP],EAX
	CALL	_task_now
	MOV	EDX,DWORD [8+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [8+EDX]
	CMP	EAX,363
	JG	L66
	ADD	EAX,16
	MOV	DWORD [8+EDX],EAX
L67:
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [-20+EBP]
	MOV	DWORD [4+EAX],8
	CMP	BYTE [188+EDX],1
	JE	L98
L65:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L98:
	CMP	BYTE [189+EDX],0
	JE	L65
	MOV	DWORD [4+EAX],16
	JMP	L65
L66:
	CMP	DWORD [-16+EBP],0
	JE	L67
	MOV	EBX,28
L78:
	MOV	EAX,DWORD [-16+EBP]
	MOV	EDX,DWORD [-16+EBP]
	MOV	ECX,8
	MOV	EAX,DWORD [4+EAX]
	MOV	EDX,DWORD [EDX]
	MOV	DWORD [-24+EBP],EAX
	MOV	DWORD [-28+EBP],EDX
L77:
	MOV	ESI,DWORD [-24+EBP]
	LEA	EDX,DWORD [16+EBX]
	IMUL	EDX,ESI
	MOV	EAX,EBX
	MOV	EDI,DWORD [-28+EBP]
	IMUL	EAX,ESI
	LEA	EDX,DWORD [EDX+ECX*1]
	LEA	EAX,DWORD [EAX+ECX*1]
	INC	ECX
	MOV	DX,WORD [EDI+EDX*2]
	CMP	ECX,591
	MOV	WORD [EDI+EAX*2],DX
	JLE	L77
	INC	EBX
	CMP	EBX,363
	JLE	L78
	MOV	EDX,ESI
	MOV	EBX,364
	IMUL	EDX,EDX,364
L88:
	MOV	ECX,8
	LEA	EAX,DWORD [16+EDI+EDX*2]
L87:
	MOV	WORD [EAX],0
	INC	ECX
	ADD	EAX,2
	CMP	ECX,591
	JLE	L87
	INC	EBX
	ADD	EDX,ESI
	CMP	EBX,390
	JLE	L88
	PUSH	391
	PUSH	592
	PUSH	28
	PUSH	8
	PUSH	DWORD [-16+EBP]
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L67
	GLOBAL	_cons_putstr0
_cons_putstr0:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	CMP	BYTE [EBX],0
	JNE	L104
L106:
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L104:
	PUSH	1
	MOVSX	EAX,BYTE [EBX]
	PUSH	EAX
	INC	EBX
	PUSH	ESI
	CALL	_cons_putchar
	ADD	ESP,12
	CMP	BYTE [EBX],0
	JNE	L104
	JMP	L106
	GLOBAL	_cons_putstr1
_cons_putstr1:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	MOV	ESI,DWORD [16+EBP]
	XOR	EBX,EBX
	MOV	EDI,DWORD [12+EBP]
	CMP	EBX,ESI
	JL	L112
L114:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L112:
	PUSH	1
	MOVSX	EAX,BYTE [EBX+EDI*1]
	PUSH	EAX
	INC	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putchar
	ADD	ESP,12
	CMP	EBX,ESI
	JL	L112
	JMP	L114
[SECTION .data]
LC2:
	DB	"mem",0x00
LC3:
	DB	"cls",0x00
LC4:
	DB	"dir",0x00
LC5:
	DB	"exit",0x00
LC6:
	DB	"start ",0x00
LC7:
	DB	"ncst ",0x00
LC8:
	DB	"langmode ",0x00
LC9:
	DB	"ver",0x00
LC10:
	DB	"time",0x00
LC11:
	DB	"date",0x00
LC12:
	DB	"tasklst",0x00
LC13:
	DB	"timerlst",0x00
LC14:
	DB	"sheetlst",0x00
LC15:
	DB	"title",0x00
LC16:
	DB	"test",0x00
LC17:
	DB	"read",0x00
LC18:
	DB	"sond",0x00
LC19:
	DB	"cd",0x00
LC20:
	DB	"chdir",0x00
LC21:
	DB	"md",0x00
LC22:
	DB	"mkdir",0x00
LC23:
	DB	"rd",0x00
LC24:
	DB	"rmdir",0x00
LC25:
	DB	"del ",0x00
LC26:
	DB	"pwd",0x00
LC27:
	DB	"Bad command.",0x0A,0x0A,0x00
[SECTION .text]
	GLOBAL	_cons_runcmd
_cons_runcmd:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EDI,LC2
	PUSH	EBX
	SUB	ESP,16
	MOV	EAX,DWORD [8+EBP]
	MOV	ECX,DWORD [20+EBP]
	MOV	DWORD [-28+EBP],EAX
	MOV	ESI,EAX
	MOV	EDX,DWORD [16+EBP]
	MOV	EAX,4
	CLD
	MOV	DWORD [-20+EBP],ECX
	MOV	DWORD [-16+EBP],EDX
	MOV	ECX,EAX
	MOV	EBX,DWORD [12+EBP]
	REPE
	CMPSB
	JNE	L116
	CMP	DWORD [EBX],0
	JNE	L170
L116:
	MOV	EAX,4
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC3
	MOV	ECX,EAX
	REPE
	CMPSB
	JNE	L118
	CMP	DWORD [EBX],0
	JNE	L171
L118:
	MOV	EAX,4
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC4
	MOV	ECX,EAX
	REPE
	CMPSB
	JNE	L120
	CMP	DWORD [EBX],0
	JNE	L172
L120:
	MOV	EAX,5
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC5
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L173
	MOV	EAX,6
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC6
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L174
	MOV	EAX,5
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC7
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L175
	MOV	EAX,9
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC8
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L176
	MOV	EDX,DWORD [-28+EBP]
	MOV	DL,BYTE [EDX]
	MOV	BYTE [-21+EBP],DL
	CMP	DL,63
	JE	L177
	MOV	EAX,3
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC9
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L178
	MOV	EAX,4
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC10
	MOV	ECX,EAX
	REPE
	CMPSB
	JNE	L136
	MOV	EDX,DWORD [-28+EBP]
	MOV	AL,BYTE [4+EDX]
	TEST	AL,AL
	JE	L135
	CMP	AL,32
	JE	L135
L136:
	MOV	EAX,4
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC11
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L135
	MOV	EAX,7
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC12
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L179
	MOV	EAX,8
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC13
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L180
	MOV	EAX,8
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC14
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L181
	MOV	EAX,5
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC15
	MOV	ECX,EAX
	REPE
	CMPSB
	JNE	L144
	MOV	EDX,DWORD [-28+EBP]
	MOV	AL,BYTE [5+EDX]
	TEST	AL,AL
	JE	L145
	CMP	AL,32
	JE	L145
	CMP	AL,47
	JE	L145
L144:
	MOV	EAX,4
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC16
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L182
	MOV	EAX,4
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC17
	MOV	ECX,EAX
	REPE
	CMPSB
	JNE	L149
	MOV	EDX,DWORD [-28+EBP]
	MOV	AL,BYTE [4+EDX]
	TEST	AL,AL
	JE	L150
	CMP	AL,32
	JE	L150
	CMP	AL,47
	JE	L150
L149:
	MOV	EAX,4
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC18
	MOV	ECX,EAX
	REPE
	CMPSB
	JNE	L152
	MOV	EDX,DWORD [-28+EBP]
	MOV	AL,BYTE [4+EDX]
	TEST	AL,AL
	JE	L153
	CMP	AL,32
	JE	L153
	CMP	AL,47
	JE	L153
L152:
	MOV	EAX,2
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC19
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L156
	MOV	EAX,5
	MOV	ESI,DWORD [-28+EBP]
	MOV	EDI,LC20
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L156
	MOV	EAX,2
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC21
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L159
	MOV	EAX,5
	MOV	ESI,DWORD [-28+EBP]
	MOV	EDI,LC22
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L159
	MOV	EAX,2
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC23
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L162
	MOV	EAX,5
	MOV	ESI,DWORD [-28+EBP]
	MOV	EDI,LC24
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L162
	MOV	EAX,4
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC25
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L183
	MOV	EAX,3
	MOV	ESI,DWORD [-28+EBP]
	CLD
	MOV	EDI,LC26
	MOV	ECX,EAX
	REPE
	CMPSB
	JE	L184
	CMP	BYTE [-21+EBP],0
	JNE	L185
L115:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L185:
	PUSH	DWORD [-28+EBP]
	PUSH	DWORD [-16+EBP]
	PUSH	EBX
	CALL	_cmd_app
	ADD	ESP,12
	TEST	EAX,EAX
	JNE	L115
	MOV	DWORD [12+EBP],LC27
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cons_putstr0
L184:
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_pwd
L183:
	MOV	EAX,DWORD [-28+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_del
L162:
	MOV	EAX,DWORD [-16+EBP]
	MOV	EDX,DWORD [-28+EBP]
	MOV	DWORD [16+EBP],EAX
	MOV	DWORD [12+EBP],EDX
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_rd
L159:
	MOV	EAX,DWORD [-16+EBP]
	MOV	EDX,DWORD [-28+EBP]
	MOV	DWORD [16+EBP],EAX
	MOV	DWORD [12+EBP],EDX
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_md
L156:
	MOV	EAX,DWORD [-16+EBP]
	MOV	EDX,DWORD [-28+EBP]
	MOV	DWORD [16+EBP],EAX
	MOV	DWORD [12+EBP],EDX
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_cd
L153:
	MOV	ECX,DWORD [-28+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],ECX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_sond
L150:
	MOV	ECX,DWORD [-28+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],ECX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_read
L182:
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_open_taskmgr
L145:
	MOV	ECX,DWORD [-28+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],ECX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_title
L181:
	MOV	EAX,DWORD [-28+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_sheetlst
L180:
	MOV	EAX,DWORD [-28+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_timerlst
L179:
	MOV	EAX,DWORD [-28+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_tasklst
L135:
	MOV	EAX,DWORD [-28+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_time
L178:
	MOV	EAX,DWORD [-28+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_ver
L177:
	MOV	ECX,DWORD [-28+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],ECX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_help
L176:
	MOV	EAX,DWORD [-28+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_langmode
L175:
	MOV	EAX,DWORD [-20+EBP]
	MOV	EDX,DWORD [-28+EBP]
	MOV	DWORD [16+EBP],EAX
	MOV	DWORD [12+EBP],EDX
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_ncst
L174:
	MOV	EAX,DWORD [-20+EBP]
	MOV	EDX,DWORD [-28+EBP]
	MOV	DWORD [16+EBP],EAX
	MOV	DWORD [12+EBP],EDX
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_start
L173:
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_exit
L172:
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_dir
L171:
	MOV	DWORD [8+EBP],EBX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_cls
L170:
	MOV	EAX,DWORD [-20+EBP]
	MOV	DWORD [8+EBP],EBX
	MOV	DWORD [12+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cmd_mem
[SECTION .data]
LC28:
	DB	"total   %dMB",0x0A,"free %dKB",0x0A,0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_mem
_cmd_mem:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	SUB	ESP,64
	PUSH	3932160
	CALL	_memman_total
	MOV	EDX,1048576
	SHR	EAX,10
	MOV	EBX,EDX
	MOV	DWORD [ESP],EAX
	MOV	EAX,DWORD [12+EBP]
	CDQ
	IDIV	EBX
	PUSH	EAX
	LEA	EBX,DWORD [-68+EBP]
	PUSH	LC28
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_cmd_cls
_cmd_cls:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	EAX,DWORD [8+EBP]
	PUSH	EBX
	MOV	EBX,28
	MOV	ECX,DWORD [EAX]
L197:
	MOV	EDX,8
	MOV	EDI,DWORD [4+ECX]
	MOV	ESI,DWORD [ECX]
L196:
	MOV	EAX,EBX
	IMUL	EAX,EDI
	LEA	EAX,DWORD [EAX+EDX*1]
	INC	EDX
	CMP	EDX,591
	MOV	WORD [ESI+EAX*2],0
	JLE	L196
	INC	EBX
	CMP	EBX,390
	JLE	L197
	PUSH	391
	PUSH	592
	PUSH	28
	PUSH	8
	PUSH	ECX
	CALL	_sheet_refresh
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [8+EAX],28
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
LC29:
	DB	"%d",0x00
LC30:
	DB	"%04d",0x00
LC31:
	DB	"%02d",0x00
LC32:
	DB	"%s/%s/%s  %s:%s <DIR>%7d filename.ext",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_dir
_cmd_dir:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	SUB	ESP,248
	MOV	DWORD [-256+EBP],0
L219:
	CLD
	XOR	EAX,EAX
	LEA	EDI,DWORD [-252+EBP]
	MOV	ECX,20
	LEA	EBX,DWORD [-252+EBP]
	REP
	STOSD
	PUSH	DWORD [-256+EBP]
	PUSH	LC29
	PUSH	EBX
	CALL	_sprintf
	PUSH	7
	PUSH	EBX
	CALL	_dbg_putstr0
	MOV	AL,BYTE [1058304+ESI]
	ADD	ESP,20
	TEST	AL,AL
	JE	L204
	CMP	AL,-27
	JE	L205
	MOV	AL,BYTE [1058315+ESI]
	AND	EAX,24
	MOV	BYTE [-257+EBP],AL
	JNE	L205
	MOV	AX,WORD [1058328+ESI]
	LEA	EDX,DWORD [-92+EBP]
	SHR	AX,9
	LEA	EBX,DWORD [-156+EBP]
	CWDE
	ADD	EAX,1980
	LEA	EDI,DWORD [-76+EBP]
	PUSH	EAX
	PUSH	LC30
	PUSH	EDX
	MOV	DWORD [-92+EBP],0
	MOV	BYTE [-88+EBP],0
	CALL	_sprintf
	MOV	AX,WORD [1058328+ESI]
	SHR	AX,5
	AND	EAX,15
	PUSH	EAX
	LEA	EAX,DWORD [-108+EBP]
	PUSH	LC31
	PUSH	EAX
	MOV	WORD [-108+EBP],0
	MOV	BYTE [-106+EBP],0
	CALL	_sprintf
	LEA	EDX,DWORD [-124+EBP]
	MOV	AX,WORD [1058328+ESI]
	AND	EAX,31
	CWDE
	PUSH	EAX
	PUSH	LC31
	PUSH	EDX
	MOV	WORD [-124+EBP],0
	MOV	BYTE [-122+EBP],0
	CALL	_sprintf
	ADD	ESP,36
	MOV	AX,WORD [1058326+ESI]
	SHR	AX,9
	CWDE
	PUSH	EAX
	LEA	EAX,DWORD [-140+EBP]
	PUSH	LC31
	PUSH	EAX
	MOV	WORD [-140+EBP],0
	MOV	BYTE [-138+EBP],0
	CALL	_sprintf
	MOV	AX,WORD [1058326+ESI]
	SHR	AX,5
	AND	EAX,15
	PUSH	EAX
	PUSH	LC31
	PUSH	EBX
	MOV	WORD [-156+EBP],0
	MOV	BYTE [-154+EBP],0
	CALL	_sprintf
	LEA	EDX,DWORD [-140+EBP]
	CLD
	MOV	AL,BYTE [-257+EBP]
	MOV	ECX,50
	REP
	STOSB
	PUSH	DWORD [1058332+ESI]
	PUSH	EBX
	LEA	EAX,DWORD [-76+EBP]
	PUSH	EDX
	LEA	EDX,DWORD [-124+EBP]
	PUSH	EDX
	LEA	EDX,DWORD [-108+EBP]
	PUSH	EDX
	LEA	EDX,DWORD [-92+EBP]
	PUSH	EDX
	PUSH	LC32
	PUSH	EAX
	CALL	_sprintf
	LEA	EDX,DWORD [1058304+ESI]
	XOR	ECX,ECX
	ADD	ESP,56
L218:
	MOV	AL,BYTE [EDX]
	INC	EDX
	MOV	BYTE [-45+EBP+ECX*1],AL
	INC	ECX
	CMP	ECX,7
	JLE	L218
	MOV	AL,BYTE [1058312+ESI]
	MOV	BYTE [-36+EBP],AL
	MOV	AL,BYTE [1058313+ESI]
	MOV	BYTE [-35+EBP],AL
	MOV	AL,BYTE [1058314+ESI]
	MOV	BYTE [-34+EBP],AL
	LEA	EAX,DWORD [-76+EBP]
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	POP	EAX
	POP	EDX
L205:
	INC	DWORD [-256+EBP]
	ADD	ESI,32
	CMP	DWORD [-256+EBP],223
	JLE	L219
L204:
	PUSH	DWORD [8+EBP]
	CALL	_cons_newline
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_cmd_exit
_cmd_exit:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EAX
	MOV	EBX,DWORD [8+EBP]
	CALL	_task_now
	MOV	ESI,DWORD [4068]
	MOV	EDI,DWORD [4076]
	MOV	DWORD [-16+EBP],EAX
	CMP	DWORD [EBX],0
	JE	L224
	PUSH	DWORD [16+EBX]
	CALL	_timer_cancel
	POP	EAX
L224:
	CALL	_io_cli
	MOV	EAX,DWORD [EBX]
	TEST	EAX,EAX
	JE	L225
	SUB	EAX,ESI
	SUB	EAX,1044
	SAR	EAX,2
	IMUL	EAX,EAX,-1171354717
	ADD	EAX,768
L230:
	PUSH	EAX
	PUSH	EDI
	CALL	_fifo32_put
	POP	EBX
	POP	ESI
	CALL	_io_sti
L227:
	PUSH	DWORD [-16+EBP]
	CALL	_task_sleep
	POP	ECX
	JMP	L227
L225:
	MOV	EAX,DWORD [-16+EBP]
	SUB	EAX,DWORD [_taskctl]
	SUB	EAX,4088
	SAR	EAX,2
	IMUL	EAX,EAX,-1944890851
	ADD	EAX,1024
	JMP	L230
	GLOBAL	_cmd_start
_cmd_start:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	PUSH	EDI
	PUSH	EDI
	MOV	EAX,DWORD [8+EBP]
	MOV	EDI,DWORD [12+EBP]
	MOV	ESI,DWORD [4068]
	MOV	DWORD [-16+EBP],EAX
	PUSH	DWORD [16+EBP]
	PUSH	ESI
	CALL	_open_console
	MOV	EBX,EAX
	MOV	EAX,DWORD [36+EAX]
	ADD	EAX,16
	MOV	DWORD [-20+EBP],EAX
	PUSH	4
	PUSH	32
	PUSH	EBX
	CALL	_sheet_slide
	PUSH	DWORD [16+ESI]
	PUSH	EBX
	MOV	EBX,6
	CALL	_sheet_updown
	ADD	ESP,28
	CMP	BYTE [6+EDI],0
	JNE	L236
L238:
	PUSH	266
	PUSH	DWORD [-20+EBP]
	CALL	_fifo32_put
	POP	EAX
	MOV	EAX,DWORD [-16+EBP]
	POP	EDX
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cons_newline
L236:
	MOVSX	EAX,BYTE [EBX+EDI*1]
	ADD	EAX,256
	INC	EBX
	PUSH	EAX
	PUSH	DWORD [-20+EBP]
	CALL	_fifo32_put
	CMP	BYTE [EBX+EDI*1],0
	POP	ECX
	POP	ESI
	JNE	L236
	JMP	L238
	GLOBAL	_cmd_ncst
_cmd_ncst:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,5
	PUSH	EBX
	PUSH	ECX
	MOV	EAX,DWORD [8+EBP]
	MOV	EBX,DWORD [12+EBP]
	MOV	DWORD [-16+EBP],EAX
	PUSH	DWORD [16+EBP]
	PUSH	0
	CALL	_open_constask
	CMP	BYTE [5+EBX],0
	LEA	EDI,DWORD [16+EAX]
	POP	EAX
	POP	EDX
	JNE	L244
L246:
	PUSH	266
	PUSH	EDI
	CALL	_fifo32_put
	POP	EAX
	MOV	EAX,DWORD [-16+EBP]
	POP	EDX
	MOV	DWORD [8+EBP],EAX
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	JMP	_cons_newline
L244:
	MOVSX	EAX,BYTE [ESI+EBX*1]
	ADD	EAX,256
	INC	ESI
	PUSH	EAX
	PUSH	EDI
	CALL	_fifo32_put
	CMP	BYTE [ESI+EBX*1],0
	POP	ECX
	POP	EAX
	JNE	L244
	JMP	L246
[SECTION .data]
LC33:
	DB	"mode number error.",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_langmode
_cmd_langmode:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	CALL	_task_now
	MOV	DL,BYTE [9+EBX]
	SUB	EDX,48
	CMP	DL,2
	JA	L248
	MOV	BYTE [188+EAX],DL
L249:
	MOV	DWORD [8+EBP],ESI
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_cons_newline
L248:
	PUSH	LC33
	PUSH	ESI
	CALL	_cons_putstr0
	POP	EBX
	POP	EAX
	JMP	L249
[SECTION .data]
LC34:
	DB	"cls      dir      exit     help      langmode mem      ncst     start ",0x0A,0x00
LC35:
	DB	"pwd      ",0x0A,0x00
LC36:
	DB	"Internam commands available:",0x0A,0x00
LC37:
	DB	"ALIAS    BEEP     BREAK    CALL      CD=      CHDIR=   CDD      CHCP",0x0A,0x00
LC38:
	DB	"CLS*     COPY     CTTY     DATE*     DEL*     DIR*     DIRS     DOSKEY",0x0A,0x00
LC39:
	DB	"ECHO     ERASE    EXIT     FOR       GOTO     HISTORY  IF       LFNFOR",0x0A,0x00
LC40:
	DB	"LH       LOADHIGH LOADFIX  MEMORY    MD=      MKDIR=   PATH     PAUSE",0x0A,0x00
LC41:
	DB	"PROMPT   PUSHD    POPD     RD=       REM      REN      RENAME   RMDIR=",0x0A,0x00
LC42:
	DB	"SET      SHIFT    TIME*    TRUENAME  TYPE*    VER*     VERIFY   VOL",0x0A,0x00
LC43:
	DB	"?        WHICH    TITLE",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_help
_cmd_help:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,96
	LEA	EBX,DWORD [-104+EBP]
	MOV	ESI,DWORD [8+EBP]
	PUSH	LC34
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	ESI
	CALL	_cons_putstr0
	PUSH	LC35
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	ESI
	CALL	_cons_putstr0
	ADD	ESP,32
	PUSH	LC36
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	ESI
	CALL	_cons_putstr0
	PUSH	LC37
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	ESI
	CALL	_cons_putstr0
	ADD	ESP,32
	PUSH	LC38
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	ESI
	CALL	_cons_putstr0
	PUSH	LC39
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	ESI
	CALL	_cons_putstr0
	ADD	ESP,32
	PUSH	LC40
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	ESI
	CALL	_cons_putstr0
	PUSH	LC41
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	ESI
	CALL	_cons_putstr0
	ADD	ESP,32
	PUSH	LC42
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	ESI
	CALL	_cons_putstr0
	PUSH	LC43
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	ESI
	CALL	_cons_putstr0
	ADD	ESP,32
	PUSH	ESI
	CALL	_cons_newline
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
[SECTION .data]
LC44:
	DB	0x0A,"Haribote version 1.0 [2010].",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_ver
_cmd_ver:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,96
	LEA	EBX,DWORD [-104+EBP]
	MOV	ESI,DWORD [8+EBP]
	PUSH	LC44
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	ESI
	CALL	_cons_putstr0
	PUSH	ESI
	CALL	_cons_newline
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
[SECTION .data]
LC45:
	DB	"%04d/%02d/%02d %02d:%02d:%02d",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_time
_cmd_time:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	XOR	EBX,EBX
	SUB	ESP,64
	MOV	ESI,DWORD [8+EBP]
L257:
	PUSH	EBX
	CALL	_rtc_get
	MOV	DWORD [-40+EBP+EBX*4],EAX
	INC	EBX
	POP	EAX
	CMP	EBX,6
	JLE	L257
	PUSH	DWORD [-20+EBP]
	PUSH	DWORD [-24+EBP]
	PUSH	DWORD [-28+EBP]
	PUSH	DWORD [-32+EBP]
	PUSH	DWORD [-36+EBP]
	PUSH	DWORD [-40+EBP]
	LEA	EBX,DWORD [-72+EBP]
	PUSH	LC45
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,32
	PUSH	EBX
	PUSH	ESI
	CALL	_cons_putstr0
	PUSH	ESI
	CALL	_cons_newline
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	RET
[SECTION .data]
LC47:
	DB	"%s",0x00
LC48:
	DB	0x0A,0x00
LC46:
	DB	"[USEAGE]TITLE title",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_title
_cmd_title:
	PUSH	EBP
	OR	ECX,-1
	MOV	EBP,ESP
	XOR	EAX,EAX
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,96
	MOV	EBX,DWORD [12+EBP]
	MOV	ESI,DWORD [8+EBP]
	CLD
	MOV	EDI,EBX
	REPNE
	SCASB
	NOT	ECX
	DEC	ECX
	CMP	ECX,6
	JLE	L272
	MOV	EAX,5
	CMP	EAX,ECX
	JGE	L263
L268:
	MOV	DL,BYTE [EAX+EBX*1]
	CMP	DL,47
	JE	L271
	CMP	DL,63
	JE	L270
	CMP	DL,32
	JNE	L263
L271:
	INC	EAX
	CMP	EAX,ECX
	JL	L268
L263:
	LEA	EAX,DWORD [EAX+EBX*1]
	LEA	EBX,DWORD [-108+EBP]
	PUSH	EAX
	PUSH	LC47
	PUSH	EBX
	CALL	_sprintf
	PUSH	LC48
	PUSH	ESI
	CALL	_cons_putstr0
	PUSH	EBX
	PUSH	ESI
	CALL	_set_console_title
L260:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L270:
	PUSH	LC46
	PUSH	ESI
	CALL	_cons_putstr0
L272:
	PUSH	ESI
	CALL	_cons_newline
	JMP	L260
[SECTION .data]
LC49:
	DB	"read.",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_read
_cmd_read:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	DWORD [12+EBP],LC49
	POP	EBP
	JMP	_cons_putstr0
[SECTION .data]
LC50:
	DB	"-Creative Sound Blaster Series -",0x00
	RESB	1
	DB	"Sound Blaster",0x00
	RESB	20
	DB	"Sound Blaster Pro",0x00
	RESB	16
	DB	"Sound Blaster 2.0",0x00
	RESB	16
	DB	"Sound Blaster Pro 2.0",0x00
	RESB	12
	DB	"Sound Blaster Pro MCV",0x00
	RESB	12
	DB	"Sound Blaster 16",0x00
	RESB	17
LC52:
	DB	0x0A,0x0A,"The %s is detected",0x0A,0x00
LC53:
	DB	"Blaster I/O Port : %x",0x0A,0x00
LC54:
	DB	"DSP Version : %d.%d",0x0A,0x00
LC55:
	DB	"IRQ : %d",0x0A,0x00
LC56:
	DB	"DMA : %d",0x0A,0x00
LC61:
	DB	"sond.",0x0A,0x00
LC59:
	DB	"Mixer Addr : %x",0x0A,0x00
LC58:
	DB	"MIDI : %x",0x0A,0x00
LC57:
	DB	"HDMA : %d",0x0A,0x00
LC60:
	DB	"Unknown Card!",0x0A,0x00
LC51:
	DB	"Error",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_sond
_cmd_sond:
	PUSH	EBP
	MOV	ECX,238
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	MOV	ESI,LC50
	PUSH	EBX
	LEA	EDI,DWORD [-396+EBP]
	CLD
	SUB	ESP,384
	REP
	MOVSB
	CALL	_test_sb16
	INC	EAX
	JE	L282
L276:
	CMP	WORD [_CardID],6
	JA	L277
	XOR	ESI,ESI
	LEA	EDI,DWORD [-156+EBP]
	CLD
	MOV	EAX,ESI
	MOV	ECX,129
	REP
	STOSB
	MOVSX	EAX,WORD [_CardID]
	IMUL	EAX,EAX,34
	LEA	EBX,DWORD [-156+EBP]
	LEA	EAX,DWORD [-396+EAX+EBP*1]
	MOV	EDI,EBX
	PUSH	EAX
	PUSH	LC52
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	MOV	EAX,ESI
	CLD
	MOV	ECX,129
	REP
	STOSB
	MOVSX	EAX,WORD [_IOAddr]
	PUSH	EAX
	MOV	EDI,EBX
	PUSH	LC53
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,32
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	MOV	EAX,ESI
	CLD
	MOV	ECX,129
	REP
	STOSB
	MOVSX	EAX,BYTE [_ver2]
	PUSH	EAX
	MOV	EDI,EBX
	MOVSX	EAX,BYTE [_ver1]
	PUSH	EAX
	PUSH	LC54
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	ADD	ESP,32
	CLD
	MOV	EAX,ESI
	MOV	ECX,129
	REP
	STOSB
	MOVSX	EAX,WORD [_SBIntr]
	PUSH	EAX
	MOV	EDI,EBX
	PUSH	LC55
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	MOV	EAX,ESI
	CLD
	MOV	ECX,129
	REP
	STOSB
	MOVSX	EAX,WORD [_DMA]
	PUSH	EAX
	PUSH	LC56
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,32
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	POP	EAX
	POP	EDX
	MOV	DX,WORD [_HDMA]
	TEST	DX,DX
	JNE	L283
L278:
	MOV	DX,WORD [_MIDI]
	TEST	DX,DX
	JNE	L284
L279:
	MOV	DX,WORD [_Mixer]
	TEST	DX,DX
	JNE	L285
L281:
	PUSH	209
	CALL	_write_dsp
	PUSH	LC61
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L285:
	CLD
	MOV	EAX,ESI
	MOV	ECX,129
	MOV	EDI,EBX
	REP
	STOSB
	MOVSX	EAX,DX
	PUSH	EAX
	PUSH	LC59
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	ADD	ESP,20
	JMP	L281
L284:
	CLD
	MOV	EAX,ESI
	MOV	ECX,129
	MOV	EDI,EBX
	REP
	STOSB
	MOVSX	EAX,DX
	PUSH	EAX
	PUSH	LC58
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	ADD	ESP,20
	JMP	L279
L283:
	CLD
	MOV	EAX,ESI
	MOV	ECX,129
	MOV	EDI,EBX
	REP
	STOSB
	MOVSX	EAX,DX
	PUSH	EAX
	PUSH	LC57
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	ADD	ESP,20
	JMP	L278
L277:
	CLD
	XOR	EAX,EAX
	LEA	EDI,DWORD [-156+EBP]
	MOV	ECX,129
	LEA	EBX,DWORD [-156+EBP]
	REP
	STOSB
	PUSH	LC60
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	ADD	ESP,16
	JMP	L281
L282:
	PUSH	LC51
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	POP	ECX
	POP	EBX
	JMP	L276
[SECTION .data]
LC62:
	DB	"current level:%d",0x0A,0x00
LC63:
	DB	"search  task :%d",0x0A,0x00
LC64:
	DB	"current task:%s",0x0A,0x00
LC65:
	DB	"No. Command Line    lvl p  name       state      mode byte",0x0A,0x00
LC66:
	DB	"--- --------------- --- -- ---------- ---------- ---- ----",0x0A,0x00
LC70:
	DB	"%3d %-15s %3d %2d %-10s %s %4d %4d",0x0A,0x00
LC69:
	DB	"unused",0x00
LC68:
	DB	"sleeping",0x00
LC67:
	DB	"running ",0x00
[SECTION .text]
	GLOBAL	_cmd_tasklst
_cmd_tasklst:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	MOV	EBX,20
	SUB	ESP,116
	MOV	ECX,EBX
	MOV	EDX,DWORD [_taskctl]
	CLD
	MOV	EAX,DWORD [EDX]
	IMUL	EAX,EAX,408
	LEA	EAX,DWORD [8+EAX+EDX*1]
	MOV	DWORD [-116+EBP],EAX
	LEA	EAX,DWORD [-92+EBP]
	MOV	DWORD [-120+EBP],EAX
	MOV	EDI,EAX
	MOV	EAX,ESI
	REP
	STOSD
	PUSH	DWORD [EDX]
	PUSH	LC62
	LEA	EAX,DWORD [-92+EBP]
	PUSH	EAX
	LEA	EDI,DWORD [-92+EBP]
	CALL	_sprintf
	LEA	EDX,DWORD [-92+EBP]
	PUSH	EDX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	LEA	EDX,DWORD [-92+EBP]
	CLD
	MOV	EAX,ESI
	MOV	ECX,EBX
	REP
	STOSD
	MOV	EAX,DWORD [_taskctl]
	LEA	EDI,DWORD [-92+EBP]
	MOVSX	EAX,BYTE [4+EAX]
	PUSH	EAX
	PUSH	LC63
	PUSH	EDX
	CALL	_sprintf
	ADD	ESP,32
	PUSH	EDI
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	MOV	EAX,ESI
	CLD
	MOV	ECX,EBX
	REP
	STOSD
	MOV	EDX,DWORD [-116+EBP]
	LEA	EDI,DWORD [-92+EBP]
	MOV	EAX,DWORD [4+EDX]
	MOV	EAX,DWORD [8+EDX+EAX*4]
	ADD	EAX,190
	PUSH	EAX
	PUSH	LC64
	PUSH	EDI
	CALL	_sprintf
	PUSH	EDI
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	PUSH	LC65
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	ADD	ESP,36
	PUSH	LC66
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	POP	EAX
	MOV	DWORD [-112+EBP],0
	POP	EDX
L295:
	MOV	EAX,ESI
	ADD	EAX,DWORD [_taskctl]
	CMP	DWORD [4092+EAX],0
	JE	L289
	MOV	BYTE [-108+EBP],0
	CMP	DWORD [4092+EAX],2
	JE	L298
L292:
	MOV	EAX,ESI
	ADD	EAX,DWORD [_taskctl]
	CMP	DWORD [4092+EAX],1
	JE	L299
L293:
	MOV	EAX,ESI
	ADD	EAX,DWORD [_taskctl]
	CMP	DWORD [4092+EAX],0
	JE	L300
L294:
	LEA	EDX,DWORD [-92+EBP]
	XOR	EAX,EAX
	CLD
	MOV	EDI,EDX
	MOV	ECX,20
	MOV	DWORD [-128+EBP],EDX
	MOV	EBX,EDX
	REP
	STOSD
	MOV	EDX,ESI
	ADD	EDX,DWORD [_taskctl]
	LEA	ECX,DWORD [4256+EDX]
	MOVZX	EAX,BYTE [21+ECX]
	PUSH	EAX
	MOVZX	EAX,BYTE [20+ECX]
	PUSH	EAX
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	LEA	EAX,DWORD [4278+EDX]
	PUSH	EAX
	MOV	EAX,DWORD [-112+EBP]
	PUSH	DWORD [4100+EDX]
	PUSH	DWORD [4096+EDX]
	PUSH	DWORD [4272+EDX]
	INC	EAX
	PUSH	EAX
	PUSH	LC70
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,40
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	POP	EDI
	POP	EAX
L289:
	INC	DWORD [-112+EBP]
	ADD	ESI,212
	CMP	DWORD [-112+EBP],999
	JLE	L295
	PUSH	DWORD [8+EBP]
	CALL	_cons_newline
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L300:
	PUSH	LC69
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	CALL	_sprintf
	POP	EAX
	POP	EDX
	JMP	L294
L299:
	PUSH	LC68
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	CALL	_sprintf
	POP	ECX
	POP	EBX
	JMP	L293
L298:
	PUSH	LC67
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	CALL	_sprintf
	POP	EDI
	POP	EAX
	JMP	L292
[SECTION .data]
LC71:
	DB	"Information of TIMERCTL:",0x0A,0x00
LC72:
	DB	"count:%d",0x0A,0x00
LC73:
	DB	"next: %d ",0x0A,0x00
LC76:
	DB	"t0: %s %10d %10s %10d %10d",0x0A,0x00
LC77:
	DB	"name            timeout      state      flag2       data",0x0A,0x00
LC78:
	DB	"------------ ---------- ---------- ---------- ----------",0x0A,0x00
LC79:
	DB	"%12s %10u %10s %10d %10d",0x0A,0x00
LC75:
	DB	"alloc",0x00
LC74:
	DB	"using",0x00
[SECTION .text]
	GLOBAL	_cmd_timerlst
_cmd_timerlst:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-92+EBP]
	SUB	ESP,100
	PUSH	LC71
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	PUSH	DWORD [_timerctl]
	PUSH	LC72
	PUSH	EBX
	MOV	BYTE [-92+EBP],0
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	PUSH	DWORD [_timerctl+4]
	PUSH	LC73
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,40
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	MOV	EAX,DWORD [_timerctl+8]
	MOV	BYTE [-108+EBP],0
	POP	ECX
	POP	ESI
	CMP	BYTE [8+EAX],2
	JE	L316
L302:
	MOV	EAX,DWORD [_timerctl+8]
	CMP	BYTE [8+EAX],1
	JE	L317
L303:
	MOV	EAX,DWORD [_timerctl+8]
	CMP	BYTE [8+EAX],0
	JE	L318
L304:
	MOV	EAX,DWORD [_timerctl+8]
	XOR	ESI,ESI
	PUSH	DWORD [16+EAX]
	MOVSX	EDX,BYTE [9+EAX]
	PUSH	EDX
	LEA	EDX,DWORD [-108+EBP]
	PUSH	EDX
	PUSH	DWORD [4+EAX]
	ADD	EAX,20
	PUSH	EAX
	PUSH	LC76
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	ADD	ESP,36
	PUSH	LC77
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	PUSH	LC78
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	ADD	ESP,16
	MOV	DWORD [-112+EBP],499
L313:
	MOV	AL,BYTE [_timerctl+20+ESI]
	MOV	BYTE [-92+EBP],0
	TEST	AL,AL
	JE	L307
	MOV	BYTE [-108+EBP],0
	CMP	AL,2
	JE	L319
L310:
	CMP	BYTE [_timerctl+20+ESI],1
	JE	L320
L311:
	CMP	BYTE [_timerctl+20+ESI],0
	JE	L321
L312:
	CLD
	XOR	EAX,EAX
	LEA	EDI,DWORD [-92+EBP]
	MOV	ECX,20
	LEA	EBX,DWORD [-92+EBP]
	REP
	STOSD
	PUSH	DWORD [_timerctl+28+ESI]
	MOVSX	EAX,BYTE [_timerctl+21+ESI]
	PUSH	EAX
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	LEA	EAX,DWORD [_timerctl+32+ESI]
	PUSH	DWORD [_timerctl+16+ESI]
	PUSH	EAX
	PUSH	LC79
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	ADD	ESP,36
L307:
	ADD	ESI,36
	DEC	DWORD [-112+EBP]
	JNS	L313
	PUSH	DWORD [8+EBP]
	CALL	_cons_newline
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L321:
	PUSH	LC69
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	CALL	_sprintf
	POP	ECX
	POP	EBX
	JMP	L312
L320:
	PUSH	LC75
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	CALL	_sprintf
	POP	EDI
	POP	EAX
	JMP	L311
L319:
	PUSH	LC74
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	CALL	_sprintf
	POP	EAX
	POP	EDX
	JMP	L310
L318:
	PUSH	LC69
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	CALL	_sprintf
	POP	ECX
	POP	ESI
	JMP	L304
L317:
	PUSH	LC75
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	CALL	_sprintf
	POP	EDI
	POP	EAX
	JMP	L303
L316:
	PUSH	LC74
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	CALL	_sprintf
	POP	EAX
	POP	EDX
	JMP	L302
[SECTION .data]
LC80:
	DB	"Information of SHEETCTL:",0x0A,0x00
LC81:
	DB	"vram:%p",0x0A,0x00
LC82:
	DB	"map: %d ",0x0A,0x00
LC83:
	DB	"xsize: %d ",0x0A,0x00
LC84:
	DB	"ysize: %d ",0x0A,0x00
LC85:
	DB	"top: %d ",0x0A,0x00
LC86:
	DB	"No. buf        bxsize bysize vx0    vy0    taskname  ",0x0A,0x00
LC87:
	DB	"--- ---------- ------ ------ ------ ------ ----------",0x0A,0x00
LC90:
	DB	"%3d %10d %6d %6d %6d %6d %-10s%X",0x0A,0x00
LC89:
	DB	"%-10s",0x00
LC88:
	DB	"n_alloc",0x00
[SECTION .text]
	GLOBAL	_cmd_sheetlst
_cmd_sheetlst:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-92+EBP]
	SUB	ESP,100
	PUSH	LC80
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	MOV	ESI,DWORD [4068]
	MOV	BYTE [-92+EBP],0
	PUSH	DWORD [ESI]
	PUSH	LC81
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	PUSH	DWORD [4+ESI]
	PUSH	LC82
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,40
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	PUSH	DWORD [8+ESI]
	PUSH	LC83
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	PUSH	DWORD [12+ESI]
	PUSH	LC84
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,40
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	PUSH	DWORD [16+ESI]
	PUSH	LC85
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	PUSH	LC86
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	ADD	ESP,36
	PUSH	LC87
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	POP	EDI
	MOV	DWORD [-112+EBP],0
	POP	EAX
L331:
	MOV	BYTE [-92+EBP],0
	CMP	DWORD [1072+ESI],0
	JE	L325
	MOV	BYTE [-108+EBP],0
	CMP	DWORD [1072+ESI],1
	JE	L334
L328:
	CMP	DWORD [1072+ESI],0
	JE	L335
L329:
	MOV	EAX,DWORD [1080+ESI]
	TEST	EAX,EAX
	JNE	L336
L330:
	CLD
	XOR	EAX,EAX
	LEA	EDI,DWORD [-92+EBP]
	MOV	ECX,20
	LEA	EBX,DWORD [-92+EBP]
	REP
	STOSD
	LEA	EAX,DWORD [-108+EBP]
	PUSH	DWORD [1084+ESI]
	PUSH	EAX
	MOV	EAX,DWORD [-112+EBP]
	PUSH	DWORD [1060+ESI]
	PUSH	DWORD [1056+ESI]
	PUSH	DWORD [1052+ESI]
	PUSH	DWORD [1048+ESI]
	PUSH	DWORD [1044+ESI]
	INC	EAX
	PUSH	EAX
	PUSH	LC90
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,40
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	POP	EDI
	POP	EAX
L325:
	INC	DWORD [-112+EBP]
	ADD	ESI,44
	CMP	DWORD [-112+EBP],255
	JLE	L331
	PUSH	DWORD [8+EBP]
	CALL	_cons_newline
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L336:
	ADD	EAX,190
	PUSH	EAX
	LEA	EAX,DWORD [-108+EBP]
	PUSH	LC89
	PUSH	EAX
	CALL	_sprintf
	ADD	ESP,12
	JMP	L330
L335:
	PUSH	LC69
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	CALL	_sprintf
	POP	EAX
	POP	EDX
	JMP	L329
L334:
	PUSH	LC88
	LEA	EAX,DWORD [-108+EBP]
	PUSH	EAX
	CALL	_sprintf
	POP	ECX
	POP	EBX
	JMP	L328
[SECTION .data]
LC92:
	DB	"/",0x00
LC91:
	DB	"No such directory.",0x0A,0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_cd
_cmd_cd:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-268+EBP]
	SUB	ESP,256
	MOV	EAX,DWORD [12+EBP]
	PUSH	256
	ADD	EAX,3
	PUSH	EAX
	PUSH	EBX
	CALL	_file_path
	ADD	ESP,12
	CMP	BYTE [-268+EBP],0
	JE	L344
	CLD
	MOV	ESI,EBX
	MOV	EDI,LC92
	MOV	ECX,2
	REPE
	CMPSB
	SETB	AL
	SETA	DL
	SUB	DL,AL
	MOVSX	EAX,DL
	TEST	EAX,EAX
	JNE	L339
	MOV	EDI,_current_path
	MOV	ECX,64
	REP
	STOSD
	MOV	BYTE [_current_path],47
L337:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L339:
	PUSH	DWORD [16+EBP]
	PUSH	224
	PUSH	1058304
	PUSH	EBX
	CALL	_file_search2
	ADD	ESP,16
	TEST	EAX,EAX
	JE	L341
	MOV	AL,BYTE [11+EAX]
	AND	EAX,16
	TEST	AL,AL
	JNE	L345
L341:
	PUSH	LC91
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	POP	EAX
	POP	EDX
	JMP	L337
L345:
	CLD
	XOR	EAX,EAX
	MOV	EDI,_current_path
	MOV	ECX,64
	REP
	STOSD
	PUSH	EBX
	MOV	EDI,_current_path
	PUSH	_current_path
	CALL	_strcpy
	POP	EBX
	OR	EDX,-1
	XOR	EAX,EAX
	CLD
	MOV	ECX,EDX
	POP	ESI
	REPNE
	SCASB
	NOT	ECX
	CMP	BYTE [_current_path-2+ECX],47
	JE	L337
	MOV	EDI,_current_path
	MOV	ECX,EDX
	REPNE
	SCASB
	NOT	ECX
	MOV	BYTE [_current_path-1+ECX],47
	JMP	L337
L344:
	PUSH	LC91
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	JMP	L337
	GLOBAL	_cmd_md
_cmd_md:
	PUSH	EBP
	MOV	EBP,ESP
	POP	EBP
	RET
	GLOBAL	_cmd_rd
_cmd_rd:
	PUSH	EBP
	MOV	EBP,ESP
	POP	EBP
	RET
	GLOBAL	_cmd_del
_cmd_del:
	PUSH	EBP
	MOV	EBP,ESP
	POP	EBP
	RET
	GLOBAL	_cmd_pwd
_cmd_pwd:
	PUSH	EBP
	XOR	EAX,EAX
	MOV	EBP,ESP
	MOV	ECX,64
	PUSH	EDI
	PUSH	EBX
	LEA	EDI,DWORD [-264+EBP]
	CLD
	SUB	ESP,256
	MOV	EBX,DWORD [8+EBP]
	REP
	STOSD
	PUSH	255
	LEA	EDI,DWORD [-264+EBP]
	PUSH	_current_path
	PUSH	EDI
	CALL	_strncpy
	ADD	ESP,12
	CLD
	XOR	EAX,EAX
	OR	ECX,-1
	REPNE
	SCASB
	NOT	ECX
	LEA	EAX,DWORD [-1+ECX]
	CMP	EAX,1
	JLE	L350
	MOV	BYTE [-265+EBP+EAX*1],10
L351:
	LEA	EAX,DWORD [-264+EBP]
	PUSH	EAX
	PUSH	EBX
	CALL	_cons_putstr0
	PUSH	LC48
	PUSH	EBX
	CALL	_cons_putstr0
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	EDI
	POP	EBP
	RET
L350:
	MOV	BYTE [-263+EBP],10
	JMP	L351
[SECTION .data]
LC93:
	DB	"Hari",0x00
LC94:
	DB	".hrb file format error.",0x0A,0x00
[SECTION .text]
	GLOBAL	_cmd_app
_cmd_app:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	XOR	ESI,ESI
	PUSH	EBX
	SUB	ESP,52
	MOV	EBX,DWORD [16+EBP]
	CALL	_task_now
	MOV	DWORD [-56+EBP],EAX
L358:
	MOV	AL,BYTE [ESI+EBX*1]
	CMP	AL,32
	JLE	L354
	MOV	BYTE [-44+EBP+ESI*1],AL
	INC	ESI
	CMP	ESI,12
	JLE	L358
L354:
	PUSH	224
	LEA	EBX,DWORD [-44+EBP]
	PUSH	1058304
	PUSH	EBX
	MOV	BYTE [-44+EBP+ESI*1],0
	CALL	_file_search
	ADD	ESP,12
	MOV	EDX,EAX
	TEST	EAX,EAX
	JE	L388
L387:
	MOV	EAX,DWORD [28+EDX]
	MOV	DWORD [-48+EBP],EAX
	LEA	EAX,DWORD [-48+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	EAX
	MOVZX	EAX,WORD [26+EDX]
	PUSH	EAX
	CALL	_file_loadfile2
	ADD	ESP,12
	CMP	DWORD [-48+EBP],35
	MOV	DWORD [-52+EBP],EAX
	JLE	L361
	MOV	ESI,EAX
	MOV	EDI,LC93
	CLD
	ADD	ESI,4
	MOV	ECX,4
	REPE
	CMPSB
	JNE	L361
	MOV	EAX,DWORD [-52+EBP]
	CMP	BYTE [EAX],0
	JE	L389
L361:
	PUSH	LC94
	PUSH	DWORD [8+EBP]
	CALL	_cons_putstr0
	POP	EDI
	POP	EAX
L379:
	PUSH	DWORD [-48+EBP]
	PUSH	DWORD [-52+EBP]
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	DWORD [8+EBP]
	CALL	_cons_newline
	MOV	EAX,1
L352:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L389:
	MOV	EDX,DWORD [EAX]
	MOV	EAX,DWORD [12+EAX]
	MOV	DWORD [-60+EBP],EDX
	MOV	DWORD [-64+EBP],EAX
	MOV	EDX,DWORD [-52+EBP]
	MOV	EBX,DWORD [16+EDX]
	MOV	ESI,DWORD [20+EDX]
	PUSH	DWORD [-60+EBP]
	PUSH	3932160
	CALL	_memman_alloc_4k
	MOV	EDI,EAX
	MOV	EAX,DWORD [-56+EBP]
	MOV	DWORD [168+EAX],EDI
	MOV	EAX,DWORD [-48+EBP]
	PUSH	16634
	DEC	EAX
	PUSH	DWORD [-52+EBP]
	PUSH	EAX
	MOV	EAX,DWORD [-56+EBP]
	ADD	EAX,148
	PUSH	EAX
	CALL	_set_segmdesc
	MOV	EAX,DWORD [-60+EBP]
	PUSH	16626
	DEC	EAX
	PUSH	EDI
	PUSH	EAX
	MOV	EAX,DWORD [-56+EBP]
	ADD	EAX,156
	PUSH	EAX
	CALL	_set_segmdesc
	ADD	ESP,40
	TEST	EBX,EBX
	JLE	L382
	MOV	EAX,DWORD [-52+EBP]
	MOV	ECX,DWORD [-64+EBP]
	ADD	ECX,EDI
	LEA	EDX,DWORD [EAX+ESI*1]
	MOV	ESI,EBX
L366:
	MOV	AL,BYTE [EDX]
	INC	EDX
	MOV	BYTE [ECX],AL
	INC	ECX
	DEC	ESI
	JNE	L366
L382:
	MOV	EAX,DWORD [-56+EBP]
	MOV	ESI,255
	ADD	EAX,48
	PUSH	EAX
	PUSH	12
	PUSH	DWORD [-64+EBP]
	PUSH	4
	PUSH	27
	CALL	_start_app
	MOV	EBX,DWORD [4068]
	ADD	ESP,20
	ADD	EBX,1044
L372:
	MOV	EAX,DWORD [28+EBX]
	AND	EAX,17
	CMP	EAX,17
	JE	L390
L369:
	ADD	EBX,44
	DEC	ESI
	JNS	L372
	XOR	EBX,EBX
	MOV	ESI,7
L378:
	MOV	EDX,DWORD [-56+EBP]
	MOV	EAX,DWORD [176+EDX]
	CMP	DWORD [EAX+EBX*1],0
	JNE	L391
L375:
	ADD	EBX,28
	DEC	ESI
	JNS	L378
	MOV	EAX,DWORD [-56+EBP]
	ADD	EAX,16
	PUSH	EAX
	CALL	_timer_cancelall
	PUSH	DWORD [-60+EBP]
	PUSH	EDI
	PUSH	3932160
	CALL	_memman_free_4k
	ADD	ESP,16
	MOV	EAX,DWORD [-56+EBP]
	MOV	BYTE [189+EAX],0
	JMP	L379
L391:
	PUSH	DWORD [4+EAX+EBX*1]
	MOV	EAX,DWORD [176+EDX]
	PUSH	DWORD [EAX+EBX*1]
	PUSH	3932160
	CALL	_memman_free_4k
	ADD	ESP,12
	MOV	EDX,DWORD [-56+EBP]
	MOV	EAX,DWORD [176+EDX]
	MOV	DWORD [EAX+EBX*1],0
	JMP	L375
L390:
	MOV	EDX,DWORD [-56+EBP]
	CMP	DWORD [36+EBX],EDX
	JNE	L369
	PUSH	EBX
	CALL	_sheet_free
	POP	EAX
	JMP	L369
L388:
	CMP	BYTE [-45+EBP+ESI*1],46
	JE	L359
	PUSH	224
	PUSH	1058304
	PUSH	EBX
	MOV	BYTE [-44+EBP+ESI*1],46
	MOV	BYTE [-43+EBP+ESI*1],72
	MOV	BYTE [-42+EBP+ESI*1],82
	MOV	BYTE [-41+EBP+ESI*1],66
	MOV	BYTE [-40+EBP+ESI*1],0
	CALL	_file_search
	ADD	ESP,12
	MOV	EDX,EAX
L359:
	TEST	EDX,EDX
	JNE	L387
	XOR	EAX,EAX
	JMP	L352
[SECTION .data]
LC99:
	DB	"api",0x00
LC95:
	DB	"INT 0x40 5<start>",0x0A,0x00
LC96:
	DB	"INT 0x40 5[make_window8]<start>",0x0A,0x00
LC97:
	DB	"INT 0x40 5[make_window8]< end >",0x0A,0x00
LC98:
	DB	"INT 0x40 5< end >",0x0A,0x00
[SECTION .text]
	GLOBAL	_hrb_api
_hrb_api:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,20
	MOV	EBX,DWORD [28+EBP]
	MOV	ESI,DWORD [16+EBP]
	CALL	_task_now
	CMP	EBX,1
	MOV	ECX,DWORD [4068]
	MOV	DWORD [-16+EBP],EAX
	MOV	DWORD [-24+EBP],ECX
	MOV	EAX,DWORD [168+EAX]
	MOV	EDX,DWORD [-16+EBP]
	MOV	DWORD [-20+EBP],EAX
	MOV	EAX,DWORD [4076]
	MOV	EDI,DWORD [164+EDX]
	MOV	DWORD [-28+EBP],EAX
	JE	L509
	CMP	EBX,2
	JE	L510
	CMP	EBX,3
	JE	L511
	CMP	EBX,4
	JE	L512
	CMP	EBX,5
	JE	L513
	CMP	EBX,6
	JE	L514
	CMP	EBX,7
	JE	L515
	CMP	EBX,8
	JE	L516
	CMP	EBX,9
	JE	L517
	CMP	EBX,10
	JE	L518
	CMP	EBX,11
	JE	L519
	CMP	EBX,12
	JE	L520
	CMP	EBX,13
	JE	L521
	CMP	EBX,14
	JE	L522
	CMP	EBX,15
	JE	L429
	CMP	EBX,16
	JE	L523
	CMP	EBX,17
	JE	L524
	CMP	EBX,18
	JE	L525
	CMP	EBX,19
	JE	L526
	CMP	EBX,20
	JE	L527
	CMP	EBX,21
	JE	L528
	CMP	EBX,22
	JE	L529
	CMP	EBX,23
	JE	L530
	CMP	EBX,24
	JE	L531
	CMP	EBX,25
	JE	L532
	CMP	EBX,26
	JE	L533
	CMP	EBX,27
	JE	L534
	CMP	EBX,4101
	JE	L535
L394:
	XOR	EAX,EAX
L392:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L535:
	MOV	EBX,DWORD [-20+EBP]
	PUSH	0
	ADD	EBX,DWORD [36+EBP]
	CALL	_rtc_get
	MOV	DWORD [EBX],EAX
	PUSH	1
	CALL	_rtc_get
	MOV	DWORD [4+EBX],EAX
	PUSH	2
	CALL	_rtc_get
	MOV	DWORD [8+EBX],EAX
	PUSH	3
	CALL	_rtc_get
	MOV	DWORD [12+EBX],EAX
	PUSH	4
	CALL	_rtc_get
	MOV	DWORD [16+EBX],EAX
	PUSH	5
	CALL	_rtc_get
	ADD	ESP,24
	MOV	DWORD [20+EBX],EAX
	JMP	L394
L534:
	MOV	EBX,DWORD [-16+EBP]
	MOVZX	EAX,BYTE [188+EBX]
L502:
	MOV	DWORD [68+EBP],EAX
	JMP	L394
L533:
	XOR	ESI,ESI
L490:
	MOV	ECX,DWORD [-16+EBP]
	MOV	EDX,DWORD [24+EBP]
	ADD	EDX,DWORD [-20+EBP]
	MOV	EAX,DWORD [184+ECX]
	MOV	AL,BYTE [ESI+EAX*1]
	MOV	BYTE [ESI+EDX*1],AL
	MOV	EAX,DWORD [184+ECX]
	CMP	BYTE [ESI+EAX*1],0
	JE	L491
	CMP	ESI,DWORD [32+EBP]
	JGE	L491
	INC	ESI
	JMP	L490
L491:
	MOV	DWORD [68+EBP],ESI
	JMP	L394
L532:
	XOR	ESI,ESI
	MOV	EBX,DWORD [36+EBP]
	CMP	ESI,DWORD [32+EBP]
	JGE	L491
L487:
	MOV	ECX,DWORD [8+EBX]
	CMP	ECX,DWORD [4+EBX]
	JE	L491
	MOV	EAX,DWORD [24+EBP]
	MOV	EDX,DWORD [EBX]
	ADD	EAX,DWORD [-20+EBP]
	MOV	DL,BYTE [ECX+EDX*1]
	MOV	BYTE [ESI+EAX*1],DL
	INC	ESI
	INC	DWORD [8+EBX]
	CMP	ESI,DWORD [32+EBP]
	JL	L487
	JMP	L491
L531:
	MOV	EBX,DWORD [36+EBP]
	CMP	DWORD [32+EBP],0
	JNE	L475
	MOV	EAX,DWORD [4+EBX]
	JMP	L502
L475:
	CMP	DWORD [32+EBP],1
	JE	L536
	CMP	DWORD [32+EBP],2
	JNE	L394
	MOV	EAX,DWORD [8+EBX]
	SUB	EAX,DWORD [4+EBX]
	JMP	L502
L536:
	MOV	EAX,DWORD [8+EBX]
	JMP	L502
L530:
	MOV	EBX,DWORD [36+EBP]
	CMP	DWORD [32+EBP],0
	JE	L501
	CMP	DWORD [32+EBP],1
	JE	L537
	CMP	DWORD [32+EBP],2
	JE	L538
L467:
	CMP	DWORD [8+EBX],0
	JS	L539
L471:
	MOV	EAX,DWORD [4+EBX]
	CMP	DWORD [8+EBX],EAX
	JLE	L394
	MOV	DWORD [8+EBX],EAX
	JMP	L394
L539:
	MOV	DWORD [8+EBX],0
	JMP	L471
L538:
	MOV	EAX,DWORD [4+EBX]
	ADD	DWORD [24+EBP],EAX
L501:
	MOV	EDX,DWORD [24+EBP]
	MOV	DWORD [8+EBX],EDX
	JMP	L467
L537:
	MOV	ECX,DWORD [24+EBP]
	ADD	DWORD [8+EBX],ECX
	JMP	L467
L529:
	MOV	EBX,DWORD [36+EBP]
	PUSH	DWORD [4+EBX]
	PUSH	DWORD [EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	MOV	DWORD [EBX],0
L503:
	ADD	ESP,12
	JMP	L394
L528:
	XOR	ESI,ESI
	XOR	EAX,EAX
L459:
	MOV	ECX,DWORD [-16+EBP]
	MOV	EDX,DWORD [176+ECX]
	CMP	DWORD [EDX+EAX*1],0
	JE	L455
	INC	ESI
	ADD	EAX,28
	CMP	ESI,7
	JLE	L459
L455:
	IMUL	EAX,ESI,28
	MOV	DWORD [68+EBP],0
	LEA	EBX,DWORD [EAX+EDX*1]
	CMP	ESI,7
	JG	L394
	MOV	EAX,DWORD [24+EBP]
	PUSH	224
	ADD	EAX,DWORD [-20+EBP]
	PUSH	1058304
	PUSH	EAX
	CALL	_file_search
	ADD	ESP,12
	MOV	EDX,EAX
	TEST	EAX,EAX
	JE	L394
	MOV	DWORD [68+EBP],EBX
	MOV	EAX,DWORD [28+EAX]
	MOV	DWORD [4+EBX],EAX
	MOV	EAX,DWORD [-16+EBP]
	MOV	DWORD [8+EBX],0
	PUSH	DWORD [180+EAX]
	LEA	EAX,DWORD [4+EBX]
	PUSH	EAX
	MOVZX	EAX,WORD [26+EDX]
	PUSH	EAX
	CALL	_file_loadfile2
	MOV	DWORD [EBX],EAX
	JMP	L503
L527:
	MOV	EDX,DWORD [36+EBP]
	TEST	EDX,EDX
	JNE	L450
	PUSH	97
	CALL	_io_in8
	MOV	ESI,EAX
	AND	ESI,13
	PUSH	ESI
	PUSH	97
	CALL	_io_out8
	JMP	L503
L450:
	MOV	ECX,1193180000
	MOV	EBX,EDX
	MOV	EAX,ECX
	PUSH	182
	CDQ
	IDIV	EBX
	PUSH	67
	MOV	ESI,EAX
	CALL	_io_out8
	MOV	EAX,ESI
	SAR	ESI,8
	AND	EAX,255
	PUSH	EAX
	PUSH	66
	CALL	_io_out8
	PUSH	ESI
	PUSH	66
	CALL	_io_out8
	PUSH	97
	CALL	_io_in8
	MOV	ESI,EAX
	OR	ESI,3
	AND	ESI,15
	PUSH	ESI
	PUSH	97
	CALL	_io_out8
	ADD	ESP,36
	JMP	L394
L526:
	PUSH	DWORD [24+EBP]
	CALL	_timer_free
L504:
	POP	EAX
	JMP	L394
L525:
	PUSH	DWORD [36+EBP]
	PUSH	DWORD [24+EBP]
	CALL	_timer_settime
L506:
	POP	EAX
	POP	EDX
	JMP	L394
L524:
	MOV	EAX,DWORD [36+EBP]
	ADD	EAX,256
	PUSH	EAX
	MOV	EAX,DWORD [-16+EBP]
	ADD	EAX,16
	PUSH	EAX
	PUSH	DWORD [24+EBP]
	CALL	_timer_init
	JMP	L503
L523:
	PUSH	LC99
	CALL	_timer_alloc
	MOV	DWORD [68+EBP],EAX
	MOV	BYTE [9+EAX],1
	JMP	L504
L429:
	CALL	_io_cli
	MOV	EAX,DWORD [-16+EBP]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_status
	POP	ESI
	TEST	EAX,EAX
	JNE	L432
	CMP	DWORD [36+EBP],0
	JE	L433
	PUSH	DWORD [-16+EBP]
	CALL	_task_sleep
	POP	EBX
L432:
	MOV	EBX,DWORD [-16+EBP]
	ADD	EBX,16
	PUSH	EBX
	CALL	_fifo32_get
	MOV	ESI,EAX
	CALL	_io_sti
	POP	ECX
	CMP	ESI,1
	JLE	L540
L435:
	CMP	ESI,2
	JE	L541
L436:
	CMP	ESI,3
	JE	L542
L437:
	CMP	ESI,4
	JE	L543
L438:
	LEA	EAX,DWORD [-256+ESI]
	CMP	ESI,255
	JG	L502
	JMP	L429
L543:
	PUSH	DWORD [16+EDI]
	CALL	_timer_cancel
	CALL	_io_cli
	MOV	EAX,DWORD [EDI]
	SUB	EAX,DWORD [-24+EBP]
	SUB	EAX,1044
	SAR	EAX,2
	IMUL	EAX,EAX,-1171354717
	ADD	EAX,2024
	PUSH	EAX
	PUSH	DWORD [-28+EBP]
	CALL	_fifo32_put
	MOV	DWORD [EDI],0
	CALL	_io_sti
	ADD	ESP,12
	JMP	L438
L542:
	MOV	DWORD [12+EDI],-1
	JMP	L437
L541:
	MOV	DWORD [12+EDI],7
	JMP	L436
L540:
	CMP	DWORD [EDI],0
	JE	L435
	PUSH	1
	PUSH	EBX
	PUSH	DWORD [16+EDI]
	CALL	_timer_init
	PUSH	50
	PUSH	DWORD [16+EDI]
	CALL	_timer_settime
	ADD	ESP,20
	JMP	L435
L433:
	CALL	_io_sti
	MOV	DWORD [68+EBP],-1
	JMP	L394
L522:
	PUSH	DWORD [24+EBP]
	CALL	_sheet_free
	JMP	L504
L521:
	MOVZX	EAX,WORD [_table_16_65536+ESI+ESI*1]
	PUSH	EAX
	MOV	EDI,DWORD [24+EBP]
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBP]
	PUSH	DWORD [36+EBP]
	AND	EDI,-2
	PUSH	EDI
	CALL	_hrb_api_linewin
	ADD	ESP,24
	TEST	DWORD [24+EBP],1
	JNE	L394
	MOV	EAX,DWORD [36+EBP]
	CMP	EAX,DWORD [12+EBP]
	JLE	L423
	MOV	EDX,DWORD [12+EBP]
	MOV	DWORD [12+EBP],EAX
	MOV	DWORD [36+EBP],EDX
L423:
	MOV	ECX,DWORD [8+EBP]
	CMP	DWORD [32+EBP],ECX
	JLE	L424
	MOV	ESI,DWORD [32+EBP]
	MOV	DWORD [32+EBP],ECX
	MOV	DWORD [8+EBP],ESI
L424:
	MOV	EAX,DWORD [8+EBP]
	INC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	INC	EAX
	PUSH	EAX
	PUSH	DWORD [32+EBP]
	PUSH	DWORD [36+EBP]
L508:
	PUSH	EDI
L505:
	CALL	_sheet_refresh
	ADD	ESP,20
	JMP	L394
L520:
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBP]
	PUSH	DWORD [36+EBP]
	PUSH	DWORD [24+EBP]
	JMP	L505
L519:
	MOV	EDI,DWORD [24+EBP]
	MOV	EDX,DWORD [8+EBP]
	AND	EDI,-2
	MOV	EAX,DWORD [36+EBP]
	IMUL	EDX,DWORD [4+EDI]
	MOV	AX,WORD [_table_16_65536+EAX+EAX*1]
	ADD	EDX,DWORD [12+EBP]
	MOV	ECX,DWORD [EDI]
	TEST	DWORD [24+EBP],1
	MOV	WORD [ECX+EDX*2],AX
	JNE	L394
	MOV	EAX,DWORD [8+EBP]
	INC	EAX
	PUSH	EAX
	MOV	EAX,DWORD [12+EBP]
	INC	EAX
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	JMP	L508
L518:
	MOV	EAX,DWORD [32+EBP]
	ADD	EAX,15
	AND	EAX,-16
	PUSH	EAX
	MOV	EAX,DWORD [24+EBP]
	ADD	EAX,DWORD [-20+EBP]
	PUSH	DWORD [36+EBP]
	PUSH	EAX
	CALL	_memman_free
	JMP	L503
L517:
	MOV	EAX,DWORD [32+EBP]
	ADD	EAX,15
	AND	EAX,-16
	PUSH	EAX
	MOV	EAX,DWORD [24+EBP]
	ADD	EAX,DWORD [-20+EBP]
	PUSH	EAX
	CALL	_memman_alloc
	MOV	DWORD [68+EBP],EAX
	JMP	L506
L516:
	MOV	EBX,DWORD [24+EBP]
	ADD	EBX,DWORD [-20+EBP]
	PUSH	EBX
	CALL	_memman_init
	AND	DWORD [32+EBP],-16
	PUSH	DWORD [32+EBP]
	PUSH	DWORD [36+EBP]
	PUSH	EBX
	CALL	_memman_free
L507:
	ADD	ESP,16
	JMP	L394
L515:
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [32+EBP]
	MOV	EDI,DWORD [24+EBP]
	MOV	EBX,ESI
	PUSH	DWORD [36+EBP]
	AND	EDI,-2
	MOVZX	EAX,BL
	PUSH	EAX
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_boxfill8
	ADD	ESP,28
	TEST	DWORD [24+EBP],1
	JNE	L394
	JMP	L424
L514:
	MOV	EBX,DWORD [-20+EBP]
	MOV	EDI,DWORD [24+EBP]
	AND	EDI,-2
	LEA	EAX,DWORD [EBX+ESI*1]
	PUSH	EAX
	PUSH	1
	MOVZX	EAX,BYTE [36+EBP]
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	DWORD [4+EDI]
	PUSH	DWORD [EDI]
	CALL	_putfonts8_asc
	ADD	ESP,28
	TEST	DWORD [24+EBP],1
	JNE	L394
	MOV	ECX,DWORD [12+EBP]
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [32+EBP]
	ADD	EAX,16
	PUSH	EAX
	LEA	EAX,DWORD [ECX+EDX*8]
	PUSH	EAX
	PUSH	DWORD [8+EBP]
	PUSH	ECX
	JMP	L508
L513:
	PUSH	1
	PUSH	LC95
	CALL	_dbg_putstr0
	PUSH	DWORD [-24+EBP]
	CALL	_sheet_alloc
	ADD	ESP,12
	MOV	EDX,DWORD [-16+EBP]
	MOV	EDI,EAX
	MOV	DWORD [36+EAX],EDX
	MOV	EDX,DWORD [28+EAX]
	MOV	EAX,EDX
	OR	EAX,16
	MOV	DWORD [28+EDI],EAX
	CMP	DWORD [36+EBP],-1
	JE	L402
	OR	EDX,80
	MOV	DWORD [28+EDI],EDX
L402:
	PUSH	DWORD [36+EBP]
	MOV	ESI,DWORD [24+EBP]
	PUSH	DWORD [8+EBP]
	ADD	ESI,DWORD [-20+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	ESI
	PUSH	EDI
	CALL	_sheet_setbuf
	PUSH	1
	PUSH	LC96
	CALL	_dbg_putstr0
	MOV	EBX,DWORD [32+EBP]
	ADD	EBX,DWORD [-20+EBP]
	PUSH	1
	PUSH	EBX
	CALL	_dbg_putstr0
	ADD	ESP,36
	PUSH	0
	PUSH	EBX
	MOV	EBX,2
	PUSH	DWORD [8+EBP]
	PUSH	DWORD [12+EBP]
	PUSH	ESI
	CALL	_make_window8
	PUSH	1
	PUSH	LC97
	CALL	_dbg_putstr0
	MOV	ECX,DWORD [-24+EBP]
	MOV	EAX,DWORD [12+ECX]
	SUB	EAX,DWORD [8+EBP]
	CDQ
	IDIV	EBX
	PUSH	EAX
	MOV	EAX,DWORD [8+ECX]
	SUB	EAX,DWORD [12+EBP]
	CDQ
	IDIV	EBX
	AND	EAX,-4
	PUSH	EAX
	PUSH	EDI
	CALL	_sheet_slide
	MOV	ECX,DWORD [-24+EBP]
	ADD	ESP,40
	PUSH	DWORD [16+ECX]
	PUSH	EDI
	CALL	_sheet_updown
	PUSH	1
	PUSH	LC98
	MOV	DWORD [68+EBP],EDI
	CALL	_dbg_putstr0
	JMP	L507
L512:
	MOV	EAX,DWORD [-16+EBP]
	ADD	EAX,48
	JMP	L392
L511:
	MOV	EAX,DWORD [24+EBP]
	ADD	EAX,DWORD [-20+EBP]
	PUSH	DWORD [32+EBP]
	PUSH	EAX
	PUSH	EDI
	CALL	_cons_putstr1
	JMP	L503
L510:
	MOV	EAX,DWORD [24+EBP]
	ADD	EAX,DWORD [-20+EBP]
	PUSH	EAX
	PUSH	EDI
	CALL	_cons_putstr0
	JMP	L506
L509:
	PUSH	1
	MOVZX	EAX,BYTE [36+EBP]
	PUSH	EAX
	PUSH	EDI
	CALL	_cons_putchar
	JMP	L503
[SECTION .data]
LC100:
	DB	0x0A,"INT 0C :",0x0A," Stack Exception.",0x0A,0x00
LC101:
	DB	"EIP = %08X",0x0A,0x00
[SECTION .text]
	GLOBAL	_inthandler0c
_inthandler0c:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-44+EBP]
	SUB	ESP,32
	CALL	_task_now
	MOV	ESI,EAX
	MOV	EDI,DWORD [164+EAX]
	ADD	ESI,48
	PUSH	LC100
	PUSH	EDI
	CALL	_cons_putstr0
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [44+EAX]
	PUSH	LC101
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	EDI
	CALL	_cons_putstr0
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	MOV	EAX,ESI
	POP	ESI
	POP	EDI
	POP	EBP
	RET
[SECTION .data]
LC102:
	DB	0x0A,"INT 0D :",0x0A," General Protected Exception.",0x0A,0x00
[SECTION .text]
	GLOBAL	_inthandler0d
_inthandler0d:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-44+EBP]
	SUB	ESP,32
	CALL	_task_now
	MOV	ESI,EAX
	MOV	EDI,DWORD [164+EAX]
	ADD	ESI,48
	PUSH	LC102
	PUSH	EDI
	CALL	_cons_putstr0
	MOV	EAX,DWORD [8+EBP]
	PUSH	DWORD [44+EAX]
	PUSH	LC101
	PUSH	EBX
	CALL	_sprintf
	PUSH	EBX
	PUSH	EDI
	CALL	_cons_putstr0
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	MOV	EAX,ESI
	POP	ESI
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_hrb_api_linewin
_hrb_api_linewin:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	EDI,DWORD [12+EBP]
	MOV	EAX,DWORD [20+EBP]
	MOV	ECX,EDI
	MOV	EDX,DWORD [24+EBP]
	SAL	ECX,10
	MOV	ESI,EDX
	MOV	DWORD [-16+EBP],ECX
	MOV	EBX,EAX
	MOV	ECX,DWORD [16+EBP]
	SUB	ESI,DWORD [16+EBP]
	SAL	ECX,10
	SUB	EBX,EDI
	MOV	DWORD [-20+EBP],ECX
	JS	L568
L547:
	TEST	ESI,ESI
	JS	L569
L548:
	CMP	EBX,ESI
	JL	L549
	LEA	ECX,DWORD [1+EBX]
	CMP	EDI,EAX
	MOV	EBX,-1024
	JG	L551
	MOV	EBX,1024
L551:
	CMP	DWORD [16+EBP],EDX
	JG	L552
	SUB	EDX,DWORD [16+EBP]
	INC	EDX
L567:
	SAL	EDX,10
	MOV	EAX,EDX
	CDQ
	IDIV	ECX
	MOV	ESI,EAX
L554:
	TEST	ECX,ECX
	JLE	L565
	MOV	EDX,DWORD [8+EBP]
	MOV	EAX,DWORD [8+EBP]
	MOV	EDX,DWORD [4+EDX]
	MOV	EDI,DWORD [EAX]
	MOV	DWORD [-24+EBP],EDX
L563:
	MOV	EAX,DWORD [-20+EBP]
	MOV	EDX,DWORD [-16+EBP]
	SAR	EAX,10
	ADD	DWORD [-20+EBP],ESI
	SAR	EDX,10
	ADD	DWORD [-16+EBP],EBX
	IMUL	EAX,DWORD [-24+EBP]
	ADD	EAX,EDX
	DEC	ECX
	MOV	EDX,DWORD [28+EBP]
	MOV	WORD [EDI+EAX*2],DX
	JNE	L563
L565:
	ADD	ESP,12
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L552:
	SUB	EDX,DWORD [16+EBP]
	DEC	EDX
	JMP	L567
L549:
	LEA	ECX,DWORD [1+ESI]
	CMP	DWORD [16+EBP],EDX
	MOV	ESI,-1024
	JG	L556
	MOV	ESI,1024
L556:
	CMP	EDI,EAX
	JG	L557
	SUB	EAX,EDI
	LEA	EDX,DWORD [1+EAX]
L566:
	SAL	EDX,10
	MOV	EAX,EDX
	CDQ
	IDIV	ECX
	MOV	EBX,EAX
	JMP	L554
L557:
	SUB	EAX,EDI
	LEA	EDX,DWORD [-1+EAX]
	JMP	L566
L569:
	NEG	ESI
	JMP	L548
L568:
	NEG	EBX
	JMP	L547
	GLOBAL	_set_console_title
_set_console_title:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	EAX,DWORD [EAX]
	MOV	DWORD [8+EBP],EAX
	POP	EBP
	JMP	_set_title
