[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_task_now
	EXTERN	_timer_alloc
	EXTERN	_timer_init
	EXTERN	_memman_alloc_4k
	EXTERN	_fifo32_init
	EXTERN	_io_out8
	EXTERN	_io_cli
	EXTERN	_fifo32_status
	EXTERN	_fifo32_get
	EXTERN	_io_sti
	EXTERN	_timer_cancel
	EXTERN	_inout
	EXTERN	_fifo32_put
	EXTERN	_timer_settime
	EXTERN	_task_sleep
	EXTERN	_sprintf
	EXTERN	_dbg_putstr0
	EXTERN	_timer_free
	EXTERN	_i_sta
	EXTERN	_io_in8
[FILE "fdc.c"]
[SECTION .data]
LC0:
	DB	"fdc",0x00
[SECTION .text]
	GLOBAL	_fdc_task
_fdc_task:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,12
	MOV	DWORD [-24+EBP],0
	CALL	_task_now
	PUSH	LC0
	MOV	ESI,EAX
	CALL	_timer_alloc
	MOV	EDI,EAX
	PUSH	2880
	LEA	EAX,DWORD [16+ESI]
	PUSH	EAX
	PUSH	EDI
	CALL	_timer_init
	PUSH	16384
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	ESI
	MOV	DWORD [_fdc_fbuf],EAX
	PUSH	EAX
	PUSH	4096
	PUSH	_fdc_fifo
	CALL	_fifo32_init
	LEA	EAX,DWORD [-20+EBP]
	ADD	ESP,40
	PUSH	EAX
	CALL	_fdc_init
	PUSH	12
	PUSH	1010
	CALL	_io_out8
L14:
	ADD	ESP,12
L2:
	LEA	EBX,DWORD [16+ESI]
	CALL	_io_cli
	PUSH	EBX
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L15
	PUSH	EBX
	CALL	_fifo32_get
	MOV	EBX,EAX
	CALL	_io_sti
	POP	EAX
	CMP	EBX,2880
	JE	L16
	PUSH	EDI
	CALL	_timer_cancel
	LEA	EDX,DWORD [-24+EBP]
	PUSH	EDX
	MOV	EAX,EBX
	SAR	EBX,12
	LEA	EDX,DWORD [-20+EBP]
	PUSH	EDX
	AND	EAX,4095
	PUSH	EAX
	PUSH	EBX
	CALL	_fdc_readwrite
	ADD	ESP,20
	MOV	EBX,EAX
	CMP	EAX,100
	JE	L11
	PUSH	EAX
	CALL	_put_retcode
	POP	ECX
L12:
	MOV	EAX,255
	SUB	EAX,EBX
	PUSH	EAX
	MOV	EAX,DWORD [_inout]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
L13:
	POP	EAX
	POP	EDX
	JMP	L2
L11:
	XOR	EBX,EBX
	JMP	L12
L16:
	PUSH	12
	PUSH	1010
	CALL	_io_out8
	MOV	DWORD [-24+EBP],0
	JMP	L13
L15:
	CMP	BYTE [-13+EBP],0
	JG	L17
	PUSH	300
	PUSH	EDI
	CALL	_timer_settime
	PUSH	ESI
	CALL	_task_sleep
	CALL	_io_sti
	JMP	L14
L17:
	LEA	EAX,DWORD [-24+EBP]
	PUSH	EAX
	LEA	EAX,DWORD [-20+EBP]
	PUSH	EAX
	PUSH	2880
	PUSH	DWORD [-20+EBP]
	CALL	_fdc_readwrite
	MOV	EBX,EAX
	PUSH	EAX
	CALL	_put_retcode
	MOV	EAX,255
	SUB	EAX,EBX
	PUSH	EAX
	MOV	EAX,DWORD [_inout]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	ADD	ESP,28
	JMP	L2
	GLOBAL	_fdc_init
_fdc_init:
	PUSH	EBP
	MOV	EBP,ESP
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [EAX],0
	MOV	BYTE [4+EAX],-1
	MOV	BYTE [5+EAX],-1
	MOV	BYTE [6+EAX],0
	MOV	BYTE [7+EAX],0
	PUSH	192
	PUSH	214
	CALL	_io_out8
	PUSH	0
	PUSH	192
	CALL	_io_out8
	PUSH	6
	PUSH	10
	CALL	_io_out8
	LEAVE
	RET
	GLOBAL	_fdc_setread
_fdc_setread:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	6
	PUSH	11
	CALL	_io_out8
	PUSH	255
	PUSH	5
	CALL	_io_out8
	MOV	EAX,DWORD [8+EBP]
	LEA	EAX,DWORD [-1+EAX+EAX*1]
	PUSH	EAX
	PUSH	5
	CALL	_io_out8
	PUSH	0
	PUSH	4
	CALL	_io_out8
	ADD	ESP,32
	PUSH	128
	PUSH	4
	CALL	_io_out8
	PUSH	38
	PUSH	129
	CALL	_io_out8
	PUSH	2
	PUSH	10
	CALL	_io_out8
	LEAVE
	RET
	GLOBAL	_fdc_setwrite
_fdc_setwrite:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	10
	PUSH	11
	CALL	_io_out8
	PUSH	255
	PUSH	5
	CALL	_io_out8
	MOV	EAX,DWORD [8+EBP]
	LEA	EAX,DWORD [-1+EAX+EAX*1]
	PUSH	EAX
	PUSH	5
	CALL	_io_out8
	PUSH	0
	PUSH	4
	CALL	_io_out8
	ADD	ESP,32
	PUSH	128
	PUSH	4
	CALL	_io_out8
	PUSH	38
	PUSH	129
	CALL	_io_out8
	PUSH	2
	PUSH	10
	CALL	_io_out8
	LEAVE
	RET
[SECTION .data]
LC2:
	DB	"fdc write -- C:%02d H:%02d S:%02d N:%02d",0x00
LC3:
	DB	"fdd",0x00
LC1:
	DB	"fdc read  -- C:%02d H:%02d S:%02d N:%02d",0x00
[SECTION .text]
	GLOBAL	_fdc_readwrite
_fdc_readwrite:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	SUB	ESP,68
	MOV	EBX,DWORD [16+EBP]
	MOV	DWORD [-52+EBP],0
	MOV	DWORD [-60+EBP],0
	CALL	_task_now
	MOV	EDX,36
	MOV	ESI,EDX
	MOV	DWORD [-72+EBP],EAX
	MOV	EAX,DWORD [12+EBP]
	CDQ
	IDIV	ESI
	MOV	BYTE [-61+EBP],AL
	MOV	ECX,EAX
	MOV	EAX,EDX
	MOV	ESI,18
	CDQ
	IDIV	ESI
	INC	EDX
	MOV	BYTE [-62+EBP],AL
	MOV	DWORD [-76+EBP],0
	MOV	BYTE [-63+EBP],DL
	MOV	ESI,EAX
	CMP	BYTE [7+EBX],0
	JNE	L22
	MOV	EAX,DWORD [8+EBP]
	MOV	BYTE [4+EBX],CL
	MOV	DWORD [EBX],EAX
	MOV	EAX,ESI
	MOV	BYTE [5+EBX],AL
	MOV	AL,BYTE [-63+EBP]
	MOV	BYTE [6+EBX],AL
	MOV	BYTE [7+EBX],1
L60:
	MOV	EAX,100
L21:
	LEA	ESP,DWORD [-12+EBP]
	POP	EBX
	POP	ESI
	POP	EDI
	POP	EBP
	RET
L22:
	MOV	ESI,DWORD [8+EBP]
	CMP	ESI,DWORD [EBX]
	JE	L61
L23:
	CLD
	XOR	EAX,EAX
	LEA	EDI,DWORD [-44+EBP]
	MOV	ECX,30
	LEA	ESI,DWORD [-44+EBP]
	REP
	STOSB
	CMP	DWORD [EBX],1
	JE	L62
	MOVSX	EAX,BYTE [7+EBX]
	PUSH	EAX
	MOVSX	EAX,BYTE [6+EBX]
	PUSH	EAX
	MOVSX	EAX,BYTE [5+EBX]
	PUSH	EAX
	MOVSX	EAX,BYTE [4+EBX]
	PUSH	EAX
	PUSH	LC2
	PUSH	ESI
	CALL	_sprintf
	PUSH	7
	PUSH	ESI
	CALL	_dbg_putstr0
	ADD	ESP,32
	MOVSX	EAX,BYTE [7+EBX]
	PUSH	EAX
	CALL	_fdc_setwrite
L57:
	MOVSX	ESI,BYTE [4+EBX]
	MOVSX	ECX,BYTE [5+EBX]
	IMUL	EDX,ECX,18
	IMUL	EAX,ESI,36
	ADD	EAX,EDX
	POP	EDI
	MOVSX	EDX,BYTE [6+EBX]
	ADD	EAX,EDX
	SAL	EAX,9
	ADD	EAX,1048064
	MOV	DWORD [-68+EBP],EAX
	MOV	EAX,DWORD [20+EBP]
	CMP	DWORD [EAX],0
	JNE	L26
	PUSH	28
	PUSH	1010
	CALL	_io_out8
	PUSH	LC3
	CALL	_timer_alloc
	PUSH	128
	PUSH	_fdc_fifo
	PUSH	EAX
	MOV	DWORD [-76+EBP],EAX
	CALL	_timer_init
	PUSH	300
	PUSH	DWORD [-76+EBP]
	CALL	_timer_settime
	ADD	ESP,32
	MOV	ESI,DWORD [20+EBP]
	MOV	DWORD [ESI],1
L28:
	CALL	_io_cli
	PUSH	_fdc_fifo
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L63
	PUSH	_fdc_fifo
	CALL	_fifo32_get
	MOV	ESI,EAX
	CALL	_io_sti
	POP	EDI
	CMP	ESI,128
	JE	L64
	CMP	ESI,255
	JNE	L28
	CMP	DWORD [-52+EBP],0
	JE	L65
	CALL	_fdc_getstat
	TEST	EAX,EAX
	MOV	DWORD [-56+EBP],EAX
	JE	L66
	CMP	DWORD [-60+EBP],2
	JG	L29
	INC	DWORD [-60+EBP]
	MOVSX	EAX,BYTE [6+EBX]
	PUSH	EAX
	MOVSX	EAX,BYTE [5+EBX]
	PUSH	EAX
	MOVSX	EAX,BYTE [4+EBX]
	PUSH	EAX
	PUSH	DWORD [EBX]
	CALL	_fdc_sendcmd
L58:
	ADD	ESP,16
	JMP	L28
L29:
	CMP	BYTE [-61+EBP],79
	JG	L53
	MOV	EAX,DWORD [8+EBP]
	MOV	DWORD [EBX],EAX
	MOV	AL,BYTE [-61+EBP]
	MOV	BYTE [4+EBX],AL
	MOV	AL,BYTE [-62+EBP]
	MOV	BYTE [5+EBX],AL
	MOV	AL,BYTE [-63+EBP]
	MOV	BYTE [6+EBX],AL
	MOV	BYTE [7+EBX],1
L54:
	PUSH	6
	PUSH	10
	CALL	_io_out8
	POP	EBX
	POP	ESI
	CMP	DWORD [-76+EBP],0
	JE	L55
	PUSH	DWORD [-76+EBP]
	CALL	_timer_free
	POP	ECX
L55:
	MOV	EAX,DWORD [-56+EBP]
	JMP	L21
L53:
	MOV	DWORD [EBX],0
	MOV	BYTE [4+EBX],-1
	MOV	BYTE [5+EBX],-1
	MOV	BYTE [6+EBX],0
	MOV	BYTE [7+EBX],0
	JMP	L54
L66:
	CMP	DWORD [EBX],1
	JNE	L29
	MOV	DWORD [-48+EBP],0
	MOVSX	EAX,BYTE [7+EBX]
	CMP	DWORD [-56+EBP],EAX
	JGE	L29
	MOV	DWORD [-80+EBP],0
L49:
	CALL	_io_cli
	MOVSX	EAX,BYTE [5+EBX]
	MOVSX	EDX,BYTE [4+EBX]
	MOVSX	ECX,BYTE [6+EBX]
	LEA	EDX,DWORD [EAX+EDX*2]
	MOV	EAX,DWORD [-48+EBP]
	LEA	ECX,DWORD [-1+EAX+ECX*1]
	MOV	EAX,DWORD [_i_sta+EDX*4]
	SAR	EAX,CL
	AND	EAX,1
	JNE	L48
	MOV	EDI,DWORD [-80+EBP]
	MOV	ESI,DWORD [-80+EBP]
	ADD	EDI,DWORD [-68+EBP]
	ADD	ESI,2523136
	CLD
	MOV	ECX,128
	REP
	MOVSD
	MOVSX	EAX,BYTE [5+EBX]
	MOVSX	EDX,BYTE [4+EBX]
	MOVSX	ECX,BYTE [6+EBX]
	MOV	ESI,DWORD [-48+EBP]
	LEA	EDX,DWORD [EAX+EDX*2]
	MOV	EAX,1
	LEA	ECX,DWORD [-1+ESI+ECX*1]
	SAL	EAX,CL
	OR	DWORD [_i_sta+EDX*4],EAX
L48:
	CALL	_io_sti
	INC	DWORD [-48+EBP]
	ADD	DWORD [-80+EBP],512
	MOVSX	EAX,BYTE [7+EBX]
	CMP	DWORD [-48+EBP],EAX
	JL	L49
	JMP	L29
L65:
	CALL	_fdc_sendint
	CALL	_fdc_getsint
	CMP	EAX,-1
	MOV	DWORD [-56+EBP],EAX
	JE	L28
	TEST	EAX,EAX
	JNE	L29
	CMP	DWORD [EBX],1
	JE	L39
	MOVSX	ECX,BYTE [7+EBX]
	CLD
	SAL	ECX,9
	MOV	EDI,2523136
	MOV	ESI,DWORD [-68+EBP]
	REP
	MOVSB
L39:
	MOVSX	EAX,BYTE [6+EBX]
	PUSH	EAX
	MOVSX	EAX,BYTE [5+EBX]
	PUSH	EAX
	MOVSX	EAX,BYTE [4+EBX]
	PUSH	EAX
	PUSH	DWORD [EBX]
	CALL	_fdc_sendcmd
	MOV	DWORD [-52+EBP],1
	JMP	L58
L64:
	MOVSX	EAX,BYTE [5+EBX]
	PUSH	EAX
	MOVSX	EAX,BYTE [4+EBX]
	PUSH	EAX
L59:
	CALL	_fdc_sendseek
	POP	ECX
	POP	ESI
	JMP	L28
L63:
	PUSH	DWORD [-72+EBP]
	CALL	_task_sleep
	CALL	_io_sti
	POP	EAX
	JMP	L28
L26:
	PUSH	ECX
	PUSH	ESI
	JMP	L59
L62:
	MOVSX	EAX,BYTE [7+EBX]
	PUSH	EAX
	MOVSX	EAX,BYTE [6+EBX]
	PUSH	EAX
	MOVSX	EAX,BYTE [5+EBX]
	PUSH	EAX
	MOVSX	EAX,BYTE [4+EBX]
	PUSH	EAX
	PUSH	LC1
	PUSH	ESI
	CALL	_sprintf
	PUSH	7
	PUSH	ESI
	CALL	_dbg_putstr0
	ADD	ESP,32
	MOVSX	EAX,BYTE [7+EBX]
	PUSH	EAX
	CALL	_fdc_setread
	JMP	L57
L61:
	MOV	AL,BYTE [-61+EBP]
	CMP	AL,BYTE [4+EBX]
	JNE	L23
	MOV	AL,BYTE [-62+EBP]
	CMP	AL,BYTE [5+EBX]
	JNE	L23
	MOV	AL,BYTE [6+EBX]
	SUB	BYTE [-63+EBP],AL
	MOV	AL,BYTE [-63+EBP]
	INC	EAX
	MOV	BYTE [7+EBX],AL
	JMP	L60
	GLOBAL	_fdc_sendseek
_fdc_sendseek:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOVSX	ESI,BYTE [8+EBP]
	MOVSX	EBX,BYTE [12+EBP]
	SAL	EBX,2
	CALL	_wait_fdc_init
	CALL	_wait_fdc_send
	PUSH	15
	PUSH	1013
	CALL	_io_out8
	CALL	_wait_fdc_send
	PUSH	EBX
	PUSH	1013
	CALL	_io_out8
	CALL	_wait_fdc_send
	MOV	DWORD [12+EBP],ESI
	MOV	DWORD [8+EBP],1013
	ADD	ESP,16
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_io_out8
	GLOBAL	_fdc_sendint
_fdc_sendint:
	PUSH	EBP
	MOV	EBP,ESP
	CALL	_wait_fdc_sint
	CALL	_wait_fdc_send
	PUSH	8
	PUSH	1013
	CALL	_io_out8
	LEAVE
	RET
	GLOBAL	_fdc_sendcmd
_fdc_sendcmd:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	EAX
	MOV	AL,BYTE [12+EBP]
	MOV	EBX,DWORD [8+EBP]
	MOV	BYTE [-5+EBP],AL
	MOV	AL,BYTE [16+EBP]
	MOV	BYTE [-6+EBP],AL
	MOV	AL,BYTE [20+EBP]
	MOV	BYTE [-7+EBP],AL
	CALL	_wait_fdc_init
	DEC	EBX
	JE	L73
	CALL	_wait_fdc_send
	PUSH	197
L72:
	PUSH	1013
	CALL	_io_out8
	CALL	_wait_fdc_send
	MOVSX	EBX,BYTE [-6+EBP]
	LEA	EAX,DWORD [0+EBX*4]
	PUSH	EAX
	PUSH	1013
	CALL	_io_out8
	CALL	_wait_fdc_send
	MOVSX	EAX,BYTE [-5+EBP]
	PUSH	EAX
	PUSH	1013
	CALL	_io_out8
	CALL	_wait_fdc_send
	PUSH	EBX
	PUSH	1013
	CALL	_io_out8
	ADD	ESP,32
	CALL	_wait_fdc_send
	MOVSX	EAX,BYTE [-7+EBP]
	PUSH	EAX
	PUSH	1013
	CALL	_io_out8
	CALL	_wait_fdc_send
	PUSH	2
	PUSH	1013
	CALL	_io_out8
	CALL	_wait_fdc_send
	PUSH	18
	PUSH	1013
	CALL	_io_out8
	CALL	_wait_fdc_send
	PUSH	27
	PUSH	1013
	CALL	_io_out8
	ADD	ESP,32
	CALL	_wait_fdc_send
	MOV	EBX,DWORD [-4+EBP]
	MOV	DWORD [12+EBP],255
	MOV	DWORD [8+EBP],1013
	LEAVE
	JMP	_io_out8
L73:
	CALL	_wait_fdc_send
	PUSH	230
	JMP	L72
	GLOBAL	_fdc_getsint
_fdc_getsint:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	CALL	_wait_fdc_recv
	PUSH	1013
	CALL	_io_in8
	MOV	BL,AL
	CALL	_wait_fdc_recv
	PUSH	1013
	CALL	_io_in8
	POP	EDX
	MOV	EAX,EBX
	POP	ECX
	AND	EAX,192
	OR	EDX,-1
	CMP	EAX,192
	JE	L74
	XOR	EDX,EDX
	TEST	EBX,192
	SETNE	DL
L74:
	MOV	EAX,EDX
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_fdc_getstat
_fdc_getstat:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	CALL	_wait_fdc_recv
	PUSH	1013
	CALL	_io_in8
	MOV	BL,AL
	CALL	_wait_fdc_recv
	PUSH	1013
	CALL	_io_in8
	CALL	_wait_fdc_recv
	PUSH	1013
	CALL	_io_in8
	CALL	_wait_fdc_recv
	PUSH	1013
	CALL	_io_in8
	CALL	_wait_fdc_recv
	PUSH	1013
	CALL	_io_in8
	CALL	_wait_fdc_recv
	PUSH	1013
	CALL	_io_in8
	CALL	_wait_fdc_recv
	PUSH	1013
	CALL	_io_in8
	XOR	EAX,EAX
	ADD	ESP,28
	TEST	EBX,192
	MOV	EBX,DWORD [-4+EBP]
	SETNE	AL
	LEAVE
	RET
	GLOBAL	_wait_fdc_init
_wait_fdc_init:
	PUSH	EBP
	MOV	EBP,ESP
L81:
	PUSH	1012
	CALL	_io_in8
	POP	EDX
	AND	EAX,17
	JNE	L81
	LEAVE
	RET
	GLOBAL	_wait_fdc_sint
_wait_fdc_sint:
	PUSH	EBP
	MOV	EBP,ESP
L86:
	PUSH	1012
	CALL	_io_in8
	POP	ECX
	AND	EAX,16
	JNE	L86
	LEAVE
	RET
	GLOBAL	_wait_fdc_send
_wait_fdc_send:
	PUSH	EBP
	MOV	EBP,ESP
L91:
	PUSH	1012
	CALL	_io_in8
	POP	EDX
	AND	EAX,192
	ADD	EAX,-128
	JNE	L91
	LEAVE
	RET
	GLOBAL	_wait_fdc_recv
_wait_fdc_recv:
	PUSH	EBP
	MOV	EBP,ESP
L96:
	PUSH	1012
	CALL	_io_in8
	POP	ECX
	AND	EAX,192
	CMP	EAX,192
	JNE	L96
	LEAVE
	RET
	GLOBAL	_inthandler26
_inthandler26:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	1012
	CALL	_io_in8
	PUSH	102
	PUSH	32
	CALL	_io_out8
	PUSH	255
	PUSH	_fdc_fifo
	CALL	_fifo32_put
	LEAVE
	RET
[SECTION .data]
LC4:
	DB	"  -> rc=%d",0x0A,0x00
[SECTION .text]
	GLOBAL	_put_retcode
_put_retcode:
	PUSH	EBP
	XOR	EAX,EAX
	MOV	EBP,ESP
	MOV	ECX,30
	PUSH	EDI
	CLD
	PUSH	EBX
	LEA	EDI,DWORD [-40+EBP]
	SUB	ESP,32
	LEA	EBX,DWORD [-40+EBP]
	REP
	STOSB
	PUSH	DWORD [8+EBP]
	PUSH	LC4
	PUSH	EBX
	CALL	_sprintf
	PUSH	7
	PUSH	EBX
	CALL	_dbg_putstr0
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	EDI
	POP	EBP
	RET
	GLOBAL	_fdc_fbuf
[SECTION .data]
	ALIGNB	4
_fdc_fbuf:
	RESB	4
	GLOBAL	_fdc_fifo
[SECTION .data]
	ALIGNB	16
_fdc_fifo:
	RESB	28
