	.file	"mtask.c"
	.text
	.balign 2
.globl _task_now
	.def	_task_now;	.scl	2;	.type	32;	.endef
_task_now:
	movl	_taskctl, %eax
	pushl	%ebp
	movl	%esp, %ebp
	popl	%ebp
	movl	(%eax), %edx
	imull	$408, %edx, %edx
	leal	8(%edx,%eax), %eax
	movl	4(%eax), %edx
	movl	8(%eax,%edx,4), %eax
	ret
	.balign 2
.globl _task_add
	.def	_task_add;	.scl	2;	.type	32;	.endef
_task_add:
	pushl	%ebp
	movl	%esp, %ebp
	movl	8(%ebp), %ecx
	movl	8(%ecx), %edx
	imull	$408, %edx, %edx
	addl	_taskctl, %edx
	movl	8(%edx), %eax
	movl	%ecx, 16(%edx,%eax,4)
	incl	%eax
	movl	%eax, 8(%edx)
	movl	$2, 4(%ecx)
	popl	%ebp
	ret
	.balign 2
.globl _task_remove
	.def	_task_remove;	.scl	2;	.type	32;	.endef
_task_remove:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	movl	8(%ebx), %eax
	imull	$408, %eax, %eax
	addl	_taskctl, %eax
	leal	8(%eax), %edx
	cmpl	8(%eax), %ecx
	jge	L5
L9:
	cmpl	%ebx, 8(%edx,%ecx,4)
	je	L5
	incl	%ecx
	cmpl	(%edx), %ecx
	jl	L9
L5:
	movl	4(%edx), %eax
	decl	(%edx)
	cmpl	%eax, %ecx
	jge	L10
	decl	%eax
	movl	%eax, 4(%edx)
L10:
	movl	(%edx), %eax
	cmpl	%eax, 4(%edx)
	jl	L11
	movl	$0, 4(%edx)
L11:
	movl	$1, 4(%ebx)
	movl	(%edx), %ebx
	cmpl	%ebx, %ecx
	jge	L19
L16:
	movl	12(%edx,%ecx,4), %eax
	movl	%eax, 8(%edx,%ecx,4)
	incl	%ecx
	cmpl	%ebx, %ecx
	jl	L16
L19:
	popl	%ebx
	popl	%ebp
	ret
	.balign 2
.globl _task_switchsub
	.def	_task_switchsub;	.scl	2;	.type	32;	.endef
_task_switchsub:
	pushl	%ebp
	xorl	%ecx, %ecx
	movl	%esp, %ebp
	movl	_taskctl, %eax
	xorl	%edx, %edx
L26:
	cmpl	$0, 8(%eax,%edx)
	jg	L22
	incl	%ecx
	addl	$408, %edx
	cmpl	$9, %ecx
	jle	L26
L22:
	movl	%ecx, (%eax)
	movb	$0, 4(%eax)
	popl	%ebp
	ret
	.balign 2
.globl _task_idle
	.def	_task_idle;	.scl	2;	.type	32;	.endef
_task_idle:
	pushl	%ebp
	movl	%esp, %ebp
L29:
	call	_io_hlt
	jmp	L29
	.data
LC0:
	.ascii "system\0"
LC1:
	.ascii "tsy\0"
	.text
	.balign 2
.globl _task_init
	.def	_task_init;	.scl	2;	.type	32;	.endef
_task_init:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	xorl	%edi, %edi
	pushl	%ebx
	xorl	%esi, %esi
	pushl	%ecx
	movl	$999, %ebx
	pushl	$216096
	pushl	8(%ebp)
	call	_memman_alloc_4k
	movl	%eax, _taskctl
	popl	%eax
	popl	%edx
L37:
	movl	%edi, %edx
	leal	24(%esi), %eax
	addl	_taskctl, %edx
	movl	%eax, 4088(%edx)
	leal	8024(%esi), %eax
	movl	%eax, 4228(%edx)
	leal	2555928(%esi), %eax
	movl	$0, 4092(%edx)
	pushl	$137
	addl	$4132, %edx
	pushl	%edx
	pushl	$103
	pushl	%eax
	call	_set_segmdesc
	movl	_taskctl, %eax
	addl	%edi, %eax
	pushl	$130
	addl	$4236, %eax
	addl	$212, %edi
	pushl	%eax
	leal	2563928(%esi), %eax
	pushl	$15
	addl	$8, %esi
	pushl	%eax
	call	_set_segmdesc
	addl	$32, %esp
	decl	%ebx
	jns	L37
	movl	_taskctl, %edx
	xorl	%ecx, %ecx
	movl	$9, %ebx
L42:
	leal	(%edx,%ecx), %eax
	addl	$408, %ecx
	decl	%ebx
	movl	$0, 8(%eax)
	movl	$0, 12(%eax)
	jns	L42
	movl	$0, 216088(%edx)
	movl	$0, 216092(%edx)
	movl	$LC0, %esi
	call	_task_alloc
	movl	%eax, %edi
	movl	$7, %ecx
	cld
	addl	$190, %edi
	movl	%eax, -16(%ebp)
	movl	$2, 4(%eax)
	movl	$2, 12(%eax)
	movl	$0, 8(%eax)
	rep
	movsb
	movl	$0, 208(%eax)
	pushl	%eax
	call	_task_add
	call	_task_switchsub
	movl	-16(%ebp), %edx
	pushl	(%edx)
	call	_load_tr
	pushl	$LC1
	call	_timer_alloc
	movl	-16(%ebp), %edx
	movl	%eax, _task_timer
	pushl	12(%edx)
	pushl	%eax
	call	_timer_settime
	call	_task_alloc
	pushl	$65536
	pushl	8(%ebp)
	movl	%eax, %ebx
	call	_memman_alloc_4k
	addl	$65536, %eax
	movl	%eax, 100(%ebx)
	movl	$_task_idle, 76(%ebx)
	movl	$8, 116(%ebx)
	movl	$16, 120(%ebx)
	movl	$8, 124(%ebx)
	movl	$8, 128(%ebx)
	movl	$8, 132(%ebx)
	movl	$8, 136(%ebx)
	movl	$1701602409, 190(%ebx)
	movb	$0, 194(%ebx)
	movl	$0, 208(%ebx)
	pushl	$1
	pushl	$9
	pushl	%ebx
	call	_task_run
	movl	-16(%ebp), %eax
	leal	-12(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%edi
	popl	%ebp
	ret
	.data
LC2:
	.ascii "\0"
	.text
	.balign 2
.globl _task_alloc
	.def	_task_alloc;	.scl	2;	.type	32;	.endef
_task_alloc:
	pushl	%ebp
	xorl	%eax, %eax
	movl	%esp, %ebp
	xorl	%ecx, %ecx
L54:
	movl	%ecx, %edx
	addl	_taskctl, %edx
	cmpl	$0, 4092(%edx)
	je	L57
	incl	%eax
	addl	$212, %ecx
	cmpl	$999, %eax
	jle	L54
	xorl	%eax, %eax
L47:
	popl	%ebp
	ret
L57:
	addl	$4088, %edx
	movb	$0, 188(%edx)
	movb	$0, 189(%edx)
	movl	_taskctl, %ecx
	movl	$1, 4(%edx)
	movl	$514, 80(%edx)
	movl	$0, 84(%edx)
	movl	$0, 88(%edx)
	movl	$0, 92(%edx)
	movl	$0, 96(%edx)
	movl	$0, 104(%edx)
	movl	$0, 108(%edx)
	movl	$0, 112(%edx)
	movl	$0, 116(%edx)
	movl	$0, 128(%edx)
	movl	$0, 132(%edx)
	movl	$0, 136(%edx)
	movl	$1073741824, 144(%edx)
	movl	$0, 52(%edx)
	movl	$LC2, 184(%edx)
	cmpl	216088(%ecx), %eax
	jl	L53
	incl	%eax
	movl	%eax, 216088(%ecx)
L53:
	incl	216092(%ecx)
	movl	%edx, %eax
	jmp	L47
	.balign 2
.globl _task_run
	.def	_task_run;	.scl	2;	.type	32;	.endef
_task_run:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	12(%ebp), %esi
	movl	16(%ebp), %eax
	movl	8(%ebp), %ebx
	testl	%esi, %esi
	js	L63
L59:
	testl	%eax, %eax
	jle	L60
	movl	%eax, 12(%ebx)
L60:
	cmpl	$2, 4(%ebx)
	je	L64
L61:
	cmpl	$2, 4(%ebx)
	je	L62
	movl	%esi, 8(%ebx)
	pushl	%ebx
	call	_task_add
	popl	%ebx
L62:
	movl	_taskctl, %eax
	movb	$1, 4(%eax)
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L64:
	cmpl	%esi, 8(%ebx)
	je	L61
	pushl	%ebx
	call	_task_remove
	popl	%eax
	jmp	L61
L63:
	movl	8(%ebx), %esi
	jmp	L59
	.balign 2
.globl _task_sleep
	.def	_task_sleep;	.scl	2;	.type	32;	.endef
_task_sleep:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %esi
	cmpl	$2, 4(%esi)
	je	L68
L65:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L68:
	call	_task_now
	pushl	%esi
	movl	%eax, %ebx
	call	_task_remove
	popl	%ecx
	cmpl	%ebx, %esi
	jne	L65
	call	_task_switchsub
	call	_task_now
	pushl	(%eax)
	pushl	$0
	call	_farjmp
	popl	%eax
	popl	%edx
	jmp	L65
	.balign 2
.globl _task_switch
	.def	_task_switch;	.scl	2;	.type	32;	.endef
_task_switch:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	_taskctl, %ebx
	movl	(%ebx), %edx
	imull	$408, %edx, %edx
	leal	(%edx,%ebx), %edx
	leal	8(%edx), %ecx
	movl	4(%ecx), %eax
	movl	8(%ecx,%eax,4), %esi
	incl	%eax
	movl	%eax, 4(%ecx)
	cmpl	8(%edx), %eax
	je	L73
L70:
	cmpb	$0, 4(%ebx)
	jne	L74
L71:
	movl	4(%ecx), %eax
	movl	8(%ecx,%eax,4), %ebx
	pushl	12(%ebx)
	pushl	_task_timer
	call	_timer_settime
	cmpl	%esi, %ebx
	popl	%eax
	popl	%edx
	je	L69
	pushl	(%ebx)
	pushl	$0
	call	_farjmp
	popl	%ebx
	popl	%esi
L69:
	leal	-8(%ebp), %esp
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L74:
	call	_task_switchsub
	movl	_taskctl, %edx
	movl	(%edx), %eax
	imull	$408, %eax, %eax
	leal	8(%eax,%edx), %ecx
	jmp	L71
L73:
	movl	$0, 4(%ecx)
	jmp	L70
	.balign 2
.globl _task_free
	.def	_task_free;	.scl	2;	.type	32;	.endef
_task_free:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%ebx
	movl	8(%ebp), %ebx
	call	_io_cli
	movl	$0, 4(%ebx)
	call	_io_sti
	movl	_taskctl, %ecx
	subl	%ecx, %ebx
	leal	-4088(%ebx), %edx
	sarl	$2, %edx
	imull	$-1944890851, %edx, %edx
	leal	1(%edx), %eax
	cmpl	216088(%ecx), %eax
	jl	L76
	decl	%edx
	js	L78
	movl	%edx, %eax
	imull	$212, %eax, %eax
	leal	4092(%ecx,%eax), %eax
L82:
	cmpl	$0, (%eax)
	jne	L78
	subl	$212, %eax
	decl	%edx
	jns	L82
L78:
	movl	_taskctl, %eax
	incl	%edx
	movl	%edx, 216088(%eax)
L76:
	movl	_taskctl, %eax
	decl	216092(%eax)
	popl	%ebx
	popl	%ebp
	ret
.globl _taskctl
	.data
	.balign 4
_taskctl:
	.space 4
.globl _task_timer
	.data
	.balign 4
_task_timer:
	.space 4
	.def	_io_sti;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_farjmp;	.scl	2;	.type	32;	.endef
	.def	_task_run;	.scl	2;	.type	32;	.endef
	.def	_timer_settime;	.scl	2;	.type	32;	.endef
	.def	_timer_alloc;	.scl	2;	.type	32;	.endef
	.def	_load_tr;	.scl	2;	.type	32;	.endef
	.def	_task_alloc;	.scl	2;	.type	32;	.endef
	.def	_set_segmdesc;	.scl	2;	.type	32;	.endef
	.def	_memman_alloc_4k;	.scl	2;	.type	32;	.endef
	.def	_io_hlt;	.scl	2;	.type	32;	.endef
