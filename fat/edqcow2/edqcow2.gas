	.file	"readfat.h"
	.text
	.def	_fprintf;	.scl	3;	.type	32;	.endef
_fprintf:
LFB0:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	pushl	%ebx
	subl	$36, %esp
	.cfi_offset 3, -12
	leal	16(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	___mingw_vfprintf
	movl	%eax, %ebx
	movl	%ebx, %eax
	addl	$36, %esp
	popl	%ebx
	.cfi_restore 3
	popl	%ebp
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE0:
	.def	_printf;	.scl	3;	.type	32;	.endef
_printf:
LFB1:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	pushl	%ebx
	subl	$36, %esp
	.cfi_offset 3, -12
	leal	12(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	-12(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	8(%ebp), %eax
	movl	%eax, (%esp)
	call	___mingw_vprintf
	movl	%eax, %ebx
	movl	%ebx, %eax
	addl	$36, %esp
	popl	%ebx
	.cfi_restore 3
	popl	%ebp
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE1:
	.section .rdata,"dr"
	.align 4
LC0:
	.ascii "edqcow2 <qcow2 img file> create [size]\12\0"
	.align 4
LC1:
	.ascii "edqcow2 <qcow2 img file> init fat12 1474560.\12\0"
	.align 4
LC2:
	.ascii "edqcow2 <qcow2 img file> write file <file> to disk H-C-S\12\0"
	.align 4
LC3:
	.ascii "edqcow2 <qcow2 img file> write file <file> to dir <file>\12\0"
	.text
	.globl	_show_usage
	.def	_show_usage;	.scl	2;	.type	32;	.endef
_show_usage:
LFB10:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	subl	$24, %esp
	movl	$LC0, (%esp)
	call	_printf
	movl	$LC1, (%esp)
	call	_printf
	movl	$LC2, (%esp)
	call	_printf
	movl	$LC3, (%esp)
	call	_printf
	movl	$-1, %eax
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE10:
	.globl	_align_offset
	.def	_align_offset;	.scl	2;	.type	32;	.endef
_align_offset:
LFB11:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	pushl	%esi
	pushl	%ebx
	subl	$8, %esp
	.cfi_offset 6, -12
	.cfi_offset 3, -16
	movl	8(%ebp), %eax
	movl	%eax, -16(%ebp)
	movl	12(%ebp), %eax
	movl	%eax, -12(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, %ecx
	movl	%eax, %ebx
	sarl	$31, %ebx
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	addl	%ecx, %eax
	adcl	%ebx, %edx
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, %ecx
	movl	%edx, %ebx
	movl	16(%ebp), %eax
	negl	%eax
	cltd
	movl	%ecx, %esi
	andl	%eax, %esi
	movl	%esi, -16(%ebp)
	andl	%edx, %ebx
	movl	%ebx, %eax
	movl	%eax, -12(%ebp)
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	addl	$8, %esp
	popl	%ebx
	.cfi_restore 3
	popl	%esi
	.cfi_restore 6
	popl	%ebp
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE11:
	.def	_get_bits_from_size;	.scl	3;	.type	32;	.endef
_get_bits_from_size:
LFB12:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	subl	$16, %esp
	movl	$0, -4(%ebp)
	cmpl	$0, 8(%ebp)
	jne	L10
	movl	$-1, %eax
	jmp	L11
L10:
	jmp	L12
L14:
	movl	8(%ebp), %eax
	andl	$1, %eax
	testl	%eax, %eax
	je	L13
	movl	$-1, %eax
	jmp	L11
L13:
	shrl	8(%ebp)
	incl	-4(%ebp)
L12:
	cmpl	$1, 8(%ebp)
	jne	L14
	movl	-4(%ebp), %eax
L11:
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE12:
	.globl	_qcow2_create_refcount_update
	.def	_qcow2_create_refcount_update;	.scl	2;	.type	32;	.endef
_qcow2_create_refcount_update:
LFB13:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	pushl	%esi
	pushl	%ebx
	subl	$48, %esp
	.cfi_offset 6, -12
	.cfi_offset 3, -16
	movl	12(%ebp), %eax
	movl	%eax, -48(%ebp)
	movl	16(%ebp), %eax
	movl	%eax, -44(%ebp)
	movl	20(%ebp), %eax
	movl	%eax, -56(%ebp)
	movl	24(%ebp), %eax
	movl	%eax, -52(%ebp)
	movl	28(%ebp), %eax
	negl	%eax
	movl	$0, %edx
	movl	%eax, %ecx
	andl	-48(%ebp), %ecx
	movl	%ecx, -24(%ebp)
	movl	%edx, %eax
	andl	-44(%ebp), %eax
	movl	%eax, -20(%ebp)
	movl	-56(%ebp), %eax
	movl	-52(%ebp), %edx
	movl	-48(%ebp), %ecx
	movl	-44(%ebp), %ebx
	addl	%ecx, %eax
	adcl	%ebx, %edx
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	28(%ebp), %ecx
	negl	%ecx
	movl	$0, %ebx
	movl	%eax, %esi
	andl	%ecx, %esi
	movl	%esi, -32(%ebp)
	movl	%edx, %eax
	andl	%ebx, %eax
	movl	%eax, -28(%ebp)
	movl	-24(%ebp), %eax
	movl	-20(%ebp), %edx
	movl	%eax, -16(%ebp)
	movl	%edx, -12(%ebp)
	jmp	L16
L17:
	movl	32(%ebp), %ecx
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	shrdl	%cl, %edx, %eax
	sarl	%cl, %edx
	testb	$32, %cl
	je	L19
	movl	%edx, %eax
	sarl	$31, %edx
L19:
	addl	%eax, %eax
	movl	%eax, %edx
	movl	8(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	movw	(%eax), %ax
	movzwl	%ax, %eax
	sall	$8, %eax
	movzwl	%ax, %edx
	movl	-36(%ebp), %eax
	movw	(%eax), %ax
	shrw	$8, %ax
	movzwl	%ax, %eax
	orl	%edx, %eax
	movl	%eax, -40(%ebp)
	incl	-40(%ebp)
	movl	-40(%ebp), %eax
	sall	$8, %eax
	movl	%eax, %edx
	movl	-40(%ebp), %eax
	andl	$65280, %eax
	sarl	$8, %eax
	orl	%edx, %eax
	movl	-36(%ebp), %edx
	movw	%ax, (%edx)
	movl	28(%ebp), %eax
	movl	$0, %edx
	addl	%eax, -16(%ebp)
	adcl	%edx, -12(%ebp)
L16:
	movl	-16(%ebp), %eax
	movl	-12(%ebp), %edx
	cmpl	-28(%ebp), %edx
	jl	L17
	cmpl	-28(%ebp), %edx
	jg	L15
	cmpl	-32(%ebp), %eax
	jbe	L17
L15:
	addl	$48, %esp
	popl	%ebx
	.cfi_restore 3
	popl	%esi
	.cfi_restore 6
	popl	%ebp
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE13:
	.section .rdata,"dr"
LC4:
	.ascii ".\\test\0"
	.align 4
LC5:
	.ascii "Cluster size must be a power of two between %d and %dk\12\0"
LC6:
	.ascii "level1 offset %lld.\12\0"
LC7:
	.ascii "level1 size %d.\12\0"
	.def	___udivdi3;	.scl	2;	.type	32;	.endef
LC8:
	.ascii "reftable_clusters=%d.\12\0"
LC9:
	.ascii "cluster_size=%d.\12\0"
LC10:
	.ascii "refcount_table offset %lld.\12\0"
LC11:
	.ascii "refcount_block offset %lld.\12\0"
	.text
	.globl	_create
	.def	_create;	.scl	2;	.type	32;	.endef
_create:
LFB14:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	subl	$652, %esp
	.cfi_offset 7, -12
	.cfi_offset 6, -16
	.cfi_offset 3, -20
	movl	$4096, -48(%ebp)
	movl	$0, -44(%ebp)
	movl	$0, -52(%ebp)
	movl	$0, -64(%ebp)
	movl	$0, -60(%ebp)
	movl	$0, -68(%ebp)
	movl	$0, -80(%ebp)
	movl	$0, -76(%ebp)
	movl	$0, -84(%ebp)
	movl	$65536, -88(%ebp)
	movl	$4096, -88(%ebp)
	movl	$LC4, -92(%ebp)
	movl	$72, 8(%esp)
	movl	$0, 4(%esp)
	leal	-224(%ebp), %eax
	movl	%eax, (%esp)
	call	_memset
	movl	$-79083951, -224(%ebp)
	movl	$33554432, -220(%ebp)
	movl	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	_get_bits_from_size
	movl	%eax, -96(%ebp)
	cmpl	$8, -96(%ebp)
	jle	L21
	cmpl	$21, -96(%ebp)
	jle	L22
L21:
	movl	$2048, 12(%esp)
	movl	$512, 8(%esp)
	movl	$LC5, 4(%esp)
	movl	__imp___iob, %eax
	addl	$64, %eax
	movl	%eax, (%esp)
	call	_fprintf
	movl	$-1, %eax
	jmp	L30
L22:
	movl	-96(%ebp), %edx
	movl	$1, %eax
	movb	%dl, %cl
	sall	%cl, %eax
	movl	%eax, -88(%ebp)
	movl	-96(%ebp), %eax
	sall	$24, %eax
	movl	%eax, %edx
	movl	-96(%ebp), %eax
	andl	$65280, %eax
	sall	$8, %eax
	orl	%eax, %edx
	movl	-96(%ebp), %eax
	andl	$16711680, %eax
	sarl	$8, %eax
	orl	%edx, %eax
	movl	%eax, %edx
	movl	-96(%ebp), %eax
	shrl	$24, %eax
	orl	%edx, %eax
	movl	%eax, -204(%ebp)
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	shldl	$9, %eax, %edx
	sall	$9, %eax
	movl	%eax, %edi
	andl	$65024, %edi
	movl	%edi, %ebx
	movl	%edx, %eax
	andl	$0, %eax
	movl	%eax, %esi
	movl	%ebx, %esi
	movl	$0, %ebx
	sall	$8, %esi
	movl	%ebx, %ecx
	movl	%esi, %ebx
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	shldl	$9, %eax, %edx
	sall	$9, %eax
	movl	%eax, %edi
	andl	$16711680, %edi
	movl	%edi, -240(%ebp)
	movl	%edx, %eax
	andl	$0, %eax
	movl	%eax, -236(%ebp)
	movl	-240(%ebp), %eax
	movl	-236(%ebp), %edx
	shldl	$24, %eax, %edx
	sall	$24, %eax
	movl	%ecx, %edi
	orl	%eax, %edi
	movl	%edi, -248(%ebp)
	movl	%ebx, %edi
	orl	%edx, %edi
	movl	%edi, -244(%ebp)
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	shldl	$9, %eax, %edx
	sall	$9, %eax
	movl	%eax, %edi
	andl	$-16777216, %edi
	movl	%edi, -256(%ebp)
	movl	%edx, %eax
	andl	$0, %eax
	movl	%eax, -252(%ebp)
	movl	-256(%ebp), %eax
	movl	-252(%ebp), %edx
	shldl	$8, %eax, %edx
	sall	$8, %eax
	movl	-248(%ebp), %ebx
	movl	-244(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -264(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -260(%ebp)
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	shldl	$9, %eax, %edx
	sall	$9, %eax
	movl	%eax, %edi
	andl	$0, %edi
	movl	%edi, -272(%ebp)
	movzbl	%dl, %eax
	movl	%eax, -268(%ebp)
	movl	-272(%ebp), %eax
	movl	-268(%ebp), %edx
	shrdl	$8, %edx, %eax
	shrl	$8, %edx
	movl	-264(%ebp), %ebx
	movl	-260(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -280(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -276(%ebp)
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	shldl	$9, %eax, %edx
	sall	$9, %eax
	movl	%eax, %edi
	andl	$0, %edi
	movl	%edi, -288(%ebp)
	movl	%edx, %eax
	andl	$65280, %eax
	movl	%eax, -284(%ebp)
	movl	-288(%ebp), %eax
	movl	-284(%ebp), %edx
	shrdl	$24, %edx, %eax
	shrl	$24, %edx
	movl	-280(%ebp), %ebx
	movl	-276(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -296(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -292(%ebp)
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	shldl	$9, %eax, %edx
	sall	$9, %eax
	movl	%eax, %edi
	andl	$0, %edi
	movl	%edi, -304(%ebp)
	movl	%edx, %eax
	andl	$16711680, %eax
	movl	%eax, -300(%ebp)
	movl	-304(%ebp), %eax
	movl	-300(%ebp), %edx
	movl	%edx, %eax
	xorl	%edx, %edx
	shrl	$8, %eax
	movl	-296(%ebp), %ebx
	movl	-292(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -312(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -308(%ebp)
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	shldl	$9, %eax, %edx
	sall	$9, %eax
	movl	%edx, %eax
	xorl	%edx, %edx
	shrl	$24, %eax
	movl	-312(%ebp), %ebx
	movl	-308(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -320(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -316(%ebp)
	movl	-320(%ebp), %eax
	movl	-316(%ebp), %edx
	movl	%eax, -200(%ebp)
	movl	%edx, -196(%ebp)
	movl	$0, -192(%ebp)
	movl	-96(%ebp), %eax
	subl	$3, %eax
	movl	%eax, -100(%ebp)
	movl	-100(%ebp), %edx
	movl	-96(%ebp), %eax
	addl	%edx, %eax
	movl	%eax, -104(%ebp)
	movl	-48(%ebp), %eax
	movl	-44(%ebp), %edx
	shldl	$9, %eax, %edx
	sall	$9, %eax
	movl	%eax, %ebx
	movl	%edx, %esi
	movl	-104(%ebp), %ecx
	movl	$1, %eax
	movl	$0, %edx
	shldl	%cl, %eax, %edx
	sall	%cl, %eax
	testb	$32, %cl
	je	L31
	movl	%eax, %edx
	xorl	%eax, %eax
L31:
	addl	%ebx, %eax
	adcl	%esi, %edx
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	-104(%ebp), %ecx
	shrdl	%cl, %edx, %eax
	shrl	%cl, %edx
	testb	$32, %cl
	je	L32
	movl	%edx, %eax
	xorl	%edx, %edx
L32:
	movl	%eax, -68(%ebp)
	movl	$72, -108(%ebp)
	movl	-108(%ebp), %eax
	addl	$7, %eax
	andl	$-8, %eax
	movl	%eax, -108(%ebp)
	movl	-88(%ebp), %ecx
	movl	-108(%ebp), %eax
	cltd
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	_align_offset
	movl	%eax, -32(%ebp)
	movl	%edx, -28(%ebp)
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$LC6, (%esp)
	call	_printf
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, -64(%ebp)
	movl	%edx, -60(%ebp)
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%eax, %edx
	movl	$0, %eax
	sall	$24, %edx
	movl	%eax, %ecx
	movl	%edx, %ebx
	movl	-64(%ebp), %eax
	andl	$65280, %eax
	movl	%eax, -328(%ebp)
	movl	-60(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -324(%ebp)
	movl	-328(%ebp), %eax
	movl	-324(%ebp), %edx
	movl	%eax, %edx
	movl	$0, %eax
	sall	$8, %edx
	movl	%ecx, %edi
	orl	%eax, %edi
	movl	%edi, -336(%ebp)
	movl	%ebx, %edi
	orl	%edx, %edi
	movl	%edi, -332(%ebp)
	movl	-64(%ebp), %eax
	andl	$16711680, %eax
	movl	%eax, -344(%ebp)
	movl	-60(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -340(%ebp)
	movl	-344(%ebp), %eax
	movl	-340(%ebp), %edx
	shldl	$24, %eax, %edx
	sall	$24, %eax
	movl	-336(%ebp), %ebx
	movl	-332(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -352(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -348(%ebp)
	movl	-64(%ebp), %eax
	andl	$-16777216, %eax
	movl	%eax, -360(%ebp)
	movl	-60(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -356(%ebp)
	movl	-360(%ebp), %eax
	movl	-356(%ebp), %edx
	shldl	$8, %eax, %edx
	sall	$8, %eax
	movl	-352(%ebp), %ebx
	movl	-348(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -368(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -364(%ebp)
	movl	-64(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -376(%ebp)
	movl	-60(%ebp), %eax
	andl	$255, %eax
	movl	%eax, -372(%ebp)
	movl	-376(%ebp), %eax
	movl	-372(%ebp), %edx
	shrdl	$8, %edx, %eax
	sarl	$8, %edx
	movl	-368(%ebp), %ebx
	movl	-364(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -384(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -380(%ebp)
	movl	-64(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -392(%ebp)
	movl	-60(%ebp), %eax
	andl	$65280, %eax
	movl	%eax, -388(%ebp)
	movl	-392(%ebp), %eax
	movl	-388(%ebp), %edx
	shrdl	$24, %edx, %eax
	sarl	$24, %edx
	movl	-384(%ebp), %ebx
	movl	-380(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -400(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -396(%ebp)
	movl	-64(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -408(%ebp)
	movl	-60(%ebp), %eax
	andl	$16711680, %eax
	movl	%eax, -404(%ebp)
	movl	-408(%ebp), %eax
	movl	-404(%ebp), %edx
	movl	%edx, %eax
	movl	%eax, %edx
	sarl	$31, %edx
	sarl	$8, %eax
	movl	-400(%ebp), %ebx
	movl	-396(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -416(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -412(%ebp)
	movl	-416(%ebp), %ecx
	movl	-412(%ebp), %ebx
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%edx, %eax
	xorl	%edx, %edx
	shrl	$24, %eax
	movl	%ecx, %edi
	orl	%eax, %edi
	movl	%edi, -424(%ebp)
	movl	%ebx, %esi
	orl	%edx, %esi
	movl	%esi, -420(%ebp)
	movl	-424(%ebp), %eax
	movl	-420(%ebp), %edx
	movl	%eax, -184(%ebp)
	movl	%edx, -180(%ebp)
	movl	-68(%ebp), %eax
	sall	$24, %eax
	movl	%eax, %edx
	movl	-68(%ebp), %eax
	andl	$65280, %eax
	sall	$8, %eax
	orl	%eax, %edx
	movl	-68(%ebp), %eax
	andl	$16711680, %eax
	sarl	$8, %eax
	orl	%edx, %eax
	movl	%eax, %edx
	movl	-68(%ebp), %eax
	shrl	$24, %eax
	orl	%edx, %eax
	movl	%eax, -188(%ebp)
	movl	-68(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$LC7, (%esp)
	call	_printf
	movl	-88(%ebp), %ecx
	movl	-68(%ebp), %eax
	sall	$3, %eax
	movl	$0, %edx
	movl	%ecx, 8(%esp)
	movl	%eax, (%esp)
	movl	%edx, 4(%esp)
	call	_align_offset
	addl	%eax, -32(%ebp)
	adcl	%edx, -28(%ebp)
	movl	-88(%ebp), %ecx
	movl	$0, %ebx
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	addl	%ecx, %eax
	adcl	%ebx, %edx
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, %ecx
	movl	%edx, %ebx
	movl	-88(%ebp), %eax
	movl	$0, %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, (%esp)
	movl	%ebx, 4(%esp)
	call	___udivdi3
	addl	%eax, %eax
	adcl	%edx, %edx
	movl	%eax, %ecx
	movl	%edx, %ebx
	movl	-88(%ebp), %eax
	movl	$0, %edx
	addl	%ecx, %eax
	adcl	%ebx, %edx
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, %ecx
	movl	%edx, %ebx
	movl	-88(%ebp), %eax
	movl	$0, %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, (%esp)
	movl	%ebx, 4(%esp)
	call	___udivdi3
	movl	%eax, -36(%ebp)
L24:
	movl	-36(%ebp), %eax
	movl	%eax, -112(%ebp)
	movl	-36(%ebp), %eax
	leal	0(,%eax,8), %edx
	movl	-88(%ebp), %eax
	addl	%edx, %eax
	decl	%eax
	movl	$0, %edx
	divl	-88(%ebp)
	movl	%eax, -84(%ebp)
	movl	-88(%ebp), %ecx
	movl	$0, %ebx
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	addl	%ecx, %eax
	adcl	%ebx, %edx
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, %ecx
	movl	%edx, %ebx
	movl	-88(%ebp), %eax
	movl	$0, %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, (%esp)
	movl	%ebx, 4(%esp)
	call	___udivdi3
	movl	%eax, %ecx
	movl	%edx, %ebx
	movl	-36(%ebp), %eax
	cltd
	addl	%eax, %ecx
	adcl	%edx, %ebx
	movl	-84(%ebp), %eax
	cltd
	addl	%ecx, %eax
	adcl	%ebx, %edx
	movl	%eax, -120(%ebp)
	movl	%edx, -116(%ebp)
	movl	-120(%ebp), %eax
	movl	-116(%ebp), %edx
	addl	%eax, %eax
	adcl	%edx, %edx
	movl	%eax, %ecx
	movl	%edx, %ebx
	movl	-88(%ebp), %eax
	movl	$0, %edx
	addl	%ecx, %eax
	adcl	%ebx, %edx
	addl	$-1, %eax
	adcl	$-1, %edx
	movl	%eax, %ecx
	movl	%edx, %ebx
	movl	-88(%ebp), %eax
	movl	$0, %edx
	movl	%eax, 8(%esp)
	movl	%edx, 12(%esp)
	movl	%ecx, (%esp)
	movl	%ebx, 4(%esp)
	call	___udivdi3
	movl	%eax, -36(%ebp)
	movl	-36(%ebp), %eax
	cmpl	-112(%ebp), %eax
	jne	L24
	movl	-84(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$LC8, (%esp)
	call	_printf
	movl	-88(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	$LC9, (%esp)
	call	_printf
	movl	-84(%ebp), %eax
	imull	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	_malloc
	movl	%eax, -124(%ebp)
	movl	-84(%ebp), %eax
	imull	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	_memset
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, -136(%ebp)
	movl	%edx, -132(%ebp)
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, %edx
	movl	$0, %eax
	sall	$24, %edx
	movl	%eax, %ecx
	movl	%edx, %ebx
	movl	-32(%ebp), %eax
	andl	$65280, %eax
	movl	%eax, -432(%ebp)
	movl	-28(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -428(%ebp)
	movl	-432(%ebp), %eax
	movl	-428(%ebp), %edx
	movl	%eax, %edx
	movl	$0, %eax
	sall	$8, %edx
	movl	%ecx, %edi
	orl	%eax, %edi
	movl	%edi, -440(%ebp)
	movl	%ebx, %esi
	orl	%edx, %esi
	movl	%esi, -436(%ebp)
	movl	-32(%ebp), %eax
	andl	$16711680, %eax
	movl	%eax, -448(%ebp)
	movl	-28(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -444(%ebp)
	movl	-448(%ebp), %eax
	movl	-444(%ebp), %edx
	shldl	$24, %eax, %edx
	sall	$24, %eax
	movl	-440(%ebp), %ebx
	movl	-436(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -456(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -452(%ebp)
	movl	-32(%ebp), %eax
	andl	$-16777216, %eax
	movl	%eax, -464(%ebp)
	movl	-28(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -460(%ebp)
	movl	-464(%ebp), %eax
	movl	-460(%ebp), %edx
	shldl	$8, %eax, %edx
	sall	$8, %eax
	movl	-456(%ebp), %ebx
	movl	-452(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -472(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -468(%ebp)
	movl	-32(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -480(%ebp)
	movl	-28(%ebp), %eax
	andl	$255, %eax
	movl	%eax, -476(%ebp)
	movl	-480(%ebp), %eax
	movl	-476(%ebp), %edx
	shrdl	$8, %edx, %eax
	shrl	$8, %edx
	movl	-472(%ebp), %ebx
	movl	-468(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -488(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -484(%ebp)
	movl	-32(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -496(%ebp)
	movl	-28(%ebp), %eax
	andl	$65280, %eax
	movl	%eax, -492(%ebp)
	movl	-496(%ebp), %eax
	movl	-492(%ebp), %edx
	shrdl	$24, %edx, %eax
	shrl	$24, %edx
	movl	-488(%ebp), %ebx
	movl	-484(%ebp), %esi
	movl	%ebx, %ecx
	orl	%eax, %ecx
	movl	%ecx, -504(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -500(%ebp)
	movl	-32(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -512(%ebp)
	movl	-28(%ebp), %eax
	andl	$16711680, %eax
	movl	%eax, -508(%ebp)
	movl	-512(%ebp), %eax
	movl	-508(%ebp), %edx
	movl	%edx, %eax
	xorl	%edx, %edx
	shrl	$8, %eax
	movl	-504(%ebp), %ebx
	movl	-500(%ebp), %esi
	movl	%ebx, %edi
	orl	%eax, %edi
	movl	%edi, -520(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -516(%ebp)
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%edx, %eax
	xorl	%edx, %edx
	shrl	$24, %eax
	movl	-520(%ebp), %ebx
	movl	-516(%ebp), %esi
	movl	%ebx, %ecx
	orl	%eax, %ecx
	movl	%ecx, -528(%ebp)
	movl	%edx, %eax
	orl	%esi, %eax
	movl	%eax, -524(%ebp)
	movl	-528(%ebp), %eax
	movl	-524(%ebp), %edx
	movl	%eax, -176(%ebp)
	movl	%edx, -172(%ebp)
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$LC10, (%esp)
	call	_printf
	movl	-84(%ebp), %eax
	sall	$24, %eax
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	andl	$65280, %eax
	sall	$8, %eax
	orl	%eax, %edx
	movl	-84(%ebp), %eax
	andl	$16711680, %eax
	sarl	$8, %eax
	orl	%edx, %eax
	movl	%eax, %edx
	movl	-84(%ebp), %eax
	shrl	$24, %eax
	orl	%edx, %eax
	movl	%eax, -168(%ebp)
	movl	-84(%ebp), %eax
	imull	-88(%ebp), %eax
	movl	$0, %edx
	addl	%eax, -32(%ebp)
	adcl	%edx, -28(%ebp)
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, -144(%ebp)
	movl	%edx, -140(%ebp)
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	$LC11, (%esp)
	call	_printf
	movl	$0, -40(%ebp)
	jmp	L25
L26:
	movl	-40(%ebp), %eax
	leal	0(,%eax,8), %edx
	movl	-124(%ebp), %eax
	leal	(%edx,%eax), %esi
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%eax, %edx
	movl	$0, %eax
	sall	$24, %edx
	movl	%eax, %ecx
	movl	%edx, %ebx
	movl	-32(%ebp), %eax
	andl	$65280, %eax
	movl	%eax, -536(%ebp)
	movl	-28(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -532(%ebp)
	movl	-536(%ebp), %eax
	movl	-532(%ebp), %edx
	movl	%eax, %edx
	movl	$0, %eax
	sall	$8, %edx
	movl	%ecx, %edi
	orl	%eax, %edi
	movl	%edi, -544(%ebp)
	orl	%edx, %ebx
	movl	%ebx, -540(%ebp)
	movl	-32(%ebp), %eax
	andl	$16711680, %eax
	movl	%eax, -552(%ebp)
	movl	-28(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -548(%ebp)
	movl	-552(%ebp), %eax
	movl	-548(%ebp), %edx
	shldl	$24, %eax, %edx
	sall	$24, %eax
	movl	-544(%ebp), %ecx
	movl	-540(%ebp), %ebx
	movl	%ecx, %edi
	orl	%eax, %edi
	movl	%edi, -560(%ebp)
	movl	%edx, %eax
	orl	%ebx, %eax
	movl	%eax, -556(%ebp)
	movl	-32(%ebp), %eax
	andl	$-16777216, %eax
	movl	%eax, -568(%ebp)
	movl	-28(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -564(%ebp)
	movl	-568(%ebp), %eax
	movl	-564(%ebp), %edx
	shldl	$8, %eax, %edx
	sall	$8, %eax
	movl	-560(%ebp), %ecx
	movl	-556(%ebp), %ebx
	movl	%ecx, %edi
	orl	%eax, %edi
	movl	%edi, -576(%ebp)
	movl	%edx, %eax
	orl	%ebx, %eax
	movl	%eax, -572(%ebp)
	movl	-32(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -584(%ebp)
	movl	-28(%ebp), %eax
	andl	$255, %eax
	movl	%eax, -580(%ebp)
	movl	-584(%ebp), %eax
	movl	-580(%ebp), %edx
	shrdl	$8, %edx, %eax
	shrl	$8, %edx
	movl	-576(%ebp), %ecx
	movl	-572(%ebp), %ebx
	movl	%ecx, %edi
	orl	%eax, %edi
	movl	%edi, -592(%ebp)
	movl	%edx, %eax
	orl	%ebx, %eax
	movl	%eax, -588(%ebp)
	movl	-32(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -600(%ebp)
	movl	-28(%ebp), %eax
	andl	$65280, %eax
	movl	%eax, -596(%ebp)
	movl	-600(%ebp), %eax
	movl	-596(%ebp), %edx
	shrdl	$24, %edx, %eax
	shrl	$24, %edx
	movl	-592(%ebp), %ecx
	movl	-588(%ebp), %ebx
	movl	%ecx, %edi
	orl	%eax, %edi
	movl	%edi, -608(%ebp)
	movl	%edx, %eax
	orl	%ebx, %eax
	movl	%eax, -604(%ebp)
	movl	-32(%ebp), %eax
	andl	$0, %eax
	movl	%eax, -616(%ebp)
	movl	-28(%ebp), %eax
	andl	$16711680, %eax
	movl	%eax, -612(%ebp)
	movl	-616(%ebp), %eax
	movl	-612(%ebp), %edx
	movl	%edx, %eax
	xorl	%edx, %edx
	shrl	$8, %eax
	movl	-608(%ebp), %ecx
	movl	-604(%ebp), %ebx
	movl	%ecx, %edi
	orl	%eax, %edi
	movl	%edi, -624(%ebp)
	movl	%edx, %eax
	orl	%ebx, %eax
	movl	%eax, -620(%ebp)
	movl	-32(%ebp), %eax
	movl	-28(%ebp), %edx
	movl	%edx, %eax
	xorl	%edx, %edx
	shrl	$24, %eax
	movl	-624(%ebp), %ecx
	movl	-620(%ebp), %ebx
	movl	%ecx, %edi
	orl	%eax, %edi
	movl	%edi, -632(%ebp)
	movl	%edx, %eax
	orl	%ebx, %eax
	movl	%eax, -628(%ebp)
	movl	-632(%ebp), %eax
	movl	-628(%ebp), %edx
	movl	%eax, (%esi)
	movl	%edx, 4(%esi)
	movl	-88(%ebp), %eax
	movl	$0, %edx
	addl	%eax, -32(%ebp)
	adcl	%edx, -28(%ebp)
	incl	-40(%ebp)
L25:
	movl	-40(%ebp), %eax
	cmpl	-36(%ebp), %eax
	jl	L26
	movl	-36(%ebp), %eax
	imull	-88(%ebp), %eax
	movl	%eax, (%esp)
	call	_malloc
	movl	%eax, -148(%ebp)
	movl	-36(%ebp), %eax
	imull	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	$0, 4(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	_memset
	movl	-108(%ebp), %eax
	cltd
	movl	-96(%ebp), %ecx
	movl	%ecx, 24(%esp)
	movl	-88(%ebp), %ecx
	movl	%ecx, 20(%esp)
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	$0, 4(%esp)
	movl	$0, 8(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	_qcow2_create_refcount_update
	movl	-68(%ebp), %eax
	sall	$3, %eax
	movl	$0, %edx
	movl	-96(%ebp), %ecx
	movl	%ecx, 24(%esp)
	movl	-88(%ebp), %ecx
	movl	%ecx, 20(%esp)
	movl	%eax, 12(%esp)
	movl	%edx, 16(%esp)
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	_qcow2_create_refcount_update
	movl	-84(%ebp), %eax
	imull	-88(%ebp), %eax
	movl	%eax, %ecx
	movl	$0, %ebx
	movl	-136(%ebp), %eax
	movl	-132(%ebp), %edx
	movl	-96(%ebp), %esi
	movl	%esi, 24(%esp)
	movl	-88(%ebp), %esi
	movl	%esi, 20(%esp)
	movl	%ecx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	_qcow2_create_refcount_update
	movl	-36(%ebp), %eax
	imull	-88(%ebp), %eax
	movl	%eax, %ecx
	movl	$0, %ebx
	movl	-144(%ebp), %eax
	movl	-140(%ebp), %edx
	movl	-96(%ebp), %esi
	movl	%esi, 24(%esp)
	movl	-88(%ebp), %esi
	movl	%esi, 20(%esp)
	movl	%ecx, 12(%esp)
	movl	%ebx, 16(%esp)
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	_qcow2_create_refcount_update
	movl	$420, 8(%esp)
	movl	$2309, 4(%esp)
	movl	-92(%ebp), %eax
	movl	%eax, (%esp)
	call	_open
	movl	%eax, -152(%ebp)
	cmpl	$0, -152(%ebp)
	jns	L27
	movl	$-1, %eax
	jmp	L30
L27:
	movl	$72, 8(%esp)
	leal	-224(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	_write
	movl	$0, 12(%esp)
	movl	-64(%ebp), %eax
	movl	-60(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	_lseek
	movl	$0, -232(%ebp)
	movl	$0, -228(%ebp)
	movl	$0, -40(%ebp)
	jmp	L28
L29:
	movl	$8, 8(%esp)
	leal	-232(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	_write
	incl	-40(%ebp)
L28:
	movl	-40(%ebp), %eax
	cmpl	-68(%ebp), %eax
	jl	L29
	movl	$0, 12(%esp)
	movl	-136(%ebp), %eax
	movl	-132(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	_lseek
	movl	-84(%ebp), %eax
	imull	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-124(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	_write
	movl	$0, 12(%esp)
	movl	-144(%ebp), %eax
	movl	-140(%ebp), %edx
	movl	%eax, 4(%esp)
	movl	%edx, 8(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	_lseek
	movl	-36(%ebp), %eax
	imull	-88(%ebp), %eax
	movl	%eax, 8(%esp)
	movl	-148(%ebp), %eax
	movl	%eax, 4(%esp)
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	_write
	movl	-152(%ebp), %eax
	movl	%eax, (%esp)
	call	_close
	movl	-124(%ebp), %eax
	movl	%eax, (%esp)
	call	_free
	movl	-148(%ebp), %eax
	movl	%eax, (%esp)
	call	_free
	movl	$0, -124(%ebp)
	movl	$0, -148(%ebp)
	movl	$0, %eax
L30:
	addl	$652, %esp
	popl	%ebx
	.cfi_restore 3
	popl	%esi
	.cfi_restore 6
	popl	%edi
	.cfi_restore 7
	popl	%ebp
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE14:
	.def	___main;	.scl	2;	.type	32;	.endef
	.section .rdata,"dr"
LC12:
	.ascii "test.sizeof(QCowHeader)=%d.\12\0"
	.text
	.globl	_main
	.def	_main;	.scl	2;	.type	32;	.endef
_main:
LFB15:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	andl	$-16, %esp
	subl	$16, %esp
	call	___main
	movl	$72, 4(%esp)
	movl	$LC12, (%esp)
	call	_printf
	call	_create
	movl	$0, %eax
	leave
	.cfi_restore 5
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
LFE15:
	.ident	"GCC: (GNU) 4.8.1"
	.def	___mingw_vfprintf;	.scl	2;	.type	32;	.endef
	.def	___mingw_vprintf;	.scl	2;	.type	32;	.endef
	.def	_memset;	.scl	2;	.type	32;	.endef
	.def	_malloc;	.scl	2;	.type	32;	.endef
	.def	_open;	.scl	2;	.type	32;	.endef
	.def	_write;	.scl	2;	.type	32;	.endef
	.def	_lseek;	.scl	2;	.type	32;	.endef
	.def	_close;	.scl	2;	.type	32;	.endef
	.def	_free;	.scl	2;	.type	32;	.endef
