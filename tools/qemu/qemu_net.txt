Marvell Yukon 88E8057 PCI-E Gigabit Ethernet

网络是现代计算机系统不可或缺的一部分，QEMU也对虚拟机提供丰富的网络支持。qemu-kvm中主要给客户机提供了如下4种不同模式的网络。
（1）基于网桥（Bridge）的虚拟网卡
（2）基于NAT（Network Addresss Translation）的虚拟网络
（3）QEMU内置的用户模式网络（user mode networking）
（4）直接分配网络设备（包括VT-d和SR-IOV）

本章主要讲述其中第1、2、3种模式，其中第4种网络设备的直接分配将在本书第5章中详细讲述。
在介绍网络的章节，除了特别的需要iptables配置端口映射、数据包转发规则的情况，一般情况下，默认将防火墙所有规则都关闭以避免它妨碍客户机中的网络畅通，在实际生产环境中，请根据实际系统的特点进行配置。
QEMU命令行中，对客户机网络的配置（除了网络设备直接分配之外）都是用“-net”参数来进行配置的，如果没有设置任何的“-net”参数，则默认使用“-net nic -net user”参数从而使用完全基于QEMU内部实现的用户模式下的网络协议栈（将在4.4.4节详细介绍）。
qemu-kvm提供了对一系列主流和兼容性良好的网卡的模拟，通过“-net nic,model=?”参数可以查询到当前的qemu-kvm工具实现了那些网卡的模拟，如下命令行显示了qemu-kvm-1.1.0中能模拟的网卡种类。
[root@jay-linux ~]# qemu-system-x86_64 -net nic,model=?


qemu: Supported NIC models: ne2k_pci,i82551,i82557b,i82559er,rtl8139,e1000,pcnet,virtio
其中，“rtl819”这个网卡模式是qemu-kvm默认的模拟网卡类型，RTL8139是Realtek半导体公司的一个10/100M网卡系列，是曾经非常流行（当然现在看来有点古老）且兼容性好的网卡，几乎所有的现代操作系统都对RTL8139网卡驱动的提供支持。其中的“e1000”系列是提供Intel e1000系列的网卡模拟，纯的QEMU（非qemu-kvm）默认就是提供Intel e1000系列的虚拟网卡。而其中的virtio类型是qemu-kvm对半虚拟化IO（virtio）驱动的支持（将会在第5章中详细介绍virtio的基本原理、配置和使用）。
qemu-kvm命令行不加任何网络相关的参数启动客户机后，在客户机中可以看到它有一个默认的RTL8139系列的网卡（如下所示），当然由于没有进行更多的网络配置，这个模拟的网卡尽管在客户机中可见，但其使用的是用户模式的网络，其功能非常有限（将在后面的4.4.4节中详述）。

[root@kvm-guest ~]# lspci | grep Eth
00:03.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL-8139/8139C/8139C+ (rev 20)
如下的命令行会模拟一个Intel e1000系列的网卡给客户机使用。
qemu-system-x86_64 rhel6u3.img -net nic,model=e1000
在客户机中看到的e1000系列网卡如下所示，默认是Intel 82540EM系列的网卡。

[root@kvm-guest ~]# lspci | grep Eth
00:03.0 Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller (rev 03)

qemu-kvm命令行中基本的“-net”参数的细节如下：
-net nic[,vlan=n][,macaddr=mac][,model=type][,name=name][,addr=addr][,vectors=v]
它会让QEMU建立一个新的网卡并将其连接到n号VLAN上。
其中，“-net nic”这个是必须的参数，表明这是一个网卡的配置。
vlan=n  表示将网卡放入到编号为n的VLAN，默认为0。
macaddr=mac  设置网卡的MAC地址，默认会根据宿主机中网卡的地址来分配；若局域网中客户机太多，建议自己设置MAC地址以防止MAC地址冲突。
model=type  设置模拟的网卡的类型，qemu-kvm中默认为rtl8139。
name=name  为网卡设置一个易读的名称，该名称仅在QEMU monitor中可能用到。
addr=addr  设置网卡在客户机中的PCI设备地址为addr。
vectors=v  设置该网卡设备的MSI-X向量的数量为n，该选项仅对使用virtio驱动的网卡有效，设置为“vectors=0”是关闭virtio网卡的MSI-X中断方式。
如需给一个客户机提供多个网卡，可以多次使用“-net”参数即可。
在宿主机中用如下的命令行启动一个客户机，并使用上面的一些网络参数。

[root@jay-linux kvm-demo]# qemu-system-x86_64 -m 1024 rhel6u3.img -net nic,vlan=0,macaddr=52:54:00:12:34:22,model=e1000,addr=08 –net user
在客户机中用一些工具查看网卡相关的信息如下（这里使用了用户模式的网络栈，其详细介绍请参考4.4.4节），可知上面的网络设置都已生效。

[root@kvm-guest ~]# lspci | grep Eth
00:08.0 Ethernet controller: Intel Corporation 82540EM Gigabit Ethernet Controller (rev 03)
[root@kvm-guest ~]# ethtool -i eth1
driver: e1000
version: 7.3.21-k8-NAPI
firmware-version:
bus-info: 0000:00:08.0

[root@kvm-guest ~]# ifconfig
eth1      Link encap:Ethernet  HWaddr 52:54:00:12:34:22
inet addr:10.0.2.15  Bcast:10.0.2.255  Mask:255.255.255.0
inet6 addr: fe80::5054:ff:fe12:3422/64 Scope:Link
UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
RX packets:10 errors:0 dropped:0 overruns:0 frame:0
TX packets:47 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:1000
RX bytes:1890 (1.8 KiB)  TX bytes:6380 (6.2 KiB)
 
lo        Link encap:Local Loopback
inet addr:127.0.0.1  Mask:255.0.0.0
inet6 addr: ::1/128 Scope:Host
UP LOOPBACK RUNNING  MTU:16436  Metric:1
RX packets:12 errors:0 dropped:0 overruns:0 frame:0
TX packets:12 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:0
RX bytes:720 (720.0 b)  TX bytes:720 (720.0 b)

在QEMU monitor中查看网络的信息如下：
(qemu) info network
VLAN 0 devices:
user.0: type=user,net=10.0.2.0,restrict=off
e1000.0: type=nic,model=e1000,macaddr=52:54:00:12:34:22
Devices not on any VLAN:
本节介绍的网络设置的基本参数，但是由于没有去详细配置其具体的网络工作模式，所以这里得到虚拟得到的网卡在客户机中可能并不能连接上外部网络，接下来的3个小节将详细第介绍各个网络工作模式的原理和配置方法。


qemu虚拟机与外部网络的通信 
一、基本概念
为了使虚拟机能够与外界通信，Qemu需要为虚拟机提供网络设备。Qemu支持的常用网卡包括NE2000、rtl8139、pcnet32等。命令行上用-net nic为虚拟机创建虚拟机网卡。例如，qemu的命令行选项
                            -net nic,model=pcnet
表示为虚拟机添加一块pcnet型的以太网卡。如果省略model参数则qemu会默认选择一种网卡类型，目前采用的是Intel 82540EM（手册里说明的是e1000），可以在虚拟机启动后执行lspci命令查看。
有了虚拟网络设备，下面的问题是如何用这些设备来联网。
首先，虚拟机的网络设备连接在qemu虚拟的VLAN中。每个qemu的运行实例是宿主机中的一个进程，而每个这样的进程中可以虚拟一些VLAN，虚拟机网络设备接入这些VLAN中。当某个VLAN上连接的网络设备发送数据帧，与它在同一个VLAN中的其它网路设备都能接收到数据帧。上面的例子中对虚拟机的pcnet网卡没有指定其连接的VLAN号，那么qemu默认会将该网卡连入vlan0。下面这个例子更具一般性：
      -net nic,model=pcnet -net nic,model=rtl8139,vlan=1, -net nic,model=ne2k_pci,vlan=1
该命令为虚拟机创建了三块网卡，其中第一块网卡类型是pcnet，连入vlan0；第二块网卡类型是 rtl8139，第三块网卡类型是ne2k_pci，这两块都连入vlan1，所以第二块网卡与第三块网卡可以互相通信，但它们与第一块网卡不能直接通信。

接下来，各个VLAN再通过qemu提供的4种通信方式与外界联网。
User mode stack：这种方式在qemu进程中实现一个协议栈，负责在虚拟机VLAN和外部网络之间转发数据。可以将该协议栈视为虚拟机与外部网络之间的一个NAT服务器，外部网络不能主动与虚拟机通信。虚拟机VLAN中的各个网络接口只能置于10.0.2.0子网中，所以这种方式只能与外部网络进行有限的通信。此外，可以用-redir选项为宿主机和虚拟机的两个TCP或UDP端口建立映射，实现宿主机和虚拟机在特殊要求下的通信（例如X-server或ssh）。User mode stack通信方式由-net user选项启用，如果不显式指定通信方式，则这种方式是qemu默认的通信方式。
socket：这种方式又分为TCP和UDP两种类型。
（1）TCP：为一个VLAN创建一个套接字，让该套接字在指定的TCP端口上监听，而其他VLAN连接到该套接字上，从而将多个VLAN连接起来。缺点在于如果监听套接字所在qemu进程崩溃，整个连接就无法工作。监听套接字所在VLAN通过-net socket,listen选项启用，其他VLAN通过-net socket,connect选项启用。
（2）UDP：所有VLAN连接到一个多播套接字上，从而使多个VLAN通过一个总线通信。所有VLAN都通过-net socket,mcast选项启用。
TAP：这种方式首先需要在宿主机中创建并配置一个TAP设备，qemu进程将该TAP设备连接到虚拟机VLAN中。其次，为了实现虚拟机与外部网络的通信，在宿主机中通常还要创建并配置一个网桥，并将宿主机的网络接口（通常是eth0）作为该网桥的一个接口。最后，只要将TAP设备作为网桥的另一个接口，虚拟机VLAN通过TAP设备就可以与外部网络完全通信了。这是因为，宿主机的eth0接口作为网桥的接口，与外部网络连接；TAP设备作为网桥的另一个接口，与虚拟机VLAN连接，这样两个网络就连通了。此时，网桥在这两个网络之间转发数据帧。
这里有两个问题需要注意：
（1）网桥的转发工作需要得到内核的支持，所以在编译宿主机内核时需要选择与桥接相关的配置选项。
（2）当宿主机eth0接口作为网桥接口时，不能为其配置IP地址，而要位将IP地址配置给网桥。
TAP方式由-net tap选项启用。
VDE：这种方式首先要启动一个VDE进程，该进程打开一个TAP设备，然后各个虚拟机VLAN与VDE进程连接，这样各个VLAN就可以通过TAP设备连接起来。VDE进程通过执行vde_switch命令启动，各个VLAN所在qemu进程通过执行veqe命令启动，这些VLAN就可以与VDE进程连接了。
以上四种通信方式中，socket方式和VDE方式用于虚拟机VLAN之间的连接，而user mode stack方式与外部网路的通信比较有限，所以下面主要讨论TAP方式的配置。
在没有做配置之前，首先需要对TAP设备有所认识。TUN/TAP是内核支持的网络虚拟设备，这种网络设备完全由的软件实现。与网络硬件设备不同，TUN/TAP负责在内核协议栈与用户进程之间传送协议数据单元。TUN与TAP的区别在于，TUN工作在网络层，而TAP则工作在数据链路层。具体在运行TCP/IP的以太网中，TUN与应用程序交换IP包，而TAP与应用程序交换以太帧。所以TUN通常涉及路由，而TAP则常用于网络桥接。TUN/TAP的典型应用包括：OpenVPN、OpenSSH 以及虚拟机网络。

二、在Ubuntu 10.04中配置qemu虚拟网络
内核支持需要对TUN/TAP设备和虚拟网桥提供支持：
（1）Device Drivers
            --> Network device support
                        --> Universal TUN/TAP device driver support
（2）Networking support
            --> Networking options
                        --> 802.1d Ethernet Bridging
安装两个配置网络所需软件包：
apt-get install bridge-utils        # 虚拟网桥工具
apt-get install uml-utilities       # UML（User-mode linux）工具
配置虚拟网桥的操作（假设系统启动后eth0已经启动，并且从DHCP获得IP地址）。
ifconfig eth0 down                  # 先关闭eth0接口
brctl addbr br0                     # 增加一个虚拟网桥br0
brctl addif br0 eth0                # 在br0中添加一个接口eth0
brctl stp br0 off                   # 只有一个网桥，所以关闭生成树协议
brctl setfd br0 1                   # 设置br0的转发延迟
brctl sethello br0 1                # 设置br0的hello时间
ifconfig br0 0.0.0.0 promisc up     # 打开br0接口
ifconfig eth0 0.0.0.0 promisc up    # 打开eth0接口
dhclient br0                        # 从dhcp服务器获得br0的IP地址
brctl show br0                      # 查看虚拟网桥列表
brctl showstp br0                   # 查看br0的各接口信息
在没有dhcp服务器的网络中也可以用ifconfig命令为br0接口配置一个静态IP地址：
ifconfig br0 192.168.0.22 netmask 255.255.255.0
route add -net 0.0.0.0 netmask 0.0.0.0 gw 192.168.0.254
配置TAP设备的操作：
tunctl -t tap0 -u root              # 创建一个tap0接口，只允许root用户访问
brctl addif br0 tap0                # 在虚拟网桥中增加一个tap0接口
ifconfig tap0 0.0.0.0 promisc up    # 打开tap0接口
brctl showstp br0                   # 显示br0的各个接口
假设内核的顶层目录在/usr/src/linux，且内核已经编译完毕。启动qemu的操作：
cd /usr/src/linux
qemu -kernel arch/x86/boot/bzImage -net nic -net tap,ifname=tap0,script=no,downscript=no 
如果省略script和downscript参数，qemu在启动时会以第一个不存在的tap接口名（通常是tap0）为参数去调用/etc/qemu-ifup脚本，而在退出时调用/etc/qemu-ifdown脚本。这两个脚本需要用户自行编写，其主要作用通常是：在启动时创建和打开指定的TAP接口，并将该接口添加到虚拟网桥中；退出时将该接口从虚拟网桥中移除，然后关闭该接口。由于配置TAP设备的操作前面已经做过了，所以启动qemu时显式地告诉qemu不要执行这两个脚本。这里需要严重注意：-net tap的各参数之间不要有空格！为了这个问题花了半个小时 :-(。
为了在系统启动时能够自动配置虚拟网桥和TAP设备，编写/etc/network/interfaces文件的内容如下：
auto lo
iface lo inet loopback

# The eth0 network interface(s)
# auto eth0
# iface eth0 inet dhcp

# The bridge network interface(s)
auto br0
iface br0 inet dhcp
# iface br0 inet static
# address 192.168.0.1
# netmask 255.255.255.0
# gateway 192.168.0.254
bridge_ports eth0
bridge_fd 9
bridge_hello 2
bridge_maxage 12
bridge_stp off

# The tap0 network interface(s)
auto tap0
iface tap0 inet manual
# iface tap0 inet static
# address 192.168.0.2
# netmask 255.255.255.0
# gateway 192.168.0.254
pre-up tunctl -t tap0 -u root
pre-up ifconfig tap0 0.0.0.0 promisc up
post-up brctl addif br0 tap0
注意：此时应该将配置文件中的eth0关闭（相应的文本行注释掉）。

三、在gentoo中配置qemu虚拟网络
内核支持需要对TUN/TAP设备和虚拟网桥提供支持：
与ubuntu的配置相同。
安装两个配置网络所需软件包：
emerge bridge-utils            # 虚拟网桥工具
emerge usermod-utilities       # UML（User-mode linux）工具
配置虚拟网桥的操作（假设系统启动后eth0已经启动，并且从DHCP获得IP地址）。
与ubuntu的配置基本相同，指示gentoo默认采用的dhcp客户端是dhcpcd，所以相应的命令行应改为：
dhcpcd br0
配置TAP设备的操作：
与ubuntu的配置相同。
启动qemu。
与ubuntu的配置相同。
为了在系统启动时能够自动配置虚拟网桥和TAP设备，编写/etc/conf.d/net文件的内容如下：
bridge_br0="eth0 tap0"
config_eth0=( "null" )
config_tap0="null"
tuntap_tap0="tap"
tunctl_tap0="-u root"
config_br0=( "dhcp" )
rc_need_br0="net.eth0 net.tap0"
brctl_br0=( "setfd 0" "sethello 1" "stp off" )
此外，还要让gentoo在启动时知道需要启动哪些网络接口：
cd /etc/init.d
ln -s net.lo net.br0
ln -s net.lo net.tap0


四、参考文献
Universal TUN/TAP device driver
Tun/Tap interface tutorial
QEMU Emulator User Documentation
QEMU Networking
QEMU on Windows
The Linux Foundation -- bridge
QEMU - Debian - Linux - TUN/TAP - network bridge
Debian Lenny Tun/Tap Bridge Setup
QEmu -- wiki
Ubuntu Documentation -- KVM

